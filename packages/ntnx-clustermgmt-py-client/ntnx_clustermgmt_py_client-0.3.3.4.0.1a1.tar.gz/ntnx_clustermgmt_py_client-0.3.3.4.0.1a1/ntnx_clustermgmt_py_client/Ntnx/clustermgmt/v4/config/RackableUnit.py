# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.RackReference import RackReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.RackableUnitModel import RackableUnitModel  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.RackableUnitNode import RackableUnitNode  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class RackableUnit(ExternalizableAbstractModel):
    """RackableUnit - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'id': 'int',
        'serial': 'str',
        'model': 'clustermgmt.v4.config.RackableUnitModel',
        'model_name': 'str',
        'nodes': 'list[clustermgmt.v4.config.RackableUnitNode]',
        'rack': 'clustermgmt.v4.config.RackReference',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'id': 'id',
        'serial': 'serial',
        'model': 'model',
        'model_name': 'modelName',
        'nodes': 'nodes',
        'rack': 'rack',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, id=None, serial=None, model=None, model_name=None, nodes=None, rack=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """RackableUnit - a model defined in Swagger
            \nRackable Unit configuration
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__id = None
        self.__serial = None
        self.__model = None
        self.__model_name = None
        self.__nodes = None
        self.__rack = None
        self.discriminator = None
        if id is not None:
            self.__id = id
        if serial is not None:
            self.__serial = serial
        if model is not None:
            self.__model = model
        if model_name is not None:
            self.__model_name = model_name
        if nodes is not None:
            self.__nodes = nodes
        if rack is not None:
            self.__rack = rack

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.RackableUnit'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a1.config.RackableUnit'


    @property
    def id(self):
        """`{ int }`
            \nRackable unit Id
        """ # noqa: E501
        return self.__id

    @id.setter
    def id(self, id):

        self.__id = id

    @property
    def serial(self):
        """`{ str }`
            \nRackable unit serial name
        """ # noqa: E501
        return self.__serial

    @serial.setter
    def serial(self, serial):

        self.__serial = serial

    @property
    def model(self):
        """`{ clustermgmt.v4.config.RackableUnitModel }`
            
        """ # noqa: E501
        return self.__model

    @model.setter
    def model(self, model):

        self.__model = model

    @property
    def model_name(self):
        """`{ str }`
            \nRackable unit model name
        """ # noqa: E501
        return self.__model_name

    @model_name.setter
    def model_name(self, model_name):

        self.__model_name = model_name

    @property
    def nodes(self):
        """`{ list[clustermgmt.v4.config.RackableUnitNode] }`
            \nList of node information registered to the block
        """ # noqa: E501
        return self.__nodes

    @nodes.setter
    def nodes(self, nodes):

        self.__nodes = nodes

    @property
    def rack(self):
        """`{ clustermgmt.v4.config.RackReference }`
            
        """ # noqa: E501
        return self.__rack

    @rack.setter
    def rack(self, rack):

        self.__rack = rack

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RackableUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RackableUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

