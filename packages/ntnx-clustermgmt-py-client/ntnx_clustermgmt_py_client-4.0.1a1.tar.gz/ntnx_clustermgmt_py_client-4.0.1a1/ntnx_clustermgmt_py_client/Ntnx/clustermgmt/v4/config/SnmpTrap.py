# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.SnmpProtocol import SnmpProtocol  # noqa: F401,E501
from ntnx_clustermgmt_py_client.Ntnx.clustermgmt.v4.config.SnmpTrapVersion import SnmpTrapVersion  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class SnmpTrap(object):
    """SnmpTrap - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'address': 'str',
        'username': 'str',
        'protocol': 'clustermgmt.v4.config.SnmpProtocol',
        'port': 'int',
        'inform': 'bool',
        'engine_id': 'str',
        'version': 'clustermgmt.v4.config.SnmpTrapVersion',
        'reciever_name': 'str',
        'community_string': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'address': 'address',
        'username': 'username',
        'protocol': 'protocol',
        'port': 'port',
        'inform': 'inform',
        'engine_id': 'engineId',
        'version': 'version',
        'reciever_name': 'recieverName',
        'community_string': 'communityString',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, address=None, username=None, protocol=None, port=None, inform=None, engine_id=None, version=None, reciever_name=None, community_string=None, *args, **kwargs):  # noqa: E501
        """SnmpTrap - a model defined in Swagger
            \nSNMP trap details
        """
        self.__address = None
        self.__username = None
        self.__protocol = None
        self.__port = None
        self.__inform = None
        self.__engine_id = None
        self.__version = None
        self.__reciever_name = None
        self.__community_string = None
        self.discriminator = None
        if address is not None:
            self.__address = address
        if username is not None:
            self.__username = username
        if protocol is not None:
            self.__protocol = protocol
        if port is not None:
            self.__port = port
        if inform is not None:
            self.__inform = inform
        if engine_id is not None:
            self.__engine_id = engine_id
        if version is not None:
            self.__version = version
        if reciever_name is not None:
            self.__reciever_name = reciever_name
        if community_string is not None:
            self.__community_string = community_string
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.SnmpTrap'

    def _initialize_fq_object_type(self):
        return 'clustermgmt.v4.r0.a1.config.SnmpTrap'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def address(self):
        """`{ str }`
            \nSNMP trap address
        """ # noqa: E501
        return self.__address

    @address.setter
    def address(self, address):

        self.__address = address

    @property
    def username(self):
        """`{ str }`
            \nSNMP user name
        """ # noqa: E501
        return self.__username

    @username.setter
    def username(self, username):

        self.__username = username

    @property
    def protocol(self):
        """`{ clustermgmt.v4.config.SnmpProtocol }`
            
        """ # noqa: E501
        return self.__protocol

    @protocol.setter
    def protocol(self, protocol):

        self.__protocol = protocol

    @property
    def port(self):
        """`{ int }`
            \nSNMP port
        """ # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):

        self.__port = port

    @property
    def inform(self):
        """`{ bool }`
            \nSNMP information status
        """ # noqa: E501
        return self.__inform

    @inform.setter
    def inform(self, inform):

        self.__inform = inform

    @property
    def engine_id(self):
        """`{ str }`
            \nSNMP engine Id
        """ # noqa: E501
        return self.__engine_id

    @engine_id.setter
    def engine_id(self, engine_id):

        self.__engine_id = engine_id

    @property
    def version(self):
        """`{ clustermgmt.v4.config.SnmpTrapVersion }`
            
        """ # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):

        self.__version = version

    @property
    def reciever_name(self):
        """`{ str }`
            \nSNMP receiver name
        """ # noqa: E501
        return self.__reciever_name

    @reciever_name.setter
    def reciever_name(self, reciever_name):

        self.__reciever_name = reciever_name

    @property
    def community_string(self):
        """`{ str }`
            \nPlaintext community string for SNMP version 2.0
        """ # noqa: E501
        return self.__community_string

    @community_string.setter
    def community_string(self, community_string):

        self.__community_string = community_string

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnmpTrap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpTrap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

