name: CI

on:
  pull_request:
  release:
    types:
      - released
      - prereleased
  push:
    branches:
      - master
      - 'releases/**'

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Build Rust crate
        run: cargo build --release
      - name: Run Rust unit tests
        run: cargo test --no-default-features --release
      - name: Build Python wheels (x86_64)
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: -i python --release --out dist
      - name: Install Python wheels (x86_64)
        run: |
          pip install fastdatetime --no-index --find-links dist --force-reinstall
      - name: Build Python wheels (universal2)
        if: ${{ matrix.python-version >= '3.8' || matrix.python-version == '3.10' }}
        uses: messense/maturin-action@v1
        with:
          args: -i python --release --universal2 --out dist --no-sdist
      - name: Install Python wheels (universal2)
        if: ${{ matrix.python-version >= '3.8' }}
        run: |
          pip install fastdatetime --no-index --find-links dist --force-reinstall
      - name: Run Python unit tests
        run: |
          pip install -r python/requirements-dev.txt
          python -m pytest -v python/tests/unit
      - name: Upload Python wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        target: [x64]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Update rustup
        run: rustup self update
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build Rust crate
        if: matrix.target == 'x64'
        run: cargo build --release
      - name: Run Rust unit tests
        if: matrix.target == 'x64'
        run: cargo test --no-default-features --release
      - name: Build Python wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: -i python --release --out dist --no-sdist
      - name: Install Python wheels
        run: |
          pip install fastdatetime --no-index --find-links dist --force-reinstall
      - name: Run Python unit tests
        run: |
          pip install -r python/requirements-dev.txt
          python -m pytest -v python/tests/unit
      - name: Upload Python wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        target: [x86_64, i686]
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - name: Build Rust crate
      run: cargo build --release
    - name: Run Rust unit tests
      run: cargo test --no-default-features --release
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build Python wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i python${{ matrix.python-version }} --release --out dist --no-sdist
    - name: Run Python unit tests
      if: matrix.target == 'x86_64'
      run: |
        pip install fastdatetime --no-index --find-links dist --force-reinstall
        pip install -r python/requirements-dev.txt
        python -m pytest -v python/tests/unit
    - name: Run Python benchmarks
      if: matrix.target == 'x86_64'
      run: |
        pip install -r python/requirements-dev.txt
        python -m pytest -v --benchmark-only python/tests/perf
    - name: Upload Python wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [
          { version: '3.7', abi: 'cp37-cp37m' },
          { version: '3.8', abi: 'cp38-cp38' },
          { version: '3.9', abi: 'cp39-cp39' },
          { version: '3.10', abi: 'cp310-cp310' },
        ]
        target: [aarch64, armv7, s390x, ppc64le, ppc64]
        include:
          - python:
              version: 3.7
              abi: pp37-pypy37_pp73
            target: aarch64
          - python:
              version: 3.8
              abi: pp38-pypy38_pp73
            target: aarch64
    steps:
    - uses: actions/checkout@v2
    - name: Build Python wheels
      uses: messense/maturin-action@v1
      env:
        PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i python3.9 --release --out dist --no-sdist 
    - uses: uraimo/run-on-arch-action@v2.0.5
      # run-on-arch-action doesn't have ppc64 support
      # skipped cross compiled pypy wheel tests for now
      if: ${{ matrix.target != 'ppc64' && !startsWith(matrix.python.abi, 'pp') }}
      name: Install Python wheels
      with:
        arch: ${{ matrix.target }}
        distro: ubuntu20.04
        githubToken: ${{ github.token }}
        # Mount the dist directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/dist:/artifacts"
        install: |
          apt-get update
          apt-get install -y --no-install-recommends python3 python3-venv software-properties-common
          add-apt-repository ppa:deadsnakes/ppa
          apt-get update
          apt-get install -y curl python3.7-venv python3.9-venv python3.10-venv
        run: |
          ls -lrth /artifacts
          PYTHON=python${{ matrix.python.version }}
          $PYTHON -m venv venv
          venv/bin/pip install -U pip
          venv/bin/pip install fastdatetime --no-index --find-links /artifacts --force-reinstall
          venv/bin/python -c 'import fastdatetime'
    - name: Upload Python wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  pypy-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [
          { version: pypy-3.7, abi: pp37-pypy37_pp73 },
          { version: pypy-3.8, abi: pp38-pypy38_pp73 },
        ]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python.version }}
    - name: Build Pypy wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i /opt/python/${{ matrix.python.abi }}/bin/pypy --release --out dist --no-sdist 
    - name: Run Pypy import check
      run: |
        pip install fastdatetime --no-index --find-links dist
        pypy -c "import fastdatetime"
    - name: Upload Pypy wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  pypy-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [ pypy-3.7, pypy-3.8 ]
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install maturin
      run: pip install maturin
    - name: Build Pypy wheels
      run: |
        maturin build -i $(which pypy) --release --out dist
        ls -l dist
    - name: Run Pypy import check
      run: |
        pip install fastdatetime --no-index --find-links dist
        pypy -c "import fastdatetime"
    - name: Upload Pypy wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ macos, windows, linux, linux-cross, pypy-linux, pypy-macos ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade wheel pip setuptools twine
          twine upload --skip-existing *