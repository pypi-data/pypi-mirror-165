# coding: utf-8

"""
    Devo Model Manager API

    Devo API for machine learning  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: machine.learning@devo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LoginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stand_alone_token': 'str',
        'domain': 'str',
        'valid_domains': 'list[str]'
    }

    attribute_map = {
        'stand_alone_token': 'standAloneToken',
        'domain': 'domain',
        'valid_domains': 'validDomains'
    }

    def __init__(self, stand_alone_token=None, domain=None, valid_domains=None):  # noqa: E501
        """LoginResponse - a model defined in Swagger"""  # noqa: E501
        self._stand_alone_token = None
        self._domain = None
        self._valid_domains = None
        self.discriminator = None
        if stand_alone_token is not None:
            self.stand_alone_token = stand_alone_token
        if domain is not None:
            self.domain = domain
        if valid_domains is not None:
            self.valid_domains = valid_domains

    @property
    def stand_alone_token(self):
        """Gets the stand_alone_token of this LoginResponse.  # noqa: E501

        Authentication token for use with other endpoints  # noqa: E501

        :return: The stand_alone_token of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._stand_alone_token

    @stand_alone_token.setter
    def stand_alone_token(self, stand_alone_token):
        """Sets the stand_alone_token of this LoginResponse.

        Authentication token for use with other endpoints  # noqa: E501

        :param stand_alone_token: The stand_alone_token of this LoginResponse.  # noqa: E501
        :type: str
        """

        self._stand_alone_token = stand_alone_token

    @property
    def domain(self):
        """Gets the domain of this LoginResponse.  # noqa: E501

        Domain where the token may be used  # noqa: E501

        :return: The domain of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this LoginResponse.

        Domain where the token may be used  # noqa: E501

        :param domain: The domain of this LoginResponse.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def valid_domains(self):
        """Gets the valid_domains of this LoginResponse.  # noqa: E501

        Other valid domains where the user has access  # noqa: E501

        :return: The valid_domains of this LoginResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_domains

    @valid_domains.setter
    def valid_domains(self, valid_domains):
        """Sets the valid_domains of this LoginResponse.

        Other valid domains where the user has access  # noqa: E501

        :param valid_domains: The valid_domains of this LoginResponse.  # noqa: E501
        :type: list[str]
        """

        self._valid_domains = valid_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
