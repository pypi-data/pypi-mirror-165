# coding: utf-8

"""
    Devo Model Manager API

    Devo API for machine learning  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: machine.learning@devo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from devo_model_manager_client.models.cluster import Cluster  # noqa: F401,E501
from devo_model_manager_client.models.field import Field  # noqa: F401,E501


class ModelReview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid': 'bool',
        'error_detail': 'str',
        'output_type': 'str',
        'category': 'str',
        'image_id': 'int',
        'fields': 'list[Field]',
        'clusters': 'list[Cluster]',
        'file_name': 'str',
        'size': 'int',
        'runtime_size': 'int'
    }

    attribute_map = {
        'valid': 'valid',
        'error_detail': 'errorDetail',
        'output_type': 'outputType',
        'category': 'category',
        'image_id': 'imageId',
        'fields': 'fields',
        'clusters': 'clusters',
        'file_name': 'fileName',
        'size': 'size',
        'runtime_size': 'runtimeSize'
    }

    def __init__(self, valid=None, error_detail=None, output_type=None, category=None, image_id=None, fields=None, clusters=None, file_name=None, size=None, runtime_size=None):  # noqa: E501
        """ModelReview - a model defined in Swagger"""  # noqa: E501
        self._valid = None
        self._error_detail = None
        self._output_type = None
        self._category = None
        self._image_id = None
        self._fields = None
        self._clusters = None
        self._file_name = None
        self._size = None
        self._runtime_size = None
        self.discriminator = None
        if valid is not None:
            self.valid = valid
        if error_detail is not None:
            self.error_detail = error_detail
        if output_type is not None:
            self.output_type = output_type
        if category is not None:
            self.category = category
        if image_id is not None:
            self.image_id = image_id
        if fields is not None:
            self.fields = fields
        if clusters is not None:
            self.clusters = clusters
        if file_name is not None:
            self.file_name = file_name
        if size is not None:
            self.size = size
        if runtime_size is not None:
            self.runtime_size = runtime_size

    @property
    def valid(self):
        """Gets the valid of this ModelReview.  # noqa: E501

        Indicates wether the model is valid or not  # noqa: E501

        :return: The valid of this ModelReview.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ModelReview.

        Indicates wether the model is valid or not  # noqa: E501

        :param valid: The valid of this ModelReview.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def error_detail(self):
        """Gets the error_detail of this ModelReview.  # noqa: E501

        String with some details about what could be wrong about an invaid model  # noqa: E501

        :return: The error_detail of this ModelReview.  # noqa: E501
        :rtype: str
        """
        return self._error_detail

    @error_detail.setter
    def error_detail(self, error_detail):
        """Sets the error_detail of this ModelReview.

        String with some details about what could be wrong about an invaid model  # noqa: E501

        :param error_detail: The error_detail of this ModelReview.  # noqa: E501
        :type: str
        """

        self._error_detail = error_detail

    @property
    def output_type(self):
        """Gets the output_type of this ModelReview.  # noqa: E501

        The type of the value generated by the model as a prediction  # noqa: E501

        :return: The output_type of this ModelReview.  # noqa: E501
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this ModelReview.

        The type of the value generated by the model as a prediction  # noqa: E501

        :param output_type: The output_type of this ModelReview.  # noqa: E501
        :type: str
        """

        self._output_type = output_type

    @property
    def category(self):
        """Gets the category of this ModelReview.  # noqa: E501

        The type of the model  # noqa: E501

        :return: The category of this ModelReview.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ModelReview.

        The type of the model  # noqa: E501

        :param category: The category of this ModelReview.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def image_id(self):
        """Gets the image_id of this ModelReview.  # noqa: E501

        The id of the uploaded image or file of the model  # noqa: E501

        :return: The image_id of this ModelReview.  # noqa: E501
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ModelReview.

        The id of the uploaded image or file of the model  # noqa: E501

        :param image_id: The image_id of this ModelReview.  # noqa: E501
        :type: int
        """

        self._image_id = image_id

    @property
    def fields(self):
        """Gets the fields of this ModelReview.  # noqa: E501

        The fields or parameters that are consumed by the model  # noqa: E501

        :return: The fields of this ModelReview.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ModelReview.

        The fields or parameters that are consumed by the model  # noqa: E501

        :param fields: The fields of this ModelReview.  # noqa: E501
        :type: list[Field]
        """

        self._fields = fields

    @property
    def clusters(self):
        """Gets the clusters of this ModelReview.  # noqa: E501

        For clustering models, the positions and names of the clusters  # noqa: E501

        :return: The clusters of this ModelReview.  # noqa: E501
        :rtype: list[Cluster]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this ModelReview.

        For clustering models, the positions and names of the clusters  # noqa: E501

        :param clusters: The clusters of this ModelReview.  # noqa: E501
        :type: list[Cluster]
        """

        self._clusters = clusters

    @property
    def file_name(self):
        """Gets the file_name of this ModelReview.  # noqa: E501

        The name of the uploaded image file  # noqa: E501

        :return: The file_name of this ModelReview.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ModelReview.

        The name of the uploaded image file  # noqa: E501

        :param file_name: The file_name of this ModelReview.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def size(self):
        """Gets the size of this ModelReview.  # noqa: E501

        The size of the uploaded image file  # noqa: E501

        :return: The size of this ModelReview.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ModelReview.

        The size of the uploaded image file  # noqa: E501

        :param size: The size of this ModelReview.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def runtime_size(self):
        """Gets the runtime_size of this ModelReview.  # noqa: E501

        The size of the model while running in bytes  # noqa: E501

        :return: The runtime_size of this ModelReview.  # noqa: E501
        :rtype: int
        """
        return self._runtime_size

    @runtime_size.setter
    def runtime_size(self, runtime_size):
        """Sets the runtime_size of this ModelReview.

        The size of the model while running in bytes  # noqa: E501

        :param runtime_size: The runtime_size of this ModelReview.  # noqa: E501
        :type: int
        """

        self._runtime_size = runtime_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelReview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelReview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
