Metadata-Version: 2.1
Name: gui-executor
Version: 0.2.15
Summary: Execute Python code in an automatically generated GUI App.
Home-page: https://github.com/rhuygen/gui-executor
Author: Rik Huygen
Author-email: rik.huygen@kuleuven.be
License: MIT
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Environment :: X11 Applications :: Qt
Classifier: Topic :: Utilities
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.8.0
Description-Content-Type: text/markdown
Requires-Dist: rich (>=12.5)
Requires-Dist: PyQt5
Requires-Dist: executor
Requires-Dist: pyyaml
Requires-Dist: matplotlib
Requires-Dist: jupyter-client (==6.1.12)
Requires-Dist: jupyter-core (==4.11.1)
Requires-Dist: qtconsole
Provides-Extra: test
Requires-Dist: faker ; extra == 'test'
Requires-Dist: lorem-text ; extra == 'test'


# GUI Executor

You ever wanted to execute your Python code from a simple GUI without the need to use a REPL or commandline? Look no further, use GUI Executor.

You probably have a number of Python scripts hanging around that you use for automated tasks, like e.g. taking a backup of your SQL databases, reducing some of your IoT time series, standard image manipulations scripts etc. Each of these tasks can be put into a function call with parameters and defaults. Let's take a look at a very simple example, the usual boring 'Hello, World!'.

Create a Python file `say_hello.py` in the folder `~/lib/scripts`:
```python
from gui_executor.exec import exec_ui


@exec_ui()
def say_hello(name: str = "Rik"):

    print(f"Hello, {name}!")

    return "Successfully said 'hello!'."

```
Now, set your PYTHONPATH to point to the `~/lib` folder:
```python
export PYTHONPATH=~/lib
```
![](docs/images/say-hello-1.png "Initial screen for gui-executor")
![](docs/images/say-hello-2.png "Pressed the say_hello button")


