# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/test_exporter.ipynb.

# %% auto 0
__all__ = ['freeze', 'unfreeze', 'add_indent', 'add_function', 'TestExporter', 'TestMerger', 'merge_tests', 'replace_fn',
           'write_test_nb', 'export_nb_tests', 'get_ipynb_paths', 'build_test_nb', 'Outputs', 'extract_outputs',
           'extract_and_merge_outputs', 'extract_and_write_outputs', 'Freeze', 'add_no_run_import', 'write_frozen_nb',
           'UnFreeze', 'write_unfrozen_nb', 'store_frozen', 'freeze_all', 'store_unfrozen', 'unfreeze_all']

# %% ../../nbs/utils/test_exporter.ipynb 3
from fastcore.script import *
from fastcore.imports import *

from .utils import json_load, json_dump

import json
from collections import defaultdict
from difflib import ndiff, context_diff
import sys
import ipynbname
import os
from pathlib import Path

# %% ../../nbs/utils/test_exporter.ipynb 11
def add_indent (source, nspaces=4):
    return ''.join ([f'{" "*nspaces}{x}\n' for x in source.split ('\n')])

def add_function (name):
    return f'def test_{name} ():\n'

class TestExporter:
    def __init__ (self, nspaces=4, btw_cells='', btw_import_cells=''):
        self.tests = {}
        self.imports = ''
        self.data = {}
        self.nspaces = nspaces
        self.btw_cells = btw_cells
        self.btw_import_cells = btw_import_cells
    def _test_(self, cell, name): 
        if name in self.tests: 
            self.tests[name] = self.tests[name] + self.btw_cells + add_indent(cell['source'], self.nspaces)
        else: 
            self.tests[name] = add_function (name) + add_indent(cell['source'], self.nspaces)
    def _import_(self, cell): 
        self.imports += (self.btw_import_cells + '\n' + cell['source']) if self.imports!='' else cell['source']
    def _data_(self, cell, name): 
        if name not in self.data: 
            self.data[name] = ''
            btw_cells = ''
        else:
            btw_cells = '\n' + self.btw_cells
        self.data[name] += btw_cells + cell['source']

# %% ../../nbs/utils/test_exporter.ipynb 16
class TestMerger:
    def __init__ (self, tests, overwrite=True, btw_import_cells='', show_diff=True):
        self.test_functions= {}
        self.imports = ''
        self.tests = tests
        self.btw_import_cells = btw_import_cells
        self.overwrite = overwrite
        self.show_diff = show_diff
        self.merge_status = None
        self.merge_status_data = None
    def _test_function_(self, cell, name): 
        source = cell['source'].replace ('#| test_function', '#| test')
        if name in self.tests.tests:
            self.merge_status = f'found {name}'
            if source != self.tests.tests[name]:
                self.merge_status = f'{name} is different'
                if self.show_diff:
                    print ('-new +current')
                    diff = ndiff(self.tests.tests[name].splitlines(keepends=True),
                                 source.splitlines(keepends=True))
                    print(''.join(diff), end="")
                    #sys.stdout.writelines (diff)
                if not self.overwrite:
                    self.merge_status = f'keep current {name}'
                    self.tests.tests[name] = source
                else:
                    self.merge_status = f'overwrite with new {name}'
        else:
            self.merge_status = f'added new {name}'
            self.tests.tests[name] = source
    def _data_code_(self, cell, name): 
        source = cell['source'].replace ('#| data_code', '#| data')
        if name in self.tests.data:
            self.merge_status_data = f'found {name}'
            if source != self.tests.data[name]:
                self.merge_status_data = f'{name} is different'
                if self.show_diff:
                    print ('-new +current')
                    diff = ndiff(self.tests.data[name].splitlines(keepends=True),
                                 source.splitlines(keepends=True))
                    print(''.join(diff), end="")
                if not self.overwrite:
                    self.merge_status_data = f'keep current {name}'
                    self.tests.data[name] = source
                else:
                    self.merge_status_data = f'overwrite with new {name}'
        else:
            self.merge_status_data = f'added new {name}'
            self.tests.data[name] = source
            
    def _import_(self, cell): 
        self.imports += (self.btw_import_cells + '\n' + cell['source']) if self.imports=='' else cell['source']

# %% ../../nbs/utils/test_exporter.ipynb 25
def merge_tests (tests, test_fn):
    """Merges the test code and the new imports into test_fn"""
    from nbdev.process import NBProcessor
    test_merger = TestMerger(tests)
    nb_merger = NBProcessor(test_fn, test_merger)
    nb_merger.process()
    new_imports = set(test_merger.imports.splitlines ()).difference (
    tests.imports.splitlines ())
    tests.imports += '\n' + '\n'.join (list(new_imports))
    print (test_merger.merge_status)

# %% ../../nbs/utils/test_exporter.ipynb 28
def replace_fn (nb_fn, nbs_path, new_path=None, new_name=None):
    if isinstance (nbs_path, Path): nbs_path = str(nbs_path.name)
    if new_path is None: new_path = f'{nbs_path}/00_tests'
    if new_name is None: new_name = f'tst.{nb_fn.name}'
    nb_fn_str = str(nb_fn.parent)
    assert '&&&' not in nb_fn_str
    sp = nb_fn_str.split(nbs_path)
    if len(sp) > 2:
        sp = nb_fn_str.split(nbs_path)
        assert '&&&' not in sp[:-2]
        first = '&&&'.join (sp[:-2])
        last = nbs_path.join (sp[-2:])
        last = last.replace (nbs_path, new_path)
        test_fn = (first + nbs_path + last)
    else:
        test_fn = nb_fn_str.replace (nbs_path, new_path)
    test_fn = Path (test_fn) / new_name
    return test_fn

# %% ../../nbs/utils/test_exporter.ipynb 30
def write_test_nb (tests, default_exp, nb_fn, lib_path, 
                   nbs_path, include_title=True):
    from execnb.nbio import new_nb, write_nb, mk_cell
    nb_fn = Path (nb_fn).resolve ()
    test_fn = replace_fn (nb_fn, nbs_path)
    test_fn.parent.mkdir (parents=True, exist_ok=True)
    if test_fn.exists (): merge_tests (tests, test_fn)
    
    title = f'# Tests for {nb_fn.name[:-len(".ipynb")]}' if include_title else None
    exp_file = default_exp.split('.')[-1]
    exp_path = '.'.join(default_exp.split('.')[:-1])
    nb = new_nb ([mk_cell (f'#| default_exp tests.{exp_path}.test_{exp_file}')] +
                 ([mk_cell (title, cell_type='markdown')] if title is not None else []) +
                 [mk_cell ('#| export\n' + f'from {lib_path}.{default_exp} import *')] + 
                 [mk_cell ('#| export\n' + '#| import\n' + tests.imports)] + 
                 [mk_cell ('#| export\n' + f'#| data_code {name}\n' + tests.data[name])
                      for name in tests.data] +
                 [mk_cell ('#| export\n' + f'#| test_function {name}\n' + tests.tests[name])
                      for name in tests.tests])
    print (f'notebook saved in {test_fn}')
    write_nb (nb, test_fn)
    return nb

# %% ../../nbs/utils/test_exporter.ipynb 34
def export_nb_tests (nb_fn, lib_path=None):
    from nbdev.process import NBProcessor
    from nbdev.config import get_config
    from nbdev.processors import _default_exp
    from execnb.nbio import read_nb
    if lib_path is None: lib_path = get_config()['lib_name']
    nbs_path = get_config()['nbs_path']
    nb = read_nb(nb_fn)
    tests = TestExporter()
    nb_processor = NBProcessor(nb_fn, tests)   
    nb_processor.process()
    default_exp = _default_exp (nb)
    if default_exp is not None:
        write_test_nb (tests, default_exp, nb_fn, lib_path, nbs_path)
    else:
        print (f'could not export tests in {nb_fn}: default_exp directive not found')

# %% ../../nbs/utils/test_exporter.ipynb 38
def get_ipynb_paths (nbs_path=None):
    from nbdev.config import get_config
    if nbs_path is None: nbs_path = get_config()['nbs_path']
    paths = set()
    root, dirs, files = next(os.walk(nbs_path))
    for folder in set(dirs).difference ({'_docs', '.quarto', '00_tests'}):
        folder = Path (nbs_path) / folder
        paths = paths.union (folder.glob('**/*.ipynb'))
        paths = paths.union (folder.glob('**/*/*.ipynb'))
    return [x for x in list(paths) if '.ipynb_checkpoints' not in str(x)]

# %% ../../nbs/utils/test_exporter.ipynb 41
def build_test_nb (nbs_path=None):
    paths = get_ipynb_paths (nbs_path=nbs_path)
    for nb_fn in paths:
        export_nb_tests (nb_fn)

# %% ../../nbs/utils/test_exporter.ipynb 49
class Outputs:
    def __init__ (self):
        self.outputs={}
    def _test_(self, cell, name): 
        if name not in self.outputs: 
            self.outputs[name] = []
        self.outputs[name].append(cell['outputs'])

# %% ../../nbs/utils/test_exporter.ipynb 52
def extract_outputs (nb_fn):
    """Extract output from test cell codes"""
    from nbdev.process import NBProcessor
    outputs = Outputs()
    nb_outputs = NBProcessor(nb_fn, outputs)
    nb_outputs.process()
    return outputs.outputs

# %% ../../nbs/utils/test_exporter.ipynb 55
def extract_and_merge_outputs (nb_fn, outputs_fn):
    """Extract output from test cell codes and merge this with previously stored outputs"""
    nb_fn = Path(nb_fn)
    outputs_fn = Path (outputs_fn)
    outputs = extract_outputs (nb_fn)
    if outputs_fn.exists ():
        with open (outputs_fn, 'rt') as f: prev_outputs = json.load (f)
        diff_outputs = set(prev_outputs).difference(outputs)
        prev_outputs = {k:prev_outputs[k] for k in diff_outputs}
        prev_outputs.update (outputs)
        outputs = prev_outputs
    return outputs

# %% ../../nbs/utils/test_exporter.ipynb 57
def extract_and_write_outputs (nb_fn, outputs_fn):
    outputs = extract_and_merge_outputs (nb_fn, outputs_fn)
    json_dump (outputs, outputs_fn)
    return outputs

# %% ../../nbs/utils/test_exporter.ipynb 64
class Freeze:
    def __init__ (self, outputs=None):
        self.cells = []
        self.outputs = outputs
        self.counter = {}
    def __call__ (self, cell):
        if cell.directives_ is not None and 'test' in cell.directives_:
            name = cell.directives_['test'][0]
            if name not in self.counter:
                self.counter[name] = 0
            idx = self.counter[name]
            self.counter[name] += 1
            cell['source'] = '%%norun\n' + cell['source']
            if self.outputs is not None:
                cell['outputs'] = self.outputs[name][idx]
            self.cells.append(cell)
        else:
            self.cells.append(cell)

# %% ../../nbs/utils/test_exporter.ipynb 68
def add_no_run_import (freeze):
    from execnb.nbio import mk_cell
    no_run_import1 = ('#| hide\n' + 
                     'from dsblocks.utils.utils import get_norun\n') 
    no_run_import2 = ('#| hide\n' + 
                      'no_run = get_norun ()')
    found = False
    if len(freeze.cells) > 0:
        if freeze.cells[0]['cell_type'] == 'code':
            for line in freeze.cells[0]['source']:
                if 'from dsblocks.utils.nbdev_utils import nbdev_setup' in line:
                    found = True
                    break
            if not found:
                freeze.cells[0]['source'] += '\nfrom dsblocks.utils.nbdev_utils import nbdev_setup'
        else:
            freeze.cells = ([mk_cell ('#| hide\n' + 
                                     'from dsblocks.utils.nbdev_utils import nbdev_setup')] + 
                            freeze.cells)
    found = False
    if len(freeze.cells) > 1:
        if freeze.cells[1]['cell_type'] == 'code':
            for line in freeze.cells[1]['source']:
                if 'norun = nbdev_setup ()' in line:
                    found = True
            if not found:
                freeze.cells[1]['source'] += '\n' + 'norun = nbdev_setup ()'
        else:
            freeze.cells = ([freeze.cells[0]] + 
                            [mk_cell ('#| hide\n' + 
                                     'norun = nbdev_setup ()')] + 
                            freeze.cells[1:])

# %% ../../nbs/utils/test_exporter.ipynb 70
def write_frozen_nb (nb_fn, frozen_fn, outputs=None):
    from nbdev.process import NBProcessor
    from execnb.nbio import write_nb, new_nb
    if outputs is None: outputs = extract_outputs (nb_fn)
    freeze = Freeze (outputs)
    nb_freezer = NBProcessor(nb_fn, freeze, rm_directives=False)
    nb_freezer.process()
    add_no_run_import (freeze)
    nb = new_nb (freeze.cells)
    write_nb (nb, frozen_fn)

# %% ../../nbs/utils/test_exporter.ipynb 74
class UnFreeze:
    def __init__ (self, outputs=None):
        self.cells = []
        self.outputs = outputs
        self.counter = {}
    def __call__ (self, cell):
        if cell.directives_ is not None and 'test' in cell.directives_:
            name = cell.directives_['test'][0]
            if name not in self.counter:
                self.counter[name] = 0
            idx = self.counter[name]
            self.counter[name] += 1
            cell['cell_type'] = 'code'
            cell['source'] = cell['source'].replace('%%norun\n', '')
            cell['outputs'] = self.outputs[name][idx]
            self.cells.append(cell)
        elif cell.directives_ is not None and 'show_result' not in cell.directives_:
            self.cells.append(cell)

# %% ../../nbs/utils/test_exporter.ipynb 78
def write_unfrozen_nb (frozen_fn, result_fn, outputs_fn=None, outputs=None):
    from nbdev.process import NBProcessor
    from execnb.nbio import write_nb, new_nb
    if outputs is None: 
        assert outputs_fn is not None, 'either outputs or outputs_fn need to be passed'
        outputs = json_load (outputs_fn)
        
    un_freeze = UnFreeze (outputs)
    nb_unfreezer = NBProcessor(frozen_fn, un_freeze, rm_directives=False)
    nb_unfreezer.process()
    nb = new_nb (un_freeze.cells)
    write_nb (nb, result_fn)
    return outputs

# %% ../../nbs/utils/test_exporter.ipynb 82
def store_frozen (nb_fn=None, frozen_fn=None):
    from nbdev.config import get_config
    if nb_fn is None: nb_fn = ipynbname.path()
    if frozen_fn is None: frozen_fn = nb_fn
    nb_fn = Path(nb_fn).resolve()
    nbs_path = get_config()['nbs_path']
    json_name=str(nb_fn.name).replace ('.ipynb', '.json')
    outputs_fn = replace_fn (nb_fn, nbs_path, new_path='.nb_outputs', new_name=json_name)
    outputs = extract_and_write_outputs (nb_fn, outputs_fn)
    write_frozen_nb (nb_fn, frozen_fn, outputs=outputs)

# %% ../../nbs/utils/test_exporter.ipynb 85
def freeze_all (nbs_path=None):
    paths = get_ipynb_paths (nbs_path=nbs_path)
    for nb_fn in paths:
        store_frozen (nb_fn)

# %% ../../nbs/utils/test_exporter.ipynb 90
def store_unfrozen (nb_fn=None, unfrozen_fn=None):
    from nbdev.config import get_config
    if nb_fn is None: nb_fn = ipynbname.path()
    if unfrozen_fn is None: unfrozen_fn = nb_fn
    nb_fn = Path(nb_fn).resolve()
    json_name=str(nb_fn.name).replace ('.ipynb', '.json')
    nbs_path = get_config()['nbs_path']
    outputs_fn = replace_fn (nb_fn, nbs_path, new_path='.nb_outputs', new_name=json_name)
    if outputs_fn.exists ():
        outputs = extract_and_merge_outputs (nb_fn, outputs_fn)
        Path(outputs_fn).unlink()
    else:
        outputs = extract_outputs (nb_fn)
    write_unfrozen_nb (nb_fn, unfrozen_fn, outputs=outputs)

# %% ../../nbs/utils/test_exporter.ipynb 92
freeze = store_frozen
unfreeze = store_unfrozen

# %% ../../nbs/utils/test_exporter.ipynb 94
def unfreeze_all (nbs_path=None):
    paths = get_ipynb_paths (nbs_path=nbs_path)
    for nb_fn in paths:
        store_unfrozen (nb_fn)
