# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fileserver_pb2 as fileserver__pb2


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.make_tmpdir = channel.unary_unary(
                '/FileService/make_tmpdir',
                request_serializer=fileserver__pb2.MakeTmpDirRequest.SerializeToString,
                response_deserializer=fileserver__pb2.MakeTmpDirResponse.FromString,
                )
        self.delete_tmpdir = channel.unary_unary(
                '/FileService/delete_tmpdir',
                request_serializer=fileserver__pb2.DeleteTmpDirRequest.SerializeToString,
                response_deserializer=fileserver__pb2.DeleteTmpDirResponse.FromString,
                )
        self.upload = channel.stream_unary(
                '/FileService/upload',
                request_serializer=fileserver__pb2.UploadRequest.SerializeToString,
                response_deserializer=fileserver__pb2.UploadResponse.FromString,
                )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def make_tmpdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_tmpdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'make_tmpdir': grpc.unary_unary_rpc_method_handler(
                    servicer.make_tmpdir,
                    request_deserializer=fileserver__pb2.MakeTmpDirRequest.FromString,
                    response_serializer=fileserver__pb2.MakeTmpDirResponse.SerializeToString,
            ),
            'delete_tmpdir': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_tmpdir,
                    request_deserializer=fileserver__pb2.DeleteTmpDirRequest.FromString,
                    response_serializer=fileserver__pb2.DeleteTmpDirResponse.SerializeToString,
            ),
            'upload': grpc.stream_unary_rpc_method_handler(
                    servicer.upload,
                    request_deserializer=fileserver__pb2.UploadRequest.FromString,
                    response_serializer=fileserver__pb2.UploadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def make_tmpdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileService/make_tmpdir',
            fileserver__pb2.MakeTmpDirRequest.SerializeToString,
            fileserver__pb2.MakeTmpDirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_tmpdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileService/delete_tmpdir',
            fileserver__pb2.DeleteTmpDirRequest.SerializeToString,
            fileserver__pb2.DeleteTmpDirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FileService/upload',
            fileserver__pb2.UploadRequest.SerializeToString,
            fileserver__pb2.UploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
