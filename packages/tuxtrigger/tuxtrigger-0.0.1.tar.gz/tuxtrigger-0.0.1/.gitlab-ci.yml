
variables:
  TUXPKG_PROJECT: tuxtrigger
  TUXSUITE_TOKEN: $TUXSUITE_TOKEN

.job:
  script:
  - apt-get update && apt-get install
  - apt install -y diction && apt install -y codespell && apt install -y black && apt install -y mypy && apt install -y flake8 && apt install -y make
  - make $CI_JOB_NAME

image-docker:
  stage: .pre
  image: docker:20.10.16
  services:
  - name: docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
  - 'docker build -t $CI_REGISTRY_IMAGE/ci -f Dockerfile.ci .'
  - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  - 'docker push $CI_REGISTRY_IMAGE/ci'
  only:
    refs:
    - main
    changes:
    - Dockerfile.ci


stylecheck:
  image: debian:bullseye
  extends: .job
  stage: test

typecheck: 
  image: debian:bullseye
  extends: .job
  stage: test

spellcheck:
  image: debian:bullseye
  extends: .job
  stage: test


unit-tests:
  image: debian:bullseye
  extends: .job
  stage: test
  before_script:
  - apt-get update && apt-get install -y python3-pip && apt install -y git
  - python3 -m pip install -r requirements-dev.txt
  script:
  - python3 -m pytest --cov=tuxtrigger --cov-report=html --cov-fail-under=80
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'


image-build:
  stage: build
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
  - 'docker build -t $CI_REGISTRY_IMAGE/tuxtrigger -f Dockerfile .'
  - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  - 'docker push $CI_REGISTRY_IMAGE/tuxtrigger'
  only:
    refs:
    - main

doc:
  extends: .job
  stage: build
  artifacts:
    paths:
      - public
  before_script:
    - apt-get update && apt-get install -y python3-pip
    - python3 -m pip install mkdocs-material



