# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.jobs import jobs_pb2 as protos_dot_jobs_dot_jobs__pb2


class JobManagerStub(object):
    """JobManager is an interface for interacting with job state in the DB.
    This service should not be exposed externally to users i.e. the SDK, but
    it may be exposed externally for our data plane agent.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertJob = channel.unary_unary(
                '/rime.JobManager/UpsertJob',
                request_serializer=protos_dot_jobs_dot_jobs__pb2.UpsertJobRequest.SerializeToString,
                response_deserializer=protos_dot_jobs_dot_jobs__pb2.UpsertJobResponse.FromString,
                )
        self.FailJob = channel.unary_unary(
                '/rime.JobManager/FailJob',
                request_serializer=protos_dot_jobs_dot_jobs__pb2.FailJobRequest.SerializeToString,
                response_deserializer=protos_dot_jobs_dot_jobs__pb2.FailJobResponse.FromString,
                )


class JobManagerServicer(object):
    """JobManager is an interface for interacting with job state in the DB.
    This service should not be exposed externally to users i.e. the SDK, but
    it may be exposed externally for our data plane agent.
    """

    def UpsertJob(self, request, context):
        """UpsertJob should NOT be exposed to external users.
        It should only be used by the data plane agent or the RIME engine.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FailJob(self, request, context):
        """FailJob fails a job and triggers a cascade to child resources
        to clean them up.
        For instance, marking a stress test job as failed marks it child test
        run document as failed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpsertJob': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertJob,
                    request_deserializer=protos_dot_jobs_dot_jobs__pb2.UpsertJobRequest.FromString,
                    response_serializer=protos_dot_jobs_dot_jobs__pb2.UpsertJobResponse.SerializeToString,
            ),
            'FailJob': grpc.unary_unary_rpc_method_handler(
                    servicer.FailJob,
                    request_deserializer=protos_dot_jobs_dot_jobs__pb2.FailJobRequest.FromString,
                    response_serializer=protos_dot_jobs_dot_jobs__pb2.FailJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.JobManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobManager(object):
    """JobManager is an interface for interacting with job state in the DB.
    This service should not be exposed externally to users i.e. the SDK, but
    it may be exposed externally for our data plane agent.
    """

    @staticmethod
    def UpsertJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.JobManager/UpsertJob',
            protos_dot_jobs_dot_jobs__pb2.UpsertJobRequest.SerializeToString,
            protos_dot_jobs_dot_jobs__pb2.UpsertJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FailJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.JobManager/FailJob',
            protos_dot_jobs_dot_jobs__pb2.FailJobRequest.SerializeToString,
            protos_dot_jobs_dot_jobs__pb2.FailJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JobReaderStub(object):
    """JobReader is an interface for reading job state from the DB.
    This can be exposed externally for users.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListJobs = channel.unary_unary(
                '/rime.JobReader/ListJobs',
                request_serializer=protos_dot_jobs_dot_jobs__pb2.ListJobsRequest.SerializeToString,
                response_deserializer=protos_dot_jobs_dot_jobs__pb2.ListJobsResponse.FromString,
                )
        self.GetJob = channel.unary_unary(
                '/rime.JobReader/GetJob',
                request_serializer=protos_dot_jobs_dot_jobs__pb2.GetJobRequest.SerializeToString,
                response_deserializer=protos_dot_jobs_dot_jobs__pb2.GetJobResponse.FromString,
                )


class JobReaderServicer(object):
    """JobReader is an interface for reading job state from the DB.
    This can be exposed externally for users.
    """

    def ListJobs(self, request, context):
        """ListJobs

        This is a paginated method for retrieving jobs from the database.
        It includes the ability to filter by the type and status of the job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJob(self, request, context):
        """GetJob

        Get a single job by ID from the DB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListJobs,
                    request_deserializer=protos_dot_jobs_dot_jobs__pb2.ListJobsRequest.FromString,
                    response_serializer=protos_dot_jobs_dot_jobs__pb2.ListJobsResponse.SerializeToString,
            ),
            'GetJob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJob,
                    request_deserializer=protos_dot_jobs_dot_jobs__pb2.GetJobRequest.FromString,
                    response_serializer=protos_dot_jobs_dot_jobs__pb2.GetJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.JobReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobReader(object):
    """JobReader is an interface for reading job state from the DB.
    This can be exposed externally for users.
    """

    @staticmethod
    def ListJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.JobReader/ListJobs',
            protos_dot_jobs_dot_jobs__pb2.ListJobsRequest.SerializeToString,
            protos_dot_jobs_dot_jobs__pb2.ListJobsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.JobReader/GetJob',
            protos_dot_jobs_dot_jobs__pb2.GetJobRequest.SerializeToString,
            protos_dot_jobs_dot_jobs__pb2.GetJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
