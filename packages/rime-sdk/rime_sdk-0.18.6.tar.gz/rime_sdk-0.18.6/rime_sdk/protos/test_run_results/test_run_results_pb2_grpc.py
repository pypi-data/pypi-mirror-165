# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.test_run_results import test_run_results_pb2 as protos_dot_test__run__results_dot_test__run__results__pb2


class ResultsReaderStub(object):
    """ResultsReader is a service for querying test run results.
    It will be read-only and should not update the test run results
    We may introduce resolve test cases option in the future
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/GetTestRun',
                request_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetTestRunRequest.SerializeToString,
                response_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetTestRunResponse.FromString,
                )
        self.ListTestRuns = channel.unary_unary(
                '/testrunresult.ResultsReader/ListTestRuns',
                request_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestRunsRequest.SerializeToString,
                response_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestRunsResponse.FromString,
                )
        self.GetBatchResult = channel.unary_unary(
                '/testrunresult.ResultsReader/GetBatchResult',
                request_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetBatchResultRequest.SerializeToString,
                response_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetBatchResultResponse.FromString,
                )
        self.ListBatchResults = channel.unary_unary(
                '/testrunresult.ResultsReader/ListBatchResults',
                request_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListBatchResultsRequest.SerializeToString,
                response_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListBatchResultsResponse.FromString,
                )
        self.ListFeatureResults = channel.unary_unary(
                '/testrunresult.ResultsReader/ListFeatureResults',
                request_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListFeatureResultsRequest.SerializeToString,
                response_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListFeatureResultsResponse.FromString,
                )
        self.ListTestCases = channel.unary_unary(
                '/testrunresult.ResultsReader/ListTestCases',
                request_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestCasesRequest.SerializeToString,
                response_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestCasesResponse.FromString,
                )


class ResultsReaderServicer(object):
    """ResultsReader is a service for querying test run results.
    It will be read-only and should not update the test run results
    We may introduce resolve test cases option in the future
    """

    def GetTestRun(self, request, context):
        """GetTestRun

        Get the test run result detail with test run id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestRuns(self, request, context):
        """ListTestRuns

        Paginated method for listing test runs belongs to a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchResult(self, request, context):
        """GetBatchResult

        Get batch result with a test run id and a test type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatchResults(self, request, context):
        """ListBatchResults

        Paginated method for listing batch results from a test run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFeatureResults(self, request, context):
        """ListFeatureResults

        Paginated method for listing feature results from a test run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestCases(self, request, context):
        """ListTestCases

        Paginated method for listing the test cases of a test run, optional
        filter on test types are available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultsReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestRun,
                    request_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetTestRunRequest.FromString,
                    response_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetTestRunResponse.SerializeToString,
            ),
            'ListTestRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestRuns,
                    request_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestRunsRequest.FromString,
                    response_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestRunsResponse.SerializeToString,
            ),
            'GetBatchResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchResult,
                    request_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetBatchResultRequest.FromString,
                    response_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.GetBatchResultResponse.SerializeToString,
            ),
            'ListBatchResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBatchResults,
                    request_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListBatchResultsRequest.FromString,
                    response_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListBatchResultsResponse.SerializeToString,
            ),
            'ListFeatureResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFeatureResults,
                    request_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListFeatureResultsRequest.FromString,
                    response_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListFeatureResultsResponse.SerializeToString,
            ),
            'ListTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestCases,
                    request_deserializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestCasesRequest.FromString,
                    response_serializer=protos_dot_test__run__results_dot_test__run__results__pb2.ListTestCasesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'testrunresult.ResultsReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResultsReader(object):
    """ResultsReader is a service for querying test run results.
    It will be read-only and should not update the test run results
    We may introduce resolve test cases option in the future
    """

    @staticmethod
    def GetTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetTestRun',
            protos_dot_test__run__results_dot_test__run__results__pb2.GetTestRunRequest.SerializeToString,
            protos_dot_test__run__results_dot_test__run__results__pb2.GetTestRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListTestRuns',
            protos_dot_test__run__results_dot_test__run__results__pb2.ListTestRunsRequest.SerializeToString,
            protos_dot_test__run__results_dot_test__run__results__pb2.ListTestRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatchResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetBatchResult',
            protos_dot_test__run__results_dot_test__run__results__pb2.GetBatchResultRequest.SerializeToString,
            protos_dot_test__run__results_dot_test__run__results__pb2.GetBatchResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatchResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListBatchResults',
            protos_dot_test__run__results_dot_test__run__results__pb2.ListBatchResultsRequest.SerializeToString,
            protos_dot_test__run__results_dot_test__run__results__pb2.ListBatchResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFeatureResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListFeatureResults',
            protos_dot_test__run__results_dot_test__run__results__pb2.ListFeatureResultsRequest.SerializeToString,
            protos_dot_test__run__results_dot_test__run__results__pb2.ListFeatureResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListTestCases',
            protos_dot_test__run__results_dot_test__run__results__pb2.ListTestCasesRequest.SerializeToString,
            protos_dot_test__run__results_dot_test__run__results__pb2.ListTestCasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
