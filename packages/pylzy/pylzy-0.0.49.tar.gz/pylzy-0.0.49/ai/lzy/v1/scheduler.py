# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ai/lzy/v1/scheduler/scheduler.proto, ai/lzy/v1/scheduler/scheduler-private.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .ai.lzy import v1


@dataclass
class TaskStatus(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    task_id: str = betterproto.string_field(2)
    zygote_name: str = betterproto.string_field(3)
    queue: "TaskStatusQueue" = betterproto.message_field(4, group="status")
    executing: "TaskStatusExecuting" = betterproto.message_field(5, group="status")
    success: "TaskStatusSuccess" = betterproto.message_field(6, group="status")
    error: "TaskStatusError" = betterproto.message_field(7, group="status")


@dataclass
class TaskStatusQueue(betterproto.Message):
    pass


@dataclass
class TaskStatusExecuting(betterproto.Message):
    pass


@dataclass
class TaskStatusSuccess(betterproto.Message):
    rc: int = betterproto.int32_field(1)


@dataclass
class TaskStatusError(betterproto.Message):
    rc: int = betterproto.int32_field(1)
    description: str = betterproto.string_field(2)


@dataclass
class SlotToChannelAssignment(betterproto.Message):
    slot_name: str = betterproto.string_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass
class TaskDesc(betterproto.Message):
    zygote: v1.Zygote = betterproto.message_field(2)
    slot_assignments: List["SlotToChannelAssignment"] = betterproto.message_field(3)


@dataclass
class TaskScheduleRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    workflow_name: str = betterproto.string_field(2)
    task: "TaskDesc" = betterproto.message_field(3)


@dataclass
class TaskScheduleResponse(betterproto.Message):
    status: "TaskStatus" = betterproto.message_field(1)


@dataclass
class TaskStatusRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    task_id: str = betterproto.string_field(2)


@dataclass
class TaskStatusResponse(betterproto.Message):
    status: "TaskStatus" = betterproto.message_field(1)


@dataclass
class TaskListRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)


@dataclass
class TaskListResponse(betterproto.Message):
    status: List["TaskStatus"] = betterproto.message_field(1)


@dataclass
class TaskStopRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    task_id: str = betterproto.string_field(2)
    issue: str = betterproto.string_field(3)


@dataclass
class TaskStopResponse(betterproto.Message):
    status: "TaskStatus" = betterproto.message_field(1)


@dataclass
class KillAllRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)
    issue: str = betterproto.string_field(2)


@dataclass
class KillAllResponse(betterproto.Message):
    pass


@dataclass
class RegisterServantRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)
    servant_id: str = betterproto.string_field(2)
    api_port: int = betterproto.int32_field(3)


@dataclass
class RegisterServantResponse(betterproto.Message):
    pass


@dataclass
class ServantProgress(betterproto.Message):
    configured: "ServantProgressConfigured" = betterproto.message_field(
        2, group="status"
    )
    execution_completed: "ServantProgressExecutionCompleted" = (
        betterproto.message_field(3, group="status")
    )
    communication_completed: "ServantProgressCommunicationCompleted" = (
        betterproto.message_field(4, group="status")
    )
    finished: "ServantProgressFinished" = betterproto.message_field(5, group="status")
    executing: "ServantProgressExecuting" = betterproto.message_field(6, group="status")
    idling: "ServantProgressIdle" = betterproto.message_field(7, group="status")


@dataclass
class ServantProgressStarted(betterproto.Message):
    pass


@dataclass
class ServantProgressConfigured(betterproto.Message):
    ok: "ServantProgressConfiguredOk" = betterproto.message_field(1, group="result")
    err: "ServantProgressConfiguredErr" = betterproto.message_field(2, group="result")


@dataclass
class ServantProgressConfiguredOk(betterproto.Message):
    pass


@dataclass
class ServantProgressConfiguredErr(betterproto.Message):
    description: str = betterproto.string_field(1)


@dataclass
class ServantProgressFinished(betterproto.Message):
    pass


@dataclass
class ServantProgressCommunicationCompleted(betterproto.Message):
    pass


@dataclass
class ServantProgressExecutionCompleted(betterproto.Message):
    rc: int = betterproto.int32_field(1)
    description: str = betterproto.string_field(2)


@dataclass
class ServantProgressExecuting(betterproto.Message):
    pass


@dataclass
class ServantProgressIdle(betterproto.Message):
    pass


@dataclass
class ServantProgressRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)
    servant_id: str = betterproto.string_field(2)
    progress: "ServantProgress" = betterproto.message_field(3)


@dataclass
class ServantProgressResponse(betterproto.Message):
    pass


class SchedulerStub(betterproto.ServiceStub):
    async def schedule(
        self,
        *,
        workflow_id: str = "",
        workflow_name: str = "",
        task: Optional["TaskDesc"] = None,
    ) -> TaskScheduleResponse:
        request = TaskScheduleRequest()
        request.workflow_id = workflow_id
        request.workflow_name = workflow_name
        if task is not None:
            request.task = task

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.Scheduler/Schedule",
            request,
            TaskScheduleResponse,
        )

    async def status(
        self, *, workflow_id: str = "", task_id: str = ""
    ) -> TaskStatusResponse:
        request = TaskStatusRequest()
        request.workflow_id = workflow_id
        request.task_id = task_id

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.Scheduler/Status",
            request,
            TaskStatusResponse,
        )

    async def list(self, *, workflow_id: str = "") -> TaskListResponse:
        request = TaskListRequest()
        request.workflow_id = workflow_id

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.Scheduler/List",
            request,
            TaskListResponse,
        )

    async def stop(
        self, *, workflow_id: str = "", task_id: str = "", issue: str = ""
    ) -> TaskStopResponse:
        request = TaskStopRequest()
        request.workflow_id = workflow_id
        request.task_id = task_id
        request.issue = issue

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.Scheduler/Stop",
            request,
            TaskStopResponse,
        )

    async def kill_all(
        self, *, workflow_name: str = "", issue: str = ""
    ) -> KillAllResponse:
        request = KillAllRequest()
        request.workflow_name = workflow_name
        request.issue = issue

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.Scheduler/KillAll",
            request,
            KillAllResponse,
        )


class SchedulerPrivateStub(betterproto.ServiceStub):
    async def register_servant(
        self, *, workflow_name: str = "", servant_id: str = "", api_port: int = 0
    ) -> RegisterServantResponse:
        request = RegisterServantRequest()
        request.workflow_name = workflow_name
        request.servant_id = servant_id
        request.api_port = api_port

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.SchedulerPrivate/RegisterServant",
            request,
            RegisterServantResponse,
        )

    async def servant_progress(
        self,
        *,
        workflow_name: str = "",
        servant_id: str = "",
        progress: Optional["ServantProgress"] = None,
    ) -> ServantProgressResponse:
        request = ServantProgressRequest()
        request.workflow_name = workflow_name
        request.servant_id = servant_id
        if progress is not None:
            request.progress = progress

        return await self._unary_unary(
            "/ai.lzy.v1.scheduler.SchedulerPrivate/ServantProgress",
            request,
            ServantProgressResponse,
        )
