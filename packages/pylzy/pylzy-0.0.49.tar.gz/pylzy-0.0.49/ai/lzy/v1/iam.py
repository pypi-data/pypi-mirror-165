# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ai/lzy/v1/iam/iam.proto, ai/lzy/v1/iam/access-service.proto, ai/lzy/v1/iam/access-binding-service.proto, ai/lzy/v1/iam/subject-service.proto, ai/lzy/v1/iam/auth-service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class AccessBindingAction(betterproto.Enum):
    UNSPECIFIED = 0
    ADD = 1
    REMOVE = 2


@dataclass
class Resource(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)


@dataclass
class Subject(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class Credentials(betterproto.Message):
    name: str = betterproto.string_field(1)
    credentials: str = betterproto.string_field(2)
    type: str = betterproto.string_field(3)


@dataclass
class AccessBinding(betterproto.Message):
    role: str = betterproto.string_field(1)
    subject: "Subject" = betterproto.message_field(2)


@dataclass
class AccessBindingDelta(betterproto.Message):
    binding: "AccessBinding" = betterproto.message_field(1)
    action: "AccessBindingAction" = betterproto.enum_field(2)


@dataclass
class AuthorizeRequest(betterproto.Message):
    subject: "Subject" = betterproto.message_field(1)
    permission: str = betterproto.string_field(2)
    resource: "Resource" = betterproto.message_field(3)


@dataclass
class ListAccessBindingsRequest(betterproto.Message):
    resource: "Resource" = betterproto.message_field(1)


@dataclass
class ListAccessBindingsResponse(betterproto.Message):
    bindings: List["AccessBinding"] = betterproto.message_field(1)


@dataclass
class SetAccessBindingsRequest(betterproto.Message):
    resource: "Resource" = betterproto.message_field(1)
    bindings: List["AccessBinding"] = betterproto.message_field(2)


@dataclass
class SetAccessBindingsResponse(betterproto.Message):
    pass


@dataclass
class UpdateAccessBindingsRequest(betterproto.Message):
    resource: "Resource" = betterproto.message_field(1)
    deltas: List["AccessBindingDelta"] = betterproto.message_field(2)


@dataclass
class UpdateAccessBindingsResponse(betterproto.Message):
    pass


@dataclass
class CreateSubjectRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    auth_provider: str = betterproto.string_field(2)
    provider_subject_id: str = betterproto.string_field(3)


@dataclass
class RemoveSubjectRequest(betterproto.Message):
    subject: "Subject" = betterproto.message_field(1)


@dataclass
class RemoveSubjectResponse(betterproto.Message):
    pass


@dataclass
class AddCredentialsRequest(betterproto.Message):
    subject: "Subject" = betterproto.message_field(1)
    credentials: "Credentials" = betterproto.message_field(2)


@dataclass
class AddCredentialsResponse(betterproto.Message):
    pass


@dataclass
class RemoveCredentialsRequest(betterproto.Message):
    subject: "Subject" = betterproto.message_field(1)
    credentials_name: str = betterproto.string_field(2)


@dataclass
class RemoveCredentialsResponse(betterproto.Message):
    pass


@dataclass
class AuthenticateRequest(betterproto.Message):
    pass


class LzyAccessServiceStub(betterproto.ServiceStub):
    async def authorize(
        self,
        *,
        subject: Optional["Subject"] = None,
        permission: str = "",
        resource: Optional["Resource"] = None,
    ) -> Subject:
        request = AuthorizeRequest()
        if subject is not None:
            request.subject = subject
        request.permission = permission
        if resource is not None:
            request.resource = resource

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzyAccessService/Authorize",
            request,
            Subject,
        )


class LzyAccessBindingServiceStub(betterproto.ServiceStub):
    async def list_access_bindings(
        self, *, resource: Optional["Resource"] = None
    ) -> ListAccessBindingsResponse:
        request = ListAccessBindingsRequest()
        if resource is not None:
            request.resource = resource

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzyAccessBindingService/ListAccessBindings",
            request,
            ListAccessBindingsResponse,
        )

    async def set_access_bindings(
        self,
        *,
        resource: Optional["Resource"] = None,
        bindings: List["AccessBinding"] = [],
    ) -> SetAccessBindingsResponse:
        request = SetAccessBindingsRequest()
        if resource is not None:
            request.resource = resource
        if bindings is not None:
            request.bindings = bindings

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzyAccessBindingService/SetAccessBindings",
            request,
            SetAccessBindingsResponse,
        )

    async def update_access_bindings(
        self,
        *,
        resource: Optional["Resource"] = None,
        deltas: List["AccessBindingDelta"] = [],
    ) -> UpdateAccessBindingsResponse:
        request = UpdateAccessBindingsRequest()
        if resource is not None:
            request.resource = resource
        if deltas is not None:
            request.deltas = deltas

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzyAccessBindingService/UpdateAccessBindings",
            request,
            UpdateAccessBindingsResponse,
        )


class LzySubjectServiceStub(betterproto.ServiceStub):
    async def create_subject(
        self, *, name: str = "", auth_provider: str = "", provider_subject_id: str = ""
    ) -> Subject:
        request = CreateSubjectRequest()
        request.name = name
        request.auth_provider = auth_provider
        request.provider_subject_id = provider_subject_id

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzySubjectService/CreateSubject",
            request,
            Subject,
        )

    async def remove_subject(
        self, *, subject: Optional["Subject"] = None
    ) -> RemoveSubjectResponse:
        request = RemoveSubjectRequest()
        if subject is not None:
            request.subject = subject

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzySubjectService/RemoveSubject",
            request,
            RemoveSubjectResponse,
        )

    async def add_credentials(
        self,
        *,
        subject: Optional["Subject"] = None,
        credentials: Optional["Credentials"] = None,
    ) -> AddCredentialsResponse:
        request = AddCredentialsRequest()
        if subject is not None:
            request.subject = subject
        if credentials is not None:
            request.credentials = credentials

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzySubjectService/AddCredentials",
            request,
            AddCredentialsResponse,
        )

    async def remove_credentials(
        self, *, subject: Optional["Subject"] = None, credentials_name: str = ""
    ) -> RemoveCredentialsResponse:
        request = RemoveCredentialsRequest()
        if subject is not None:
            request.subject = subject
        request.credentials_name = credentials_name

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzySubjectService/RemoveCredentials",
            request,
            RemoveCredentialsResponse,
        )


class LzyAuthenticateServiceStub(betterproto.ServiceStub):
    async def authenticate(self) -> Subject:
        request = AuthenticateRequest()

        return await self._unary_unary(
            "/ai.lzy.v1.iam.LzyAuthenticateService/Authenticate",
            request,
            Subject,
        )
