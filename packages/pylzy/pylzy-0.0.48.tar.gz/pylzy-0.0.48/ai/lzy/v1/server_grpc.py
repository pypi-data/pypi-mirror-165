# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: ai/lzy/v1/server.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import ai.lzy.v1.zygote_pb2
import ai.lzy.v1.task_pb2
import ai.lzy.v1.channel_pb2
import ai.lzy.v1.auth_pb2
import ai.lzy.v1.server_pb2


class LzyServerBase(abc.ABC):

    @abc.abstractmethod
    async def Publish(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.PublishRequest, ai.lzy.v1.server_pb2.PublishResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Zygotes(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Auth, ai.lzy.v1.zygote_pb2.ZygoteList]') -> None:
        pass

    @abc.abstractmethod
    async def Task(self, stream: 'grpclib.server.Stream[ai.lzy.v1.task_pb2.TaskCommand, ai.lzy.v1.task_pb2.TaskStatus]') -> None:
        pass

    @abc.abstractmethod
    async def Start(self, stream: 'grpclib.server.Stream[ai.lzy.v1.task_pb2.TaskSpec, ai.lzy.v1.task_pb2.TaskProgress]') -> None:
        pass

    @abc.abstractmethod
    async def Channel(self, stream: 'grpclib.server.Stream[ai.lzy.v1.channel_pb2.ChannelCommand, ai.lzy.v1.channel_pb2.ChannelStatus]') -> None:
        pass

    @abc.abstractmethod
    async def TasksStatus(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Auth, ai.lzy.v1.task_pb2.TasksList]') -> None:
        pass

    @abc.abstractmethod
    async def ChannelsStatus(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Auth, ai.lzy.v1.channel_pb2.ChannelStatusList]') -> None:
        pass

    @abc.abstractmethod
    async def RegisterServant(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.AttachServant, ai.lzy.v1.server_pb2.AttachStatus]') -> None:
        pass

    @abc.abstractmethod
    async def CheckUserPermissions(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.CheckUserPermissionsRequest, ai.lzy.v1.server_pb2.CheckUserPermissionsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetS3Credentials(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.GetS3CredentialsRequest, ai.lzy.v1.server_pb2.GetS3CredentialsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetBucket(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.GetBucketRequest, ai.lzy.v1.server_pb2.GetBucketResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetSessions(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.GetSessionsRequest, ai.lzy.v1.server_pb2.GetSessionsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetUser(self, stream: 'grpclib.server.Stream[ai.lzy.v1.server_pb2.GetUserRequest, ai.lzy.v1.server_pb2.GetUserResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/ai.lzy.v1.LzyServer/Publish': grpclib.const.Handler(
                self.Publish,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.PublishRequest,
                ai.lzy.v1.server_pb2.PublishResponse,
            ),
            '/ai.lzy.v1.LzyServer/Zygotes': grpclib.const.Handler(
                self.Zygotes,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.auth_pb2.Auth,
                ai.lzy.v1.zygote_pb2.ZygoteList,
            ),
            '/ai.lzy.v1.LzyServer/Task': grpclib.const.Handler(
                self.Task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.task_pb2.TaskCommand,
                ai.lzy.v1.task_pb2.TaskStatus,
            ),
            '/ai.lzy.v1.LzyServer/Start': grpclib.const.Handler(
                self.Start,
                grpclib.const.Cardinality.UNARY_STREAM,
                ai.lzy.v1.task_pb2.TaskSpec,
                ai.lzy.v1.task_pb2.TaskProgress,
            ),
            '/ai.lzy.v1.LzyServer/Channel': grpclib.const.Handler(
                self.Channel,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.channel_pb2.ChannelCommand,
                ai.lzy.v1.channel_pb2.ChannelStatus,
            ),
            '/ai.lzy.v1.LzyServer/TasksStatus': grpclib.const.Handler(
                self.TasksStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.auth_pb2.Auth,
                ai.lzy.v1.task_pb2.TasksList,
            ),
            '/ai.lzy.v1.LzyServer/ChannelsStatus': grpclib.const.Handler(
                self.ChannelsStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.auth_pb2.Auth,
                ai.lzy.v1.channel_pb2.ChannelStatusList,
            ),
            '/ai.lzy.v1.LzyServer/RegisterServant': grpclib.const.Handler(
                self.RegisterServant,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.AttachServant,
                ai.lzy.v1.server_pb2.AttachStatus,
            ),
            '/ai.lzy.v1.LzyServer/CheckUserPermissions': grpclib.const.Handler(
                self.CheckUserPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.CheckUserPermissionsRequest,
                ai.lzy.v1.server_pb2.CheckUserPermissionsResponse,
            ),
            '/ai.lzy.v1.LzyServer/GetS3Credentials': grpclib.const.Handler(
                self.GetS3Credentials,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.GetS3CredentialsRequest,
                ai.lzy.v1.server_pb2.GetS3CredentialsResponse,
            ),
            '/ai.lzy.v1.LzyServer/GetBucket': grpclib.const.Handler(
                self.GetBucket,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.GetBucketRequest,
                ai.lzy.v1.server_pb2.GetBucketResponse,
            ),
            '/ai.lzy.v1.LzyServer/GetSessions': grpclib.const.Handler(
                self.GetSessions,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.GetSessionsRequest,
                ai.lzy.v1.server_pb2.GetSessionsResponse,
            ),
            '/ai.lzy.v1.LzyServer/GetUser': grpclib.const.Handler(
                self.GetUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.server_pb2.GetUserRequest,
                ai.lzy.v1.server_pb2.GetUserResponse,
            ),
        }


class LzyServerStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Publish = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/Publish',
            ai.lzy.v1.server_pb2.PublishRequest,
            ai.lzy.v1.server_pb2.PublishResponse,
        )
        self.Zygotes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/Zygotes',
            ai.lzy.v1.auth_pb2.Auth,
            ai.lzy.v1.zygote_pb2.ZygoteList,
        )
        self.Task = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/Task',
            ai.lzy.v1.task_pb2.TaskCommand,
            ai.lzy.v1.task_pb2.TaskStatus,
        )
        self.Start = grpclib.client.UnaryStreamMethod(
            channel,
            '/ai.lzy.v1.LzyServer/Start',
            ai.lzy.v1.task_pb2.TaskSpec,
            ai.lzy.v1.task_pb2.TaskProgress,
        )
        self.Channel = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/Channel',
            ai.lzy.v1.channel_pb2.ChannelCommand,
            ai.lzy.v1.channel_pb2.ChannelStatus,
        )
        self.TasksStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/TasksStatus',
            ai.lzy.v1.auth_pb2.Auth,
            ai.lzy.v1.task_pb2.TasksList,
        )
        self.ChannelsStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/ChannelsStatus',
            ai.lzy.v1.auth_pb2.Auth,
            ai.lzy.v1.channel_pb2.ChannelStatusList,
        )
        self.RegisterServant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/RegisterServant',
            ai.lzy.v1.server_pb2.AttachServant,
            ai.lzy.v1.server_pb2.AttachStatus,
        )
        self.CheckUserPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/CheckUserPermissions',
            ai.lzy.v1.server_pb2.CheckUserPermissionsRequest,
            ai.lzy.v1.server_pb2.CheckUserPermissionsResponse,
        )
        self.GetS3Credentials = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/GetS3Credentials',
            ai.lzy.v1.server_pb2.GetS3CredentialsRequest,
            ai.lzy.v1.server_pb2.GetS3CredentialsResponse,
        )
        self.GetBucket = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/GetBucket',
            ai.lzy.v1.server_pb2.GetBucketRequest,
            ai.lzy.v1.server_pb2.GetBucketResponse,
        )
        self.GetSessions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/GetSessions',
            ai.lzy.v1.server_pb2.GetSessionsRequest,
            ai.lzy.v1.server_pb2.GetSessionsResponse,
        )
        self.GetUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServer/GetUser',
            ai.lzy.v1.server_pb2.GetUserRequest,
            ai.lzy.v1.server_pb2.GetUserResponse,
        )
