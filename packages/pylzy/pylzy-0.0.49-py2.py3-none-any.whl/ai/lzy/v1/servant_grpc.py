# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: ai/lzy/v1/servant.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import ai.lzy.v1.auth_pb2
import ai.lzy.v1.zygote_pb2
import ai.lzy.v1.task_pb2
import ai.lzy.v1.servant_pb2


class LzyServantBase(abc.ABC):

    @abc.abstractmethod
    async def Start(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Empty, ai.lzy.v1.servant_pb2.ServantProgress]') -> None:
        pass

    @abc.abstractmethod
    async def Env(self, stream: 'grpclib.server.Stream[ai.lzy.v1.zygote_pb2.EnvSpec, ai.lzy.v1.servant_pb2.EnvResult]') -> None:
        pass

    @abc.abstractmethod
    async def Execute(self, stream: 'grpclib.server.Stream[ai.lzy.v1.task_pb2.TaskSpec, ai.lzy.v1.servant_pb2.ExecutionStarted]') -> None:
        pass

    @abc.abstractmethod
    async def Signal(self, stream: 'grpclib.server.Stream[ai.lzy.v1.task_pb2.TaskSignal, ai.lzy.v1.auth_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Auth, ai.lzy.v1.auth_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def Status(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Empty, ai.lzy.v1.servant_pb2.ServantStatus]') -> None:
        pass

    @abc.abstractmethod
    async def Stop(self, stream: 'grpclib.server.Stream[ai.lzy.v1.auth_pb2.Empty, ai.lzy.v1.auth_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/ai.lzy.v1.LzyServant/Start': grpclib.const.Handler(
                self.Start,
                grpclib.const.Cardinality.UNARY_STREAM,
                ai.lzy.v1.auth_pb2.Empty,
                ai.lzy.v1.servant_pb2.ServantProgress,
            ),
            '/ai.lzy.v1.LzyServant/Env': grpclib.const.Handler(
                self.Env,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.zygote_pb2.EnvSpec,
                ai.lzy.v1.servant_pb2.EnvResult,
            ),
            '/ai.lzy.v1.LzyServant/Execute': grpclib.const.Handler(
                self.Execute,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.task_pb2.TaskSpec,
                ai.lzy.v1.servant_pb2.ExecutionStarted,
            ),
            '/ai.lzy.v1.LzyServant/Signal': grpclib.const.Handler(
                self.Signal,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.task_pb2.TaskSignal,
                ai.lzy.v1.auth_pb2.Empty,
            ),
            '/ai.lzy.v1.LzyServant/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.auth_pb2.Auth,
                ai.lzy.v1.auth_pb2.Empty,
            ),
            '/ai.lzy.v1.LzyServant/Status': grpclib.const.Handler(
                self.Status,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.auth_pb2.Empty,
                ai.lzy.v1.servant_pb2.ServantStatus,
            ),
            '/ai.lzy.v1.LzyServant/Stop': grpclib.const.Handler(
                self.Stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                ai.lzy.v1.auth_pb2.Empty,
                ai.lzy.v1.auth_pb2.Empty,
            ),
        }


class LzyServantStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Start = grpclib.client.UnaryStreamMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Start',
            ai.lzy.v1.auth_pb2.Empty,
            ai.lzy.v1.servant_pb2.ServantProgress,
        )
        self.Env = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Env',
            ai.lzy.v1.zygote_pb2.EnvSpec,
            ai.lzy.v1.servant_pb2.EnvResult,
        )
        self.Execute = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Execute',
            ai.lzy.v1.task_pb2.TaskSpec,
            ai.lzy.v1.servant_pb2.ExecutionStarted,
        )
        self.Signal = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Signal',
            ai.lzy.v1.task_pb2.TaskSignal,
            ai.lzy.v1.auth_pb2.Empty,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Update',
            ai.lzy.v1.auth_pb2.Auth,
            ai.lzy.v1.auth_pb2.Empty,
        )
        self.Status = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Status',
            ai.lzy.v1.auth_pb2.Empty,
            ai.lzy.v1.servant_pb2.ServantStatus,
        )
        self.Stop = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ai.lzy.v1.LzyServant/Stop',
            ai.lzy.v1.auth_pb2.Empty,
            ai.lzy.v1.auth_pb2.Empty,
        )
