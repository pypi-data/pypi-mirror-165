/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_DECL_COLLAPSEMATERIALIZEOPSPASS

//===----------------------------------------------------------------------===//
// CollapseMaterializeOpsPass
//===----------------------------------------------------------------------===//
struct CollapseMaterializeOpsPassOptions {
  bool reverse_ = false;
};
#undef GEN_PASS_DECL_COLLAPSEMATERIALIZEOPSPASS
#endif // GEN_PASS_DECL_COLLAPSEMATERIALIZEOPSPASS
#ifdef GEN_PASS_DECL_COMPOSESETOPSPASS

//===----------------------------------------------------------------------===//
// ComposeSetOpsPass
//===----------------------------------------------------------------------===//
#undef GEN_PASS_DECL_COMPOSESETOPSPASS
#endif // GEN_PASS_DECL_COMPOSESETOPSPASS
#ifdef GEN_PASS_DECL_DEPRECATEDFUSIONPASS

//===----------------------------------------------------------------------===//
// DeprecatedFusionPass
//===----------------------------------------------------------------------===//
#undef GEN_PASS_DECL_DEPRECATEDFUSIONPASS
#endif // GEN_PASS_DECL_DEPRECATEDFUSIONPASS
#ifdef GEN_PASS_DECL_DEPRECATEDTILINGPASS

//===----------------------------------------------------------------------===//
// DeprecatedTilingPass
//===----------------------------------------------------------------------===//
struct DeprecatedTilingPassOptions {
  std::string tileSizesOpt;
};
#undef GEN_PASS_DECL_DEPRECATEDTILINGPASS
#endif // GEN_PASS_DECL_DEPRECATEDTILINGPASS
#ifdef GEN_PASS_DECL_FUSIONPASS

//===----------------------------------------------------------------------===//
// FusionPass
//===----------------------------------------------------------------------===//
struct FusionPassOptions {
  std::string producer;
  std::string consumer;
};
#undef GEN_PASS_DECL_FUSIONPASS
#endif // GEN_PASS_DECL_FUSIONPASS
#ifdef GEN_PASS_DECL_GMLSTTOSCF

//===----------------------------------------------------------------------===//
// GmlStToScf
//===----------------------------------------------------------------------===//
#undef GEN_PASS_DECL_GMLSTTOSCF
#endif // GEN_PASS_DECL_GMLSTTOSCF
#ifdef GEN_PASS_DECL_TILETOFORPASS

//===----------------------------------------------------------------------===//
// TileToForPass
//===----------------------------------------------------------------------===//
struct TileToForPassOptions {
  std::string tilingTarget;
  ::llvm::ArrayRef<int64_t> tileSizes;
};
#undef GEN_PASS_DECL_TILETOFORPASS
#endif // GEN_PASS_DECL_TILETOFORPASS
#ifdef GEN_PASS_DECL_TILEDLOOPBUFFERIZEPASS

//===----------------------------------------------------------------------===//
// TiledLoopBufferizePass
//===----------------------------------------------------------------------===//
#undef GEN_PASS_DECL_TILEDLOOPBUFFERIZEPASS
#endif // GEN_PASS_DECL_TILEDLOOPBUFFERIZEPASS
#ifdef GEN_PASS_DECL_VECTORIZEGMLSTLOOPSPASS

//===----------------------------------------------------------------------===//
// VectorizeGmlStLoopsPass
//===----------------------------------------------------------------------===//
#undef GEN_PASS_DECL_VECTORIZEGMLSTLOOPSPASS
#endif // GEN_PASS_DECL_VECTORIZEGMLSTLOOPSPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// CollapseMaterializeOpsPass Registration
//===----------------------------------------------------------------------===//

inline void registerCollapseMaterializeOpsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createCollapseMaterializeOpsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerCollapseMaterializeOpsPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createCollapseMaterializeOpsPass();
  });
}

//===----------------------------------------------------------------------===//
// ComposeSetOpsPass Registration
//===----------------------------------------------------------------------===//

inline void registerComposeSetOpsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createComposeSetOpsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerComposeSetOpsPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createComposeSetOpsPass();
  });
}

//===----------------------------------------------------------------------===//
// DeprecatedFusionPass Registration
//===----------------------------------------------------------------------===//

inline void registerDeprecatedFusionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createDeprecatedFusionPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerDeprecatedFusionPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createDeprecatedFusionPass();
  });
}

//===----------------------------------------------------------------------===//
// DeprecatedTilingPass Registration
//===----------------------------------------------------------------------===//

inline void registerDeprecatedTilingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createDeprecatedTilingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerDeprecatedTilingPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createDeprecatedTilingPass();
  });
}

//===----------------------------------------------------------------------===//
// FusionPass Registration
//===----------------------------------------------------------------------===//

inline void registerFusionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createFusionPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerFusionPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createFusionPass();
  });
}

//===----------------------------------------------------------------------===//
// GmlStToScf Registration
//===----------------------------------------------------------------------===//

inline void registerGmlStToScf() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createGmlStToScfPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGmlStToScfPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createGmlStToScfPass();
  });
}

//===----------------------------------------------------------------------===//
// TileToForPass Registration
//===----------------------------------------------------------------------===//

inline void registerTileToForPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTileToForPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTileToForPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTileToForPass();
  });
}

//===----------------------------------------------------------------------===//
// TiledLoopBufferizePass Registration
//===----------------------------------------------------------------------===//

inline void registerTiledLoopBufferizePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::CreateTiledLoopBufferizePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTiledLoopBufferizePassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::CreateTiledLoopBufferizePass();
  });
}

//===----------------------------------------------------------------------===//
// VectorizeGmlStLoopsPass Registration
//===----------------------------------------------------------------------===//

inline void registerVectorizeGmlStLoopsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createVectorizeGmlStLoopsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerVectorizeGmlStLoopsPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createVectorizeGmlStLoopsPass();
  });
}

//===----------------------------------------------------------------------===//
// GmlSt Registration
//===----------------------------------------------------------------------===//

inline void registerGmlStPasses() {
  registerCollapseMaterializeOpsPass();
  registerComposeSetOpsPass();
  registerDeprecatedFusionPass();
  registerDeprecatedTilingPass();
  registerFusionPass();
  registerGmlStToScf();
  registerTileToForPass();
  registerTiledLoopBufferizePass();
  registerVectorizeGmlStLoopsPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class CollapseMaterializeOpsPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = CollapseMaterializeOpsPassBase;

  CollapseMaterializeOpsPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  CollapseMaterializeOpsPassBase(const CollapseMaterializeOpsPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-collapse-materialize-ops");
  }
  ::llvm::StringRef getArgument() const override { return "gml-collapse-materialize-ops"; }

  ::llvm::StringRef getDescription() const override { return "Collapse (or uncollapse) materialize operations."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("CollapseMaterializeOpsPass");
  }
  ::llvm::StringRef getName() const override { return "CollapseMaterializeOpsPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(CollapseMaterializeOpsPassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<bool> reverse_{*this, "reverse", ::llvm::cl::desc("Whether to revert collapsing of materialize operations."), ::llvm::cl::init(false)};
};

template <typename DerivedT>
class ComposeSetOpsPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = ComposeSetOpsPassBase;

  ComposeSetOpsPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  ComposeSetOpsPassBase(const ComposeSetOpsPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-compose-set-ops");
  }
  ::llvm::StringRef getArgument() const override { return "gml-compose-set-ops"; }

  ::llvm::StringRef getDescription() const override { return "Compose set operations."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ComposeSetOpsPass");
  }
  ::llvm::StringRef getName() const override { return "ComposeSetOpsPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ComposeSetOpsPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class DeprecatedFusionPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = DeprecatedFusionPassBase;

  DeprecatedFusionPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  DeprecatedFusionPassBase(const DeprecatedFusionPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-deprecated-fusion");
  }
  ::llvm::StringRef getArgument() const override { return "gml-deprecated-fusion"; }

  ::llvm::StringRef getDescription() const override { return "Fuse producers in into `gml_st.materialize` operations"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DeprecatedFusionPass");
  }
  ::llvm::StringRef getName() const override { return "DeprecatedFusionPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DeprecatedFusionPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class DeprecatedTilingPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = DeprecatedTilingPassBase;

  DeprecatedTilingPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  DeprecatedTilingPassBase(const DeprecatedTilingPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-deprecated-tiling");
  }
  ::llvm::StringRef getArgument() const override { return "gml-deprecated-tiling"; }

  ::llvm::StringRef getDescription() const override { return "Tile operations to produce gml_st.parallel or gml_st.for"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DeprecatedTilingPass");
  }
  ::llvm::StringRef getName() const override { return "DeprecatedTilingPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DeprecatedTilingPassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<std::string> tileSizesOpt{*this, "tile-sizes", ::llvm::cl::desc("Tile sizes in the format `[[d0,d1,...],[d0_,d1_,...],...]`. This allows to express nested tiling sizes.")};
};

template <typename DerivedT>
class FusionPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = FusionPassBase;

  FusionPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  FusionPassBase(const FusionPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-fusion");
  }
  ::llvm::StringRef getArgument() const override { return "gml-fusion"; }

  ::llvm::StringRef getDescription() const override { return "Fuse producers in into `gml_st.materialize` operations"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("FusionPass");
  }
  ::llvm::StringRef getName() const override { return "FusionPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(FusionPassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<std::string> producer{*this, "producer", ::llvm::cl::desc("Producer label.")};
  ::mlir::Pass::Option<std::string> consumer{*this, "consumer", ::llvm::cl::desc("Consumer label.")};
};

template <typename DerivedT>
class GmlStToScfBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = GmlStToScfBase;

  GmlStToScfBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  GmlStToScfBase(const GmlStToScfBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-st-to-scf");
  }
  ::llvm::StringRef getArgument() const override { return "gml-st-to-scf"; }

  ::llvm::StringRef getDescription() const override { return "Lower `gml_st.loop` to SCF loops and parallel loops"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GmlStToScf");
  }
  ::llvm::StringRef getName() const override { return "GmlStToScf"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<::mlir::scf::SCFDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GmlStToScfBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TileToForPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = TileToForPassBase;

  TileToForPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TileToForPassBase(const TileToForPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-tile-to-for");
  }
  ::llvm::StringRef getArgument() const override { return "gml-tile-to-for"; }

  ::llvm::StringRef getDescription() const override { return "Tile operations using TilingInterface to produce gml_st.for"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TileToForPass");
  }
  ::llvm::StringRef getName() const override { return "TileToForPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TileToForPassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<std::string> tilingTarget{*this, "tiling-target", ::llvm::cl::desc("Operation with this label is the anchor to latch on.")};
  ::mlir::Pass::ListOption<int64_t> tileSizes{*this, "tile-sizes", ::llvm::cl::desc("Tile sizes"), llvm::cl::ZeroOrMore};
};

template <typename DerivedT>
class TiledLoopBufferizePassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = TiledLoopBufferizePassBase;

  TiledLoopBufferizePassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TiledLoopBufferizePassBase(const TiledLoopBufferizePassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gml-tiled-loop-bufferize");
  }
  ::llvm::StringRef getArgument() const override { return "gml-tiled-loop-bufferize"; }

  ::llvm::StringRef getDescription() const override { return "Pass to bufferize linalg.tiled_loop with the ops inside it."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TiledLoopBufferizePass");
  }
  ::llvm::StringRef getName() const override { return "TiledLoopBufferizePass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TiledLoopBufferizePassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class VectorizeGmlStLoopsPassBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = VectorizeGmlStLoopsPassBase;

  VectorizeGmlStLoopsPassBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  VectorizeGmlStLoopsPassBase(const VectorizeGmlStLoopsPassBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("vectorize-gml-st-loops");
  }
  ::llvm::StringRef getArgument() const override { return "vectorize-gml-st-loops"; }

  ::llvm::StringRef getDescription() const override { return "Pass to vectorize linalg.generic ops tiled to gml_st.parallel and gml_st.for loops."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("VectorizeGmlStLoopsPass");
  }
  ::llvm::StringRef getName() const override { return "VectorizeGmlStLoopsPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<::mlir::vector::VectorDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(VectorizeGmlStLoopsPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
