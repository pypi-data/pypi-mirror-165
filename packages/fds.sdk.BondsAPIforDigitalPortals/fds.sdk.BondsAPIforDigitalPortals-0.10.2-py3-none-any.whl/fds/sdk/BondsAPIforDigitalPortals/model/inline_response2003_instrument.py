"""
    Bonds API For Digital Portals

    Search for fixed income instruments, using a criteria-based screener. The API provides also fundamental data and key figures, basic interest rate information and derived coupon lists.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * important dates in and features of the life cycle of the fixed income instruments * filter by issuer, its country of registration and the issued volume * coupon data: occurrence and frequency of coupon payments, current interest rate range * yield and yield to maturity range, spread * Macaulay duration * sensitivity ranges: base point value, modified duration, elasticity, convexity * cash flow for all transactions over a certain time range: sum or average * country-specific attributes: for Germany: is eligible for trustees        The key figures are calculated using delayed prices with an additional delay of 10 minutes after an update of the debt instrument's price. Special product features such as the right to a maturity extension, an attached option, or convertibility are not considered for the key figure calculation. Further, a calculation is not performed for perpetual products and for products with variable interest rate.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.BondsAPIforDigitalPortals.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.BondsAPIforDigitalPortals.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_categorization import InlineResponse2003InstrumentCategorization
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_compliance import InlineResponse2003InstrumentCompliance
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_coupon import InlineResponse2003InstrumentCoupon
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_fsym import InlineResponse2003InstrumentFsym
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_issue import InlineResponse2003InstrumentIssue
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_issuer import InlineResponse2003InstrumentIssuer
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_life_cycle import InlineResponse2003InstrumentLifeCycle
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_nsin import InlineResponse2003InstrumentNsin
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_rating_system1 import InlineResponse2003InstrumentRatingSystem1
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_rating_system2 import InlineResponse2003InstrumentRatingSystem2
    from fds.sdk.BondsAPIforDigitalPortals.model.inline_response2003_instrument_trading_volume import InlineResponse2003InstrumentTradingVolume
    globals()['InlineResponse2003InstrumentCategorization'] = InlineResponse2003InstrumentCategorization
    globals()['InlineResponse2003InstrumentCompliance'] = InlineResponse2003InstrumentCompliance
    globals()['InlineResponse2003InstrumentCoupon'] = InlineResponse2003InstrumentCoupon
    globals()['InlineResponse2003InstrumentFsym'] = InlineResponse2003InstrumentFsym
    globals()['InlineResponse2003InstrumentIssue'] = InlineResponse2003InstrumentIssue
    globals()['InlineResponse2003InstrumentIssuer'] = InlineResponse2003InstrumentIssuer
    globals()['InlineResponse2003InstrumentLifeCycle'] = InlineResponse2003InstrumentLifeCycle
    globals()['InlineResponse2003InstrumentNsin'] = InlineResponse2003InstrumentNsin
    globals()['InlineResponse2003InstrumentRatingSystem1'] = InlineResponse2003InstrumentRatingSystem1
    globals()['InlineResponse2003InstrumentRatingSystem2'] = InlineResponse2003InstrumentRatingSystem2
    globals()['InlineResponse2003InstrumentTradingVolume'] = InlineResponse2003InstrumentTradingVolume


class InlineResponse2003Instrument(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'short_name': (str,),  # noqa: E501
            'isin': (str,),  # noqa: E501
            'nsin': (InlineResponse2003InstrumentNsin,),  # noqa: E501
            'fsym': (InlineResponse2003InstrumentFsym,),  # noqa: E501
            'categorization': (InlineResponse2003InstrumentCategorization,),  # noqa: E501
            'life_cycle': (InlineResponse2003InstrumentLifeCycle,),  # noqa: E501
            'subordinated': (bool,),  # noqa: E501
            'rating_system1': (InlineResponse2003InstrumentRatingSystem1,),  # noqa: E501
            'rating_system2': (InlineResponse2003InstrumentRatingSystem2,),  # noqa: E501
            'issuer': (InlineResponse2003InstrumentIssuer,),  # noqa: E501
            'issue': (InlineResponse2003InstrumentIssue,),  # noqa: E501
            'trading_volume': (InlineResponse2003InstrumentTradingVolume,),  # noqa: E501
            'compliance': (InlineResponse2003InstrumentCompliance,),  # noqa: E501
            'coupon': (InlineResponse2003InstrumentCoupon,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'short_name': 'shortName',  # noqa: E501
        'isin': 'isin',  # noqa: E501
        'nsin': 'nsin',  # noqa: E501
        'fsym': 'fsym',  # noqa: E501
        'categorization': 'categorization',  # noqa: E501
        'life_cycle': 'lifeCycle',  # noqa: E501
        'subordinated': 'subordinated',  # noqa: E501
        'rating_system1': 'ratingSystem1',  # noqa: E501
        'rating_system2': 'ratingSystem2',  # noqa: E501
        'issuer': 'issuer',  # noqa: E501
        'issue': 'issue',  # noqa: E501
        'trading_volume': 'tradingVolume',  # noqa: E501
        'compliance': 'compliance',  # noqa: E501
        'coupon': 'coupon',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InlineResponse2003Instrument - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): Identifier of the instrument.. [optional]  # noqa: E501
            name (str): Name of the instrument.. [optional]  # noqa: E501
            short_name (str): Short name of the instrument.. [optional]  # noqa: E501
            isin (str): The International Securities Identification Number (ISIN) of the instrument. The ISIN is a 12-character code of digits and upper-case letters that uniquely identifies an instrument.. [optional]  # noqa: E501
            nsin (InlineResponse2003InstrumentNsin): [optional]  # noqa: E501
            fsym (InlineResponse2003InstrumentFsym): [optional]  # noqa: E501
            categorization (InlineResponse2003InstrumentCategorization): [optional]  # noqa: E501
            life_cycle (InlineResponse2003InstrumentLifeCycle): [optional]  # noqa: E501
            subordinated (bool): If `true`, the debt instrument is subordinated.. [optional]  # noqa: E501
            rating_system1 (InlineResponse2003InstrumentRatingSystem1): [optional]  # noqa: E501
            rating_system2 (InlineResponse2003InstrumentRatingSystem2): [optional]  # noqa: E501
            issuer (InlineResponse2003InstrumentIssuer): [optional]  # noqa: E501
            issue (InlineResponse2003InstrumentIssue): [optional]  # noqa: E501
            trading_volume (InlineResponse2003InstrumentTradingVolume): [optional]  # noqa: E501
            compliance (InlineResponse2003InstrumentCompliance): [optional]  # noqa: E501
            coupon (InlineResponse2003InstrumentCoupon): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InlineResponse2003Instrument - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): Identifier of the instrument.. [optional]  # noqa: E501
            name (str): Name of the instrument.. [optional]  # noqa: E501
            short_name (str): Short name of the instrument.. [optional]  # noqa: E501
            isin (str): The International Securities Identification Number (ISIN) of the instrument. The ISIN is a 12-character code of digits and upper-case letters that uniquely identifies an instrument.. [optional]  # noqa: E501
            nsin (InlineResponse2003InstrumentNsin): [optional]  # noqa: E501
            fsym (InlineResponse2003InstrumentFsym): [optional]  # noqa: E501
            categorization (InlineResponse2003InstrumentCategorization): [optional]  # noqa: E501
            life_cycle (InlineResponse2003InstrumentLifeCycle): [optional]  # noqa: E501
            subordinated (bool): If `true`, the debt instrument is subordinated.. [optional]  # noqa: E501
            rating_system1 (InlineResponse2003InstrumentRatingSystem1): [optional]  # noqa: E501
            rating_system2 (InlineResponse2003InstrumentRatingSystem2): [optional]  # noqa: E501
            issuer (InlineResponse2003InstrumentIssuer): [optional]  # noqa: E501
            issue (InlineResponse2003InstrumentIssue): [optional]  # noqa: E501
            trading_volume (InlineResponse2003InstrumentTradingVolume): [optional]  # noqa: E501
            compliance (InlineResponse2003InstrumentCompliance): [optional]  # noqa: E501
            coupon (InlineResponse2003InstrumentCoupon): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
