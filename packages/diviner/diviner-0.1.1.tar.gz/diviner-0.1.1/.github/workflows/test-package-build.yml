name: Test package build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      repository:
        description: >
          [Optional] Repository name with owner. For example, databricks/diviner.
           Defaults to the repository that triggered a workflow.
        required: false
        default: ""
      ref:
        description: >
          [Optional] The branch, tag or SHA to checkout. When checking out the repository that
           triggered a workflow, this defaults to the reference or SHA for that event. Otherwise,
           uses the default branch.
        required: false
        default: "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

env:
  PY_VERSION: "3.8.12"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Install dependencies
        run: |
          pip install wheel twine

      - name: Build distribution files
        id: build-dist
        run: |
          # Build distribution files
          python setup.py sdist bdist_wheel

          # List distribution files and check sizes
          ls -lh dist

          # Set step outputs
          sdist_path=$(find dist -type f -name "*.tar.gz")
          wheel_path=$(find dist -type f -name "*.whl")
          wheel_name=$(basename $wheel_path)
          wheel_size=$(stat -c %s $wheel_path)
          echo "::set-output name=sdist-path::${sdist_path}"
          echo "::set-output name=wheel-path::${wheel_path}"
          echo "::set-output name=wheel-name::${wheel_name}"
          echo "::set-output name=wheel-size::${wheel_size}"

      - name: Run twine check
        run: |
          twine check --strict ${{ steps.build-dist.outputs.wheel-path }}

      - name: Test installation from tarball
        run: |
          pip install ${{ steps.build-dist.outputs.sdist-path }}
          python -c "import diviner; print(diviner.__version__)"

      - name: Test installation from wheel
        run: |
          pip install --force-reinstall ${{ steps.build-dist.outputs.wheel-path }}
          python -c "import diviner; print(diviner.__version__)"

      - name: Store wheel
        uses: actions/upload-artifact@v3
        if: github.event_name == 'push'
        with:
          name: ${{ steps.build-dist.outputs.wheel-name }}
          path: ${{ steps.build-dist.outputs.wheel-path }}

      - name: Remove old wheels
        uses: actions/github-script@v3
        if: github.event_name == 'push'
        env:
          WHEEL_SIZE: ${{ steps.build-dist.outputs.wheel-size }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            const artifactsResp = await github.actions.listArtifactsForRepo({
              owner,
              repo,
            });
            const wheels = artifactsResp.data.artifacts.filter(({ name }) => name.endsWith(".whl"));

            MAX_SIZE_IN_BYTES = 300_000_000;

            let index = 0;
            let sum = parseInt(process.env.WHEEL_SIZE);
            for (const [idx, { size_in_bytes }] of wheels.entries()) {
              index = idx;
              sum += size_in_bytes;
              if (sum > MAX_SIZE_IN_BYTES) {
                break;
              }
            }

            if (sum <= MAX_SIZE_IN_BYTES) {
              return;
            }

            // Delete old wheels
            const promises = wheels.slice(index).map(({ id: artifact_id }) =>
              github.actions.deleteArtifact({
                owner,
                repo,
                artifact_id,
              })
            );
            Promise.all(promises).then(data => console.log(data));
