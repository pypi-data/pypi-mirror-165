name: Examples

on:
  push:
    branches:
      - main
      - branch-[0-9]+.[0-9]+
  pull_request:
    branches:
      - main
      - branch-[0-9]+.[0-9]+
  schedule:
    - cron: "42 9 */2 * *"
  workflow_dispatch:
    inputs:
      repository:
        description: >
          [Optional] Repository name with owner. For example, databricks/diviner.
           Defaults to the repository that triggered a workflow.
        required: false
        default: ""
      ref:
        description: >
          [Optional] The branch, tag or SHA to checkout. When checking out the repository that
           triggered a workflow, this defaults to the reference or SHA for that event. Otherwise,
           uses the default branch.
        required: false
        default: "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

env:
  PY_VERSION: "3.8.12"

jobs:
  examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Increase available disk space
        run: |
          # Increase available disk space by removing unnecessary tool chains:
          # https://github.com/actions/virtual-environments/issues/709#issuecomment-612569242
          rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Check diff
        id: check-diff
        run: |
          if [ ! "$(git branch --show-current)" == "main" ]; then
            git fetch origin main:main
          fi

          REGEXP="tests/examples\|examples"
          CHANGED_FILES=$(git diff --name-only main..HEAD | grep "$REGEXP") || true;
          EXAMPLES_CHANGED=$([[ ! -z "$CHANGED_FILES" ]] && echo "true" || echo "false")

          echo -e "CHANGED_FILES:\n$CHANGED_FILES"
          echo "EXAMPLES_CHANGED: $EXAMPLES_CHANGED"
          echo "::set-output name=examples_changed::$EXAMPLES_CHANGED"

      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Install Build dependencies
        run: |
          pip install wheel twine

      - name: Install Diviner dependencies
        if: ${{ github.event_name == 'schedule' || steps.check-diff.outputs.examples_changed == 'true' }}
        env:
          INSTALL_PMDARIMA_DEPS: true
          INSTALL_PROPHET_DEPS: true
        run: |
          source ./dev/install-deps.sh

      - name: Build Diviner
        id: build-dist
        run: |
          python setup.py sdist bdist_wheel
          wheel_path=$(find dist -type f -name "*.whl")
          echo "::set-output name=wheel-path::${wheel_path}"

      - name: Install Diviner
        run: |
          pip install ${{ steps.build-dist.outputs.wheel-path }}
          python -c "import diviner; print(diviner.__version__)"

      - name: Run example tests
        if: ${{ github.event_name == 'schedule' || steps.check-diff.outputs.examples_changed == 'true' }}
        run: |
          pytest tests/examples --durations=30

      - name: Show disk usage
        run: |
          df -h
