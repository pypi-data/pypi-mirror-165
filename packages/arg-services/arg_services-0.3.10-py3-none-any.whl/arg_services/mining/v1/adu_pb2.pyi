"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class SegmentationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEXT_FIELD_NUMBER: builtins.int
    EXTRAS_FIELD_NUMBER: builtins.int
    text: typing.Text
    @property
    def extras(self) -> google.protobuf.struct_pb2.Struct:
        """Implementation-specific information can be encoded here"""
        pass
    def __init__(self,
        *,
        text: typing.Text = ...,
        extras: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extras",b"extras"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["extras",b"extras","text",b"text"]) -> None: ...
global___SegmentationRequest = SegmentationRequest

class SegmentationResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SEGMENTS_FIELD_NUMBER: builtins.int
    EXTRAS_FIELD_NUMBER: builtins.int
    @property
    def segments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Segment]: ...
    @property
    def extras(self) -> google.protobuf.struct_pb2.Struct:
        """Implementation-specific information can be encoded here"""
        pass
    def __init__(self,
        *,
        segments: typing.Optional[typing.Iterable[global___Segment]] = ...,
        extras: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extras",b"extras"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["extras",b"extras","segments",b"segments"]) -> None: ...
global___SegmentationResponse = SegmentationResponse

class Segment(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEXT_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    text: typing.Text
    start: builtins.int
    end: builtins.int
    def __init__(self,
        *,
        text: typing.Text = ...,
        start: builtins.int = ...,
        end: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["end",b"end","start",b"start","text",b"text"]) -> None: ...
global___Segment = Segment

class ClassificationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class SegmentsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    SEGMENTS_FIELD_NUMBER: builtins.int
    EXTRAS_FIELD_NUMBER: builtins.int
    @property
    def segments(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
    @property
    def extras(self) -> google.protobuf.struct_pb2.Struct:
        """Implementation-specific information can be encoded here"""
        pass
    def __init__(self,
        *,
        segments: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        extras: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extras",b"extras"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["extras",b"extras","segments",b"segments"]) -> None: ...
global___ClassificationRequest = ClassificationRequest

class ClassificationResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ADUS_FIELD_NUMBER: builtins.int
    EXTRAS_FIELD_NUMBER: builtins.int
    @property
    def adus(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Adu]: ...
    @property
    def extras(self) -> google.protobuf.struct_pb2.Struct:
        """Implementation-specific information can be encoded here"""
        pass
    def __init__(self,
        *,
        adus: typing.Optional[typing.Iterable[global___Adu]] = ...,
        extras: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extras",b"extras"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adus",b"adus","extras",b"extras"]) -> None: ...
global___ClassificationResponse = ClassificationResponse

class Adu(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SEGMENT_ID_FIELD_NUMBER: builtins.int
    TOKENS_FIELD_NUMBER: builtins.int
    segment_id: typing.Text
    @property
    def tokens(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Token]: ...
    def __init__(self,
        *,
        segment_id: typing.Text = ...,
        tokens: typing.Optional[typing.Iterable[global___Token]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["segment_id",b"segment_id","tokens",b"tokens"]) -> None: ...
global___Adu = Adu

class Token(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEXT_FIELD_NUMBER: builtins.int
    ARGUMENTATIVE_FIELD_NUMBER: builtins.int
    KEYWORD_FIELD_NUMBER: builtins.int
    text: typing.Text
    argumentative: builtins.bool
    keyword: builtins.bool
    def __init__(self,
        *,
        text: typing.Text = ...,
        argumentative: builtins.bool = ...,
        keyword: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["argumentative",b"argumentative","keyword",b"keyword","text",b"text"]) -> None: ...
global___Token = Token
