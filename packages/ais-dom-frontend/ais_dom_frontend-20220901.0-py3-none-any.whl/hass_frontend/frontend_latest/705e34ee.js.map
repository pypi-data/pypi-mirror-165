{"version":3,"file":"705e34ee.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAjDA;;;;;;;;AAAA;ACiDA;AA2BA;AACA;AACA;;;;;AA0CA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAMA;AACA;;AAIA;;AAEA;;;AAIA;;;AAnCA;;;;AAtFA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/panels/config/backup/ha-config-backup.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { mdiDelete, mdiDownload, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-icon-overflow-menu\";\nimport \"../../../components/ha-svg-icon\";\nimport { getSignedPath } from \"../../../data/auth\";\nimport {\n  BackupContent,\n  BackupData,\n  fetchBackupInfo,\n  generateBackup,\n  getBackupDownloadUrl,\n  removeBackup,\n} from \"../../../data/backup\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { fileDownload } from \"../../../util/file_download\";\n\n@customElement(\"ha-config-backup\")\nclass HaConfigBackup extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _backupData?: BackupData;\n\n  private _columns = memoize(\n    (narrow, _language): DataTableColumnContainer => ({\n      name: {\n        title: this.hass.localize(\"ui.panel.config.backup.name\"),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        template: (entry: string, backup: BackupContent) =>\n          html`${entry}\n            <div class=\"secondary\">${backup.path}</div>`,\n      },\n      size: {\n        title: this.hass.localize(\"ui.panel.config.backup.size\"),\n        width: \"15%\",\n        hidden: narrow,\n        filterable: true,\n        sortable: true,\n        template: (entry: number) => Math.ceil(entry * 10) / 10 + \" MB\",\n      },\n      date: {\n        title: this.hass.localize(\"ui.panel.config.backup.created\"),\n        width: \"15%\",\n        direction: \"desc\",\n        hidden: narrow,\n        filterable: true,\n        sortable: true,\n        template: (entry: string) =>\n          relativeTime(new Date(entry), this.hass.locale),\n      },\n\n      actions: {\n        title: \"\",\n        width: \"15%\",\n        type: \"overflow-menu\",\n        template: (_: string, backup: BackupContent) =>\n          html`<ha-icon-overflow-menu\n            .hass=${this.hass}\n            .narrow=${this.narrow}\n            .items=${[\n              // Download Button\n              {\n                path: mdiDownload,\n                label: this.hass.localize(\n                  \"ui.panel.config.backup.download_backup\"\n                ),\n                action: () => this._downloadBackup(backup),\n              },\n              // Delete button\n              {\n                path: mdiDelete,\n                label: this.hass.localize(\n                  \"ui.panel.config.backup.remove_backup\"\n                ),\n                action: () => this._removeBackup(backup),\n              },\n            ]}\n            style=\"color: var(--secondary-text-color)\"\n          >\n          </ha-icon-overflow-menu>`,\n      },\n    })\n  );\n\n  private _getItems = memoize((backupItems: BackupContent[]) =>\n    backupItems.map((backup) => ({\n      name: backup.name,\n      slug: backup.slug,\n      date: backup.date,\n      size: backup.size,\n      path: backup.path,\n    }))\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._backupData === undefined) {\n      return html`<hass-loading-screen></hass-loading-screen>`;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .tabs=${[\n          {\n            translationKey: \"ui.panel.config.backup.caption\",\n            path: `/config/backup`,\n          },\n        ]}\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config/system\"\n        .route=${this.route}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._getItems(this._backupData.backups)}\n        .noDataText=${this.hass.localize(\"ui.panel.config.backup.no_backups\")}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.config.backup.picker.search\"\n        )}\n      >\n        <ha-fab\n          slot=\"fab\"\n          ?disabled=${this._backupData.backing_up}\n          .label=${this._backupData.backing_up\n            ? this.hass.localize(\"ui.panel.config.backup.creating_backup\")\n            : this.hass.localize(\"ui.panel.config.backup.create_backup\")}\n          extended\n          @click=${this._generateBackup}\n        >\n          ${this._backupData.backing_up\n            ? html`<ha-circular-progress\n                slot=\"icon\"\n                active\n              ></ha-circular-progress>`\n            : html`<ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>`}\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getBackups();\n  }\n\n  private async _getBackups(): Promise<void> {\n    this._backupData = await fetchBackupInfo(this.hass);\n  }\n\n  private async _downloadBackup(backup: BackupContent): Promise<void> {\n    const signedUrl = await getSignedPath(\n      this.hass,\n      getBackupDownloadUrl(backup.slug)\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  private async _generateBackup(): Promise<void> {\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.backup.create.title\"),\n      text: this.hass.localize(\"ui.panel.config.backup.create.description\"),\n      confirmText: this.hass.localize(\"ui.panel.config.backup.create.confirm\"),\n    });\n    if (!confirm) {\n      return;\n    }\n\n    generateBackup(this.hass)\n      .then(() => this._getBackups())\n      .catch((err) => showAlertDialog(this, { text: (err as Error).message }));\n\n    await this._getBackups();\n  }\n\n  private async _removeBackup(backup: BackupContent): Promise<void> {\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.backup.remove.title\"),\n      text: this.hass.localize(\"ui.panel.config.backup.remove.description\", {\n        name: backup.name,\n      }),\n      confirmText: this.hass.localize(\"ui.panel.config.backup.remove.confirm\"),\n    });\n    if (!confirm) {\n      return;\n    }\n\n    await removeBackup(this.hass, backup.slug);\n    await this._getBackups();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-fab[disabled] {\n          --mdc-theme-secondary: var(--disabled-text-color) !important;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-backup\": HaConfigBackup;\n  }\n}\n"],"names":[],"sourceRoot":""}