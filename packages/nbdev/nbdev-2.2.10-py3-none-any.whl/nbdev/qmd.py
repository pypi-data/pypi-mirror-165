# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_API/14_qmd.ipynb.

# %% ../nbs/09_API/14_qmd.ipynb 2
from __future__ import annotations
import sys,os,inspect

from fastcore.utils import *
from fastcore.meta import delegates

# %% auto 0
__all__ = ['setup', 'meta', 'div', 'img', 'btn']

# %% ../nbs/09_API/14_qmd.ipynb 4
def setup():
    mod = inspect.getmodule(inspect.currentframe().f_back)
    path = Path(mod.__file__)
    os.chdir(path.parent)
    sys.stdout = open(path.with_suffix('.qmd'), 'w')
    print(mod.__doc__)

# %% ../nbs/09_API/14_qmd.ipynb 5
def meta(md,  # Markdown to add meta to
         classes=None,  # List of CSS classes to add
         style=None,  # Dict of CSS styles to add
         **kwargs):   # Additional attributes to add to meta
    "A metadata section for qmd div in `{}`"
    if style: kwargs['style'] = "; ".join(f'{k}: {v}' for k,v in style.items())
    props = ' '.join(f'{k}="{v}"' for k,v in kwargs.items())
    classes = ' '.join('.'+c for c in L(classes))
    meta = []
    if classes: meta.append(classes)
    if props: meta.append(props)
    meta = ' '.join(meta)
    return md + ("{" + meta + "}" if meta else "")

# %% ../nbs/09_API/14_qmd.ipynb 6
def div(txt,  # Markdown to add meta to
        classes=None,  # List of CSS classes to add
        style=None,  # Dict of CSS styles to add
        **kwargs):
    "A qmd div with optional metadata section"
    return meta("::: ", classes=classes, style=style, **kwargs) + f"\n\n{txt}\n\n:::\n\n"

# %% ../nbs/09_API/14_qmd.ipynb 7
def img(fname,  # Image to link to
        classes=None,  # List of CSS classes to add
        style=None,   # Dict of CSS styles to add
        height=None,  # Height attribute
        relative=None,  # Tuple of (position,px)
        link=False,   # Hyperlink to this image
        **kwargs):
    "A qmd image"
    kwargs,style = kwargs or {}, style or {}
    if height: kwargs["height"]= f"{height}px"
    if relative:
        pos,px = relative
        style["position"] = "relative"
        style[pos] = f"{px}px"
    res = meta(f'![]({fname})', classes=classes, style=style, **kwargs)
    return  f'[{res}]({fname})' if link else res

# %% ../nbs/09_API/14_qmd.ipynb 8
def btn(txt, # Button text
        link,  # Button link URL
        classes=None,  # List of CSS classes to add
        style=None,    # Dict of CSS styles to add
        **kwargs):
    "A qmd button"
    return meta(f'[{txt}]({link})', classes=classes, style=style, role="button")
