# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_API/09a_frontmatter.ipynb.

# %% auto 0
__all__ = ['FrontmatterProc']

# %% ../nbs/09_API/09a_frontmatter.ipynb 2
from .imports import *
from .process import *

from execnb.nbio import *
from fastcore.imports import *
import yaml

# %% ../nbs/09_API/09a_frontmatter.ipynb 5
_re_fm = re.compile(r'''^---\s*
(.*\S+.*)
---\s*$''', flags=re.DOTALL)

def _fm2dict(s:str):
    "Load YAML frontmatter into a `dict`"
    match = _re_fm.search(s.strip())
    return yaml.safe_load(match.group(1)) if match else {}

def _md2dict(s:str):
    "Convert H1 formatted markdown cell to frontmatter dict"
    if '#' not in s: return {}
    m = re.search(r'^#\s+(\S.*?)\s*$', s, flags=re.MULTILINE)
    if not m: return {}
    res = {'title': m.group(1)}
    m = re.search(r'^>\s+(\S.*?)\s*$', s, flags=re.MULTILINE)
    if m: res['description'] = m.group(1)
    r = re.findall(r'^-\s+(\S.*:.*\S)\s*$', s, flags=re.MULTILINE)
    if r:
        try: res.update(yaml.safe_load('\n'.join(r)))
        except Exception as e: warn(f'Failed to create YAML dict for:\n{r}\n\n{e}\n')
    return res

# %% ../nbs/09_API/09a_frontmatter.ipynb 6
class FrontmatterProc(Processor):
    "A YAML and formatted-markdown frontmatter processor"
    def begin(self): self.fm = {}
    def _default_exp_(self, cell, exp): self.default_exp = exp

    def _update(self, f, cell):
        s = cell.get('source')
        if not s: return
        d = f(s)
        if not d: return
        self.fm.update(d)
        cell.source = None

    def cell(self, cell):
        if cell.cell_type=='raw': self._update(_fm2dict, cell)
        elif cell.cell_type=='markdown' and 'title' not in self.fm: self._update(_md2dict, cell)

    def end(self):
        self.nb.frontmatter_ = self.fm
        if not self.fm: return
        exp = getattr(self, 'default_exp', None)
        if exp: self.fm.update({'output-file': exp+'.html'})
        s = f'---\n{yaml.dump(self.fm)}\n---'
        self.nb.cells.insert(0, mk_cell(s, 'raw'))
