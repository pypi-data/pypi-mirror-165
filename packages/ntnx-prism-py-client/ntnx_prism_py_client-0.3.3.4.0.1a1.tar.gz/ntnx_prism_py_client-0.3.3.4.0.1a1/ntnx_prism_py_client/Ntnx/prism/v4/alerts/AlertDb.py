# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_prism_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.alerts.AlertEntityReference import AlertEntityReference  # noqa: F401,E501
from ntnx_prism_py_client.Ntnx.prism.v4.common.Severity import Severity  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class AlertDb(ExternalizableAbstractModel):
    """AlertDb - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'protobuf': 'str',
        'acknowledged': 'bool',
        'service_name': 'str',
        'severity': 'prism.v4.common.Severity',
        'auto_resolved': 'bool',
        'resolved': 'bool',
        'alert_type': 'str',
        'classifications': 'list[str]',
        'cluster_u_u_i_d': 'str',
        'creation_timestamp': 'int',
        'impact_types': 'list[str]',
        'last_updated_timestamp': 'int',
        'source_entity': 'prism.v4.alerts.AlertEntityReference',
        'cluster': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'protobuf': 'protobuf',
        'acknowledged': 'acknowledged',
        'service_name': 'serviceName',
        'severity': 'severity',
        'auto_resolved': 'autoResolved',
        'resolved': 'resolved',
        'alert_type': 'alertType',
        'classifications': 'classifications',
        'cluster_u_u_i_d': 'clusterUUID',
        'creation_timestamp': 'creationTimestamp',
        'impact_types': 'impactTypes',
        'last_updated_timestamp': 'lastUpdatedTimestamp',
        'source_entity': 'sourceEntity',
        'cluster': 'cluster',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, protobuf=None, acknowledged=None, service_name=None, severity=None, auto_resolved=None, resolved=None, alert_type=None, classifications=None, cluster_u_u_i_d=None, creation_timestamp=None, impact_types=None, last_updated_timestamp=None, source_entity=None, cluster=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """AlertDb - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__protobuf = None
        self.__acknowledged = None
        self.__service_name = None
        self.__severity = None
        self.__auto_resolved = None
        self.__resolved = None
        self.__alert_type = None
        self.__classifications = None
        self.__cluster_u_u_i_d = None
        self.__creation_timestamp = None
        self.__impact_types = None
        self.__last_updated_timestamp = None
        self.__source_entity = None
        self.__cluster = None
        self.discriminator = None
        if protobuf is not None:
            self.__protobuf = protobuf
        if acknowledged is not None:
            self.__acknowledged = acknowledged
        if service_name is not None:
            self.__service_name = service_name
        if severity is not None:
            self.__severity = severity
        if auto_resolved is not None:
            self.__auto_resolved = auto_resolved
        if resolved is not None:
            self.__resolved = resolved
        if alert_type is not None:
            self.__alert_type = alert_type
        if classifications is not None:
            self.__classifications = classifications
        if cluster_u_u_i_d is not None:
            self.__cluster_u_u_i_d = cluster_u_u_i_d
        if creation_timestamp is not None:
            self.__creation_timestamp = creation_timestamp
        if impact_types is not None:
            self.__impact_types = impact_types
        if last_updated_timestamp is not None:
            self.__last_updated_timestamp = last_updated_timestamp
        if source_entity is not None:
            self.__source_entity = source_entity
        if cluster is not None:
            self.__cluster = cluster

    def _initialize_object_type(self):
        return 'prism.v4.alerts.AlertDb'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a1.alerts.AlertDb'


    @property
    def protobuf(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__protobuf

    @protobuf.setter
    def protobuf(self, protobuf):

        self.__protobuf = protobuf

    @property
    def acknowledged(self):
        """`{ bool }`
            
        """ # noqa: E501
        return self.__acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):

        self.__acknowledged = acknowledged

    @property
    def service_name(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__service_name

    @service_name.setter
    def service_name(self, service_name):

        self.__service_name = service_name

    @property
    def severity(self):
        """`{ prism.v4.common.Severity }`
            
        """ # noqa: E501
        return self.__severity

    @severity.setter
    def severity(self, severity):

        self.__severity = severity

    @property
    def auto_resolved(self):
        """`{ bool }`
            
        """ # noqa: E501
        return self.__auto_resolved

    @auto_resolved.setter
    def auto_resolved(self, auto_resolved):

        self.__auto_resolved = auto_resolved

    @property
    def resolved(self):
        """`{ bool }`
            
        """ # noqa: E501
        return self.__resolved

    @resolved.setter
    def resolved(self, resolved):

        self.__resolved = resolved

    @property
    def alert_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__alert_type

    @alert_type.setter
    def alert_type(self, alert_type):

        self.__alert_type = alert_type

    @property
    def classifications(self):
        """`{ list[str] }`
            
        """ # noqa: E501
        return self.__classifications

    @classifications.setter
    def classifications(self, classifications):

        self.__classifications = classifications

    @property
    def cluster_u_u_i_d(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__cluster_u_u_i_d

    @cluster_u_u_i_d.setter
    def cluster_u_u_i_d(self, cluster_u_u_i_d):

        self.__cluster_u_u_i_d = cluster_u_u_i_d

    @property
    def creation_timestamp(self):
        """`{ int }`
            
        """ # noqa: E501
        return self.__creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):

        self.__creation_timestamp = creation_timestamp

    @property
    def impact_types(self):
        """`{ list[str] }`
            
        """ # noqa: E501
        return self.__impact_types

    @impact_types.setter
    def impact_types(self, impact_types):

        self.__impact_types = impact_types

    @property
    def last_updated_timestamp(self):
        """`{ int }`
            
        """ # noqa: E501
        return self.__last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):

        self.__last_updated_timestamp = last_updated_timestamp

    @property
    def source_entity(self):
        """`{ prism.v4.alerts.AlertEntityReference }`
            
        """ # noqa: E501
        return self.__source_entity

    @source_entity.setter
    def source_entity(self, source_entity):

        self.__source_entity = source_entity

    @property
    def cluster(self):
        """`{ list[str] }`
            
        """ # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertDb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertDb):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

