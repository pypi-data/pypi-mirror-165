# coding: utf-8

"""
    CC api

    Command Center operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cc.configuration import Configuration


class InlineResponse20038NodeInformationCpuInfosCpuInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_cores': 'str',
        'physical_id': 'str',
        'cpu_m_hz': 'str',
        'model_name': 'str',
        'cache_size': 'str'
    }

    attribute_map = {
        'cpu_cores': 'cpu_cores',
        'physical_id': 'physical_id',
        'cpu_m_hz': 'cpu-MHz',
        'model_name': 'model_name',
        'cache_size': 'cache_size'
    }

    def __init__(self, cpu_cores=None, physical_id=None, cpu_m_hz=None, model_name=None, cache_size=None, _configuration=None):  # noqa: E501
        """InlineResponse20038NodeInformationCpuInfosCpuInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_cores = None
        self._physical_id = None
        self._cpu_m_hz = None
        self._model_name = None
        self._cache_size = None
        self.discriminator = None

        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if physical_id is not None:
            self.physical_id = physical_id
        if cpu_m_hz is not None:
            self.cpu_m_hz = cpu_m_hz
        if model_name is not None:
            self.model_name = model_name
        if cache_size is not None:
            self.cache_size = cache_size

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501


        :return: The cpu_cores of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this InlineResponse20038NodeInformationCpuInfosCpuInfo.


        :param cpu_cores: The cpu_cores of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :type: str
        """

        self._cpu_cores = cpu_cores

    @property
    def physical_id(self):
        """Gets the physical_id of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501


        :return: The physical_id of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._physical_id

    @physical_id.setter
    def physical_id(self, physical_id):
        """Sets the physical_id of this InlineResponse20038NodeInformationCpuInfosCpuInfo.


        :param physical_id: The physical_id of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :type: str
        """

        self._physical_id = physical_id

    @property
    def cpu_m_hz(self):
        """Gets the cpu_m_hz of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501


        :return: The cpu_m_hz of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_m_hz

    @cpu_m_hz.setter
    def cpu_m_hz(self, cpu_m_hz):
        """Sets the cpu_m_hz of this InlineResponse20038NodeInformationCpuInfosCpuInfo.


        :param cpu_m_hz: The cpu_m_hz of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :type: str
        """

        self._cpu_m_hz = cpu_m_hz

    @property
    def model_name(self):
        """Gets the model_name of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501


        :return: The model_name of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this InlineResponse20038NodeInformationCpuInfosCpuInfo.


        :param model_name: The model_name of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def cache_size(self):
        """Gets the cache_size of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501


        :return: The cache_size of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """Sets the cache_size of this InlineResponse20038NodeInformationCpuInfosCpuInfo.


        :param cache_size: The cache_size of this InlineResponse20038NodeInformationCpuInfosCpuInfo.  # noqa: E501
        :type: str
        """

        self._cache_size = cache_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20038NodeInformationCpuInfosCpuInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20038NodeInformationCpuInfosCpuInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20038NodeInformationCpuInfosCpuInfo):
            return True

        return self.to_dict() != other.to_dict()
