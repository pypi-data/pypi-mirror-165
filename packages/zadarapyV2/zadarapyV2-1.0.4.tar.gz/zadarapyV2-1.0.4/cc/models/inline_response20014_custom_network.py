# coding: utf-8

"""
    CC api

    Command Center operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cc.configuration import Configuration


class InlineResponse20014CustomNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'user': 'str',
        'cidr': 'str',
        'gateway': 'str',
        'vlan_id': 'str',
        'id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'user': 'user',
        'cidr': 'cidr',
        'gateway': 'gateway',
        'vlan_id': 'vlan_id',
        'id': 'id'
    }

    def __init__(self, name=None, user=None, cidr=None, gateway=None, vlan_id=None, id=None, _configuration=None):  # noqa: E501
        """InlineResponse20014CustomNetwork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._user = None
        self._cidr = None
        self._gateway = None
        self._vlan_id = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if user is not None:
            self.user = user
        if cidr is not None:
            self.cidr = cidr
        if gateway is not None:
            self.gateway = gateway
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20014CustomNetwork.  # noqa: E501


        :return: The name of this InlineResponse20014CustomNetwork.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20014CustomNetwork.


        :param name: The name of this InlineResponse20014CustomNetwork.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user(self):
        """Gets the user of this InlineResponse20014CustomNetwork.  # noqa: E501


        :return: The user of this InlineResponse20014CustomNetwork.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse20014CustomNetwork.


        :param user: The user of this InlineResponse20014CustomNetwork.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def cidr(self):
        """Gets the cidr of this InlineResponse20014CustomNetwork.  # noqa: E501


        :return: The cidr of this InlineResponse20014CustomNetwork.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this InlineResponse20014CustomNetwork.


        :param cidr: The cidr of this InlineResponse20014CustomNetwork.  # noqa: E501
        :type: str
        """

        self._cidr = cidr

    @property
    def gateway(self):
        """Gets the gateway of this InlineResponse20014CustomNetwork.  # noqa: E501


        :return: The gateway of this InlineResponse20014CustomNetwork.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this InlineResponse20014CustomNetwork.


        :param gateway: The gateway of this InlineResponse20014CustomNetwork.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def vlan_id(self):
        """Gets the vlan_id of this InlineResponse20014CustomNetwork.  # noqa: E501


        :return: The vlan_id of this InlineResponse20014CustomNetwork.  # noqa: E501
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this InlineResponse20014CustomNetwork.


        :param vlan_id: The vlan_id of this InlineResponse20014CustomNetwork.  # noqa: E501
        :type: str
        """

        self._vlan_id = vlan_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20014CustomNetwork.  # noqa: E501


        :return: The id of this InlineResponse20014CustomNetwork.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20014CustomNetwork.


        :param id: The id of this InlineResponse20014CustomNetwork.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20014CustomNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20014CustomNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20014CustomNetwork):
            return True

        return self.to_dict() != other.to_dict()
