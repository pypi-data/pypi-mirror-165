# coding: utf-8

"""
    PP api

    PP operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pp.configuration import Configuration


class Body27(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'cloud': 'str',
        'storage_policy_mirroring': 'int',
        'drive_type_key_drives': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'cloud': 'cloud',
        'storage_policy_mirroring': 'storage_policy_mirroring',
        'drive_type_key_drives': '{drive_type_key}_drives'
    }

    def __init__(self, name=None, description=None, cloud=None, storage_policy_mirroring=None, drive_type_key_drives=None, _configuration=None):  # noqa: E501
        """Body27 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._cloud = None
        self._storage_policy_mirroring = None
        self._drive_type_key_drives = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.cloud = cloud
        if storage_policy_mirroring is not None:
            self.storage_policy_mirroring = storage_policy_mirroring
        self.drive_type_key_drives = drive_type_key_drives

    @property
    def name(self):
        """Gets the name of this Body27.  # noqa: E501


        :return: The name of this Body27.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body27.


        :param name: The name of this Body27.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Body27.  # noqa: E501


        :return: The description of this Body27.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body27.


        :param description: The description of this Body27.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cloud(self):
        """Gets the cloud of this Body27.  # noqa: E501


        :return: The cloud of this Body27.  # noqa: E501
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this Body27.


        :param cloud: The cloud of this Body27.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cloud is None:
            raise ValueError("Invalid value for `cloud`, must not be `None`")  # noqa: E501

        self._cloud = cloud

    @property
    def storage_policy_mirroring(self):
        """Gets the storage_policy_mirroring of this Body27.  # noqa: E501


        :return: The storage_policy_mirroring of this Body27.  # noqa: E501
        :rtype: int
        """
        return self._storage_policy_mirroring

    @storage_policy_mirroring.setter
    def storage_policy_mirroring(self, storage_policy_mirroring):
        """Sets the storage_policy_mirroring of this Body27.


        :param storage_policy_mirroring: The storage_policy_mirroring of this Body27.  # noqa: E501
        :type: int
        """

        self._storage_policy_mirroring = storage_policy_mirroring

    @property
    def drive_type_key_drives(self):
        """Gets the drive_type_key_drives of this Body27.  # noqa: E501


        :return: The drive_type_key_drives of this Body27.  # noqa: E501
        :rtype: int
        """
        return self._drive_type_key_drives

    @drive_type_key_drives.setter
    def drive_type_key_drives(self, drive_type_key_drives):
        """Sets the drive_type_key_drives of this Body27.


        :param drive_type_key_drives: The drive_type_key_drives of this Body27.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and drive_type_key_drives is None:
            raise ValueError("Invalid value for `drive_type_key_drives`, must not be `None`")  # noqa: E501

        self._drive_type_key_drives = drive_type_key_drives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body27, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body27):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body27):
            return True

        return self.to_dict() != other.to_dict()
