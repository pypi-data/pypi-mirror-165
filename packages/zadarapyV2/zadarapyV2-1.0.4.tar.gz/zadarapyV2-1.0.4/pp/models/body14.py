# coding: utf-8

"""
    PP api

    PP operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pp.configuration import Configuration


class Body14(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'moderate': 'bool',
        'description': 'str',
        'provider': 'str',
        'kind': 'str',
        'vpsa_zone_group_storage_policy_type_id': 'int',
        'drives': 'object',
        'allocation_zone': 'str',
        'storage_profile': 'str'
    }

    attribute_map = {
        'name': 'name',
        'moderate': 'moderate',
        'description': 'description',
        'provider': 'provider',
        'kind': 'kind',
        'vpsa_zone_group_storage_policy_type_id': 'vpsa_zone_group_storage_policy_type_id',
        'drives': 'drives',
        'allocation_zone': 'allocation_zone',
        'storage_profile': 'storage_profile'
    }

    def __init__(self, name=None, moderate=None, description=None, provider=None, kind=None, vpsa_zone_group_storage_policy_type_id=None, drives=None, allocation_zone=None, storage_profile=None, _configuration=None):  # noqa: E501
        """Body14 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._moderate = None
        self._description = None
        self._provider = None
        self._kind = None
        self._vpsa_zone_group_storage_policy_type_id = None
        self._drives = None
        self._allocation_zone = None
        self._storage_profile = None
        self.discriminator = None

        self.name = name
        self.moderate = moderate
        if description is not None:
            self.description = description
        self.provider = provider
        self.kind = kind
        if vpsa_zone_group_storage_policy_type_id is not None:
            self.vpsa_zone_group_storage_policy_type_id = vpsa_zone_group_storage_policy_type_id
        self.drives = drives
        if allocation_zone is not None:
            self.allocation_zone = allocation_zone
        if storage_profile is not None:
            self.storage_profile = storage_profile

    @property
    def name(self):
        """Gets the name of this Body14.  # noqa: E501


        :return: The name of this Body14.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body14.


        :param name: The name of this Body14.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def moderate(self):
        """Gets the moderate of this Body14.  # noqa: E501


        :return: The moderate of this Body14.  # noqa: E501
        :rtype: bool
        """
        return self._moderate

    @moderate.setter
    def moderate(self, moderate):
        """Sets the moderate of this Body14.


        :param moderate: The moderate of this Body14.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and moderate is None:
            raise ValueError("Invalid value for `moderate`, must not be `None`")  # noqa: E501

        self._moderate = moderate

    @property
    def description(self):
        """Gets the description of this Body14.  # noqa: E501


        :return: The description of this Body14.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body14.


        :param description: The description of this Body14.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def provider(self):
        """Gets the provider of this Body14.  # noqa: E501


        :return: The provider of this Body14.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Body14.


        :param provider: The provider of this Body14.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def kind(self):
        """Gets the kind of this Body14.  # noqa: E501


        :return: The kind of this Body14.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Body14.


        :param kind: The kind of this Body14.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def vpsa_zone_group_storage_policy_type_id(self):
        """Gets the vpsa_zone_group_storage_policy_type_id of this Body14.  # noqa: E501


        :return: The vpsa_zone_group_storage_policy_type_id of this Body14.  # noqa: E501
        :rtype: int
        """
        return self._vpsa_zone_group_storage_policy_type_id

    @vpsa_zone_group_storage_policy_type_id.setter
    def vpsa_zone_group_storage_policy_type_id(self, vpsa_zone_group_storage_policy_type_id):
        """Sets the vpsa_zone_group_storage_policy_type_id of this Body14.


        :param vpsa_zone_group_storage_policy_type_id: The vpsa_zone_group_storage_policy_type_id of this Body14.  # noqa: E501
        :type: int
        """

        self._vpsa_zone_group_storage_policy_type_id = vpsa_zone_group_storage_policy_type_id

    @property
    def drives(self):
        """Gets the drives of this Body14.  # noqa: E501


        :return: The drives of this Body14.  # noqa: E501
        :rtype: object
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this Body14.


        :param drives: The drives of this Body14.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and drives is None:
            raise ValueError("Invalid value for `drives`, must not be `None`")  # noqa: E501

        self._drives = drives

    @property
    def allocation_zone(self):
        """Gets the allocation_zone of this Body14.  # noqa: E501


        :return: The allocation_zone of this Body14.  # noqa: E501
        :rtype: str
        """
        return self._allocation_zone

    @allocation_zone.setter
    def allocation_zone(self, allocation_zone):
        """Sets the allocation_zone of this Body14.


        :param allocation_zone: The allocation_zone of this Body14.  # noqa: E501
        :type: str
        """

        self._allocation_zone = allocation_zone

    @property
    def storage_profile(self):
        """Gets the storage_profile of this Body14.  # noqa: E501


        :return: The storage_profile of this Body14.  # noqa: E501
        :rtype: str
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this Body14.


        :param storage_profile: The storage_profile of this Body14.  # noqa: E501
        :type: str
        """

        self._storage_profile = storage_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body14, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body14):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body14):
            return True

        return self.to_dict() != other.to_dict()
