# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from zios.configuration import Configuration


class InlineResponse2006ResponseRequests(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'arguments': 'InlineResponse2006ResponseArguments',
        'action': 'str',
        'decided_by': 'InlineResponse2006ResponseDecidedBy',
        'decided_at': 'InlineResponse2006ResponseDecidedBy',
        'requested_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'arguments': 'arguments',
        'action': 'action',
        'decided_by': 'decided_by',
        'decided_at': 'decided_at',
        'requested_at': 'requested_at'
    }

    def __init__(self, id=None, arguments=None, action=None, decided_by=None, decided_at=None, requested_at=None, _configuration=None):  # noqa: E501
        """InlineResponse2006ResponseRequests - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._arguments = None
        self._action = None
        self._decided_by = None
        self._decided_at = None
        self._requested_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if arguments is not None:
            self.arguments = arguments
        if action is not None:
            self.action = action
        if decided_by is not None:
            self.decided_by = decided_by
        if decided_at is not None:
            self.decided_at = decided_at
        if requested_at is not None:
            self.requested_at = requested_at

    @property
    def id(self):
        """Gets the id of this InlineResponse2006ResponseRequests.  # noqa: E501


        :return: The id of this InlineResponse2006ResponseRequests.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2006ResponseRequests.


        :param id: The id of this InlineResponse2006ResponseRequests.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def arguments(self):
        """Gets the arguments of this InlineResponse2006ResponseRequests.  # noqa: E501


        :return: The arguments of this InlineResponse2006ResponseRequests.  # noqa: E501
        :rtype: InlineResponse2006ResponseArguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this InlineResponse2006ResponseRequests.


        :param arguments: The arguments of this InlineResponse2006ResponseRequests.  # noqa: E501
        :type: InlineResponse2006ResponseArguments
        """

        self._arguments = arguments

    @property
    def action(self):
        """Gets the action of this InlineResponse2006ResponseRequests.  # noqa: E501


        :return: The action of this InlineResponse2006ResponseRequests.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse2006ResponseRequests.


        :param action: The action of this InlineResponse2006ResponseRequests.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def decided_by(self):
        """Gets the decided_by of this InlineResponse2006ResponseRequests.  # noqa: E501


        :return: The decided_by of this InlineResponse2006ResponseRequests.  # noqa: E501
        :rtype: InlineResponse2006ResponseDecidedBy
        """
        return self._decided_by

    @decided_by.setter
    def decided_by(self, decided_by):
        """Sets the decided_by of this InlineResponse2006ResponseRequests.


        :param decided_by: The decided_by of this InlineResponse2006ResponseRequests.  # noqa: E501
        :type: InlineResponse2006ResponseDecidedBy
        """

        self._decided_by = decided_by

    @property
    def decided_at(self):
        """Gets the decided_at of this InlineResponse2006ResponseRequests.  # noqa: E501


        :return: The decided_at of this InlineResponse2006ResponseRequests.  # noqa: E501
        :rtype: InlineResponse2006ResponseDecidedBy
        """
        return self._decided_at

    @decided_at.setter
    def decided_at(self, decided_at):
        """Sets the decided_at of this InlineResponse2006ResponseRequests.


        :param decided_at: The decided_at of this InlineResponse2006ResponseRequests.  # noqa: E501
        :type: InlineResponse2006ResponseDecidedBy
        """

        self._decided_at = decided_at

    @property
    def requested_at(self):
        """Gets the requested_at of this InlineResponse2006ResponseRequests.  # noqa: E501


        :return: The requested_at of this InlineResponse2006ResponseRequests.  # noqa: E501
        :rtype: str
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this InlineResponse2006ResponseRequests.


        :param requested_at: The requested_at of this InlineResponse2006ResponseRequests.  # noqa: E501
        :type: str
        """

        self._requested_at = requested_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006ResponseRequests, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006ResponseRequests):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2006ResponseRequests):
            return True

        return self.to_dict() != other.to_dict()
