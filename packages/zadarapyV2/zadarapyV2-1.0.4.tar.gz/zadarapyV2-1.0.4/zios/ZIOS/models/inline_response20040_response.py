# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from zios.configuration import Configuration


class InlineResponse20040Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'status': 'int',
        'token': 'str',
        'token_expire_at': 'str'
    }

    attribute_map = {
        'message': 'message',
        'status': 'status',
        'token': 'token',
        'token_expire_at': 'token_expire_at'
    }

    def __init__(self, message=None, status=None, token=None, token_expire_at=None, _configuration=None):  # noqa: E501
        """InlineResponse20040Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._status = None
        self._token = None
        self._token_expire_at = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if token is not None:
            self.token = token
        if token_expire_at is not None:
            self.token_expire_at = token_expire_at

    @property
    def message(self):
        """Gets the message of this InlineResponse20040Response.  # noqa: E501


        :return: The message of this InlineResponse20040Response.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse20040Response.


        :param message: The message of this InlineResponse20040Response.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this InlineResponse20040Response.  # noqa: E501


        :return: The status of this InlineResponse20040Response.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20040Response.


        :param status: The status of this InlineResponse20040Response.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def token(self):
        """Gets the token of this InlineResponse20040Response.  # noqa: E501


        :return: The token of this InlineResponse20040Response.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse20040Response.


        :param token: The token of this InlineResponse20040Response.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_expire_at(self):
        """Gets the token_expire_at of this InlineResponse20040Response.  # noqa: E501


        :return: The token_expire_at of this InlineResponse20040Response.  # noqa: E501
        :rtype: str
        """
        return self._token_expire_at

    @token_expire_at.setter
    def token_expire_at(self, token_expire_at):
        """Sets the token_expire_at of this InlineResponse20040Response.


        :param token_expire_at: The token_expire_at of this InlineResponse20040Response.  # noqa: E501
        :type: str
        """

        self._token_expire_at = token_expire_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20040Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20040Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20040Response):
            return True

        return self.to_dict() != other.to_dict()
