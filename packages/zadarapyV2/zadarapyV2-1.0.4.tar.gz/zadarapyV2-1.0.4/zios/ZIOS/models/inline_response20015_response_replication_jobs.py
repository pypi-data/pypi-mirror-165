# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from zios.configuration import Configuration


class InlineResponse20015ResponseReplicationJobs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_name': 'str',
        'replication_id': 'str',
        'display_name': 'str',
        'state': 'str',
        'access': 'str',
        'secret': 'str',
        'dest_container': 'str',
        'region_name': 'str',
        'src_account': 'str',
        'endpoint': 'str',
        'src_container': 'str'
    }

    attribute_map = {
        'target_name': 'target_name',
        'replication_id': 'replication_id',
        'display_name': 'display_name',
        'state': 'state',
        'access': 'access',
        'secret': 'secret',
        'dest_container': 'dest_container',
        'region_name': 'region_name',
        'src_account': 'src_account',
        'endpoint': 'endpoint',
        'src_container': 'src_container'
    }

    def __init__(self, target_name=None, replication_id=None, display_name=None, state=None, access=None, secret=None, dest_container=None, region_name=None, src_account=None, endpoint=None, src_container=None, _configuration=None):  # noqa: E501
        """InlineResponse20015ResponseReplicationJobs - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._target_name = None
        self._replication_id = None
        self._display_name = None
        self._state = None
        self._access = None
        self._secret = None
        self._dest_container = None
        self._region_name = None
        self._src_account = None
        self._endpoint = None
        self._src_container = None
        self.discriminator = None

        if target_name is not None:
            self.target_name = target_name
        if replication_id is not None:
            self.replication_id = replication_id
        if display_name is not None:
            self.display_name = display_name
        if state is not None:
            self.state = state
        if access is not None:
            self.access = access
        if secret is not None:
            self.secret = secret
        if dest_container is not None:
            self.dest_container = dest_container
        if region_name is not None:
            self.region_name = region_name
        if src_account is not None:
            self.src_account = src_account
        if endpoint is not None:
            self.endpoint = endpoint
        if src_container is not None:
            self.src_container = src_container

    @property
    def target_name(self):
        """Gets the target_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The target_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this InlineResponse20015ResponseReplicationJobs.


        :param target_name: The target_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def replication_id(self):
        """Gets the replication_id of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The replication_id of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._replication_id

    @replication_id.setter
    def replication_id(self, replication_id):
        """Sets the replication_id of this InlineResponse20015ResponseReplicationJobs.


        :param replication_id: The replication_id of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._replication_id = replication_id

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The display_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20015ResponseReplicationJobs.


        :param display_name: The display_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def state(self):
        """Gets the state of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The state of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20015ResponseReplicationJobs.


        :param state: The state of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def access(self):
        """Gets the access of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The access of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this InlineResponse20015ResponseReplicationJobs.


        :param access: The access of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def secret(self):
        """Gets the secret of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The secret of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this InlineResponse20015ResponseReplicationJobs.


        :param secret: The secret of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def dest_container(self):
        """Gets the dest_container of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The dest_container of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._dest_container

    @dest_container.setter
    def dest_container(self, dest_container):
        """Sets the dest_container of this InlineResponse20015ResponseReplicationJobs.


        :param dest_container: The dest_container of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._dest_container = dest_container

    @property
    def region_name(self):
        """Gets the region_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The region_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this InlineResponse20015ResponseReplicationJobs.


        :param region_name: The region_name of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def src_account(self):
        """Gets the src_account of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The src_account of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._src_account

    @src_account.setter
    def src_account(self, src_account):
        """Sets the src_account of this InlineResponse20015ResponseReplicationJobs.


        :param src_account: The src_account of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._src_account = src_account

    @property
    def endpoint(self):
        """Gets the endpoint of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The endpoint of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this InlineResponse20015ResponseReplicationJobs.


        :param endpoint: The endpoint of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def src_container(self):
        """Gets the src_container of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501


        :return: The src_container of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._src_container

    @src_container.setter
    def src_container(self, src_container):
        """Sets the src_container of this InlineResponse20015ResponseReplicationJobs.


        :param src_container: The src_container of this InlineResponse20015ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._src_container = src_container

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015ResponseReplicationJobs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015ResponseReplicationJobs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20015ResponseReplicationJobs):
            return True

        return self.to_dict() != other.to_dict()
