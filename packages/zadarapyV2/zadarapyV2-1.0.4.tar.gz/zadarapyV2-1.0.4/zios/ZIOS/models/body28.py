# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from zios.configuration import Configuration


class Body28(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'endpoint': 'str',
        'endpoint_url': 'str',
        'region': 'str',
        'username': 'str',
        'password': 'str',
        'connect_via': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'endpoint': 'endpoint',
        'endpoint_url': 'endpoint_url',
        'region': 'region',
        'username': 'username',
        'password': 'password',
        'connect_via': 'connectVia'
    }

    def __init__(self, name=None, type=None, endpoint=None, endpoint_url=None, region=None, username=None, password=None, connect_via=None, _configuration=None):  # noqa: E501
        """Body28 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type = None
        self._endpoint = None
        self._endpoint_url = None
        self._region = None
        self._username = None
        self._password = None
        self._connect_via = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.endpoint = endpoint
        self.endpoint_url = endpoint_url
        self.region = region
        self.username = username
        self.password = password
        self.connect_via = connect_via

    @property
    def name(self):
        """Gets the name of this Body28.  # noqa: E501


        :return: The name of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body28.


        :param name: The name of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Body28.  # noqa: E501


        :return: The type of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Body28.


        :param type: The type of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def endpoint(self):
        """Gets the endpoint of this Body28.  # noqa: E501


        :return: The endpoint of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Body28.


        :param endpoint: The endpoint of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this Body28.  # noqa: E501


        :return: The endpoint_url of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this Body28.


        :param endpoint_url: The endpoint_url of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and endpoint_url is None:
            raise ValueError("Invalid value for `endpoint_url`, must not be `None`")  # noqa: E501

        self._endpoint_url = endpoint_url

    @property
    def region(self):
        """Gets the region of this Body28.  # noqa: E501


        :return: The region of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Body28.


        :param region: The region of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def username(self):
        """Gets the username of this Body28.  # noqa: E501


        :return: The username of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Body28.


        :param username: The username of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this Body28.  # noqa: E501


        :return: The password of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body28.


        :param password: The password of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def connect_via(self):
        """Gets the connect_via of this Body28.  # noqa: E501


        :return: The connect_via of this Body28.  # noqa: E501
        :rtype: str
        """
        return self._connect_via

    @connect_via.setter
    def connect_via(self, connect_via):
        """Sets the connect_via of this Body28.


        :param connect_via: The connect_via of this Body28.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connect_via is None:
            raise ValueError("Invalid value for `connect_via`, must not be `None`")  # noqa: E501

        self._connect_via = connect_via

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body28, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body28):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body28):
            return True

        return self.to_dict() != other.to_dict()
