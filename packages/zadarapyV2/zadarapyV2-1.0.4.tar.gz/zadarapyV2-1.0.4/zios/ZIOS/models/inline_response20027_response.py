# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from zios.configuration import Configuration


class InlineResponse20027Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'id': 'str',
        'auth_service_url': 'str',
        'operator_roles': 'str',
        'reseller_admin_role': 'str',
        'reseller_prefix': 'str',
        'username': 'str',
        'project_domain_id': 'str',
        'user_domain_id': 'str',
        'project_name': 'str'
    }

    attribute_map = {
        'message': 'message',
        'id': 'id',
        'auth_service_url': 'auth_service_url',
        'operator_roles': 'operator_roles',
        'reseller_admin_role': 'reseller_admin_role',
        'reseller_prefix': 'reseller_prefix',
        'username': 'username',
        'project_domain_id': 'project_domain_id',
        'user_domain_id': 'user_domain_id',
        'project_name': 'project_name'
    }

    def __init__(self, message=None, id=None, auth_service_url=None, operator_roles=None, reseller_admin_role=None, reseller_prefix=None, username=None, project_domain_id=None, user_domain_id=None, project_name=None, _configuration=None):  # noqa: E501
        """InlineResponse20027Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._id = None
        self._auth_service_url = None
        self._operator_roles = None
        self._reseller_admin_role = None
        self._reseller_prefix = None
        self._username = None
        self._project_domain_id = None
        self._user_domain_id = None
        self._project_name = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if id is not None:
            self.id = id
        if auth_service_url is not None:
            self.auth_service_url = auth_service_url
        if operator_roles is not None:
            self.operator_roles = operator_roles
        if reseller_admin_role is not None:
            self.reseller_admin_role = reseller_admin_role
        if reseller_prefix is not None:
            self.reseller_prefix = reseller_prefix
        if username is not None:
            self.username = username
        if project_domain_id is not None:
            self.project_domain_id = project_domain_id
        if user_domain_id is not None:
            self.user_domain_id = user_domain_id
        if project_name is not None:
            self.project_name = project_name

    @property
    def message(self):
        """Gets the message of this InlineResponse20027Response.  # noqa: E501


        :return: The message of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse20027Response.


        :param message: The message of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def id(self):
        """Gets the id of this InlineResponse20027Response.  # noqa: E501


        :return: The id of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20027Response.


        :param id: The id of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def auth_service_url(self):
        """Gets the auth_service_url of this InlineResponse20027Response.  # noqa: E501


        :return: The auth_service_url of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._auth_service_url

    @auth_service_url.setter
    def auth_service_url(self, auth_service_url):
        """Sets the auth_service_url of this InlineResponse20027Response.


        :param auth_service_url: The auth_service_url of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._auth_service_url = auth_service_url

    @property
    def operator_roles(self):
        """Gets the operator_roles of this InlineResponse20027Response.  # noqa: E501


        :return: The operator_roles of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._operator_roles

    @operator_roles.setter
    def operator_roles(self, operator_roles):
        """Sets the operator_roles of this InlineResponse20027Response.


        :param operator_roles: The operator_roles of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._operator_roles = operator_roles

    @property
    def reseller_admin_role(self):
        """Gets the reseller_admin_role of this InlineResponse20027Response.  # noqa: E501


        :return: The reseller_admin_role of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._reseller_admin_role

    @reseller_admin_role.setter
    def reseller_admin_role(self, reseller_admin_role):
        """Sets the reseller_admin_role of this InlineResponse20027Response.


        :param reseller_admin_role: The reseller_admin_role of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._reseller_admin_role = reseller_admin_role

    @property
    def reseller_prefix(self):
        """Gets the reseller_prefix of this InlineResponse20027Response.  # noqa: E501


        :return: The reseller_prefix of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._reseller_prefix

    @reseller_prefix.setter
    def reseller_prefix(self, reseller_prefix):
        """Sets the reseller_prefix of this InlineResponse20027Response.


        :param reseller_prefix: The reseller_prefix of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._reseller_prefix = reseller_prefix

    @property
    def username(self):
        """Gets the username of this InlineResponse20027Response.  # noqa: E501


        :return: The username of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse20027Response.


        :param username: The username of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def project_domain_id(self):
        """Gets the project_domain_id of this InlineResponse20027Response.  # noqa: E501


        :return: The project_domain_id of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._project_domain_id

    @project_domain_id.setter
    def project_domain_id(self, project_domain_id):
        """Sets the project_domain_id of this InlineResponse20027Response.


        :param project_domain_id: The project_domain_id of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._project_domain_id = project_domain_id

    @property
    def user_domain_id(self):
        """Gets the user_domain_id of this InlineResponse20027Response.  # noqa: E501


        :return: The user_domain_id of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._user_domain_id

    @user_domain_id.setter
    def user_domain_id(self, user_domain_id):
        """Sets the user_domain_id of this InlineResponse20027Response.


        :param user_domain_id: The user_domain_id of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._user_domain_id = user_domain_id

    @property
    def project_name(self):
        """Gets the project_name of this InlineResponse20027Response.  # noqa: E501


        :return: The project_name of this InlineResponse20027Response.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this InlineResponse20027Response.


        :param project_name: The project_name of this InlineResponse20027Response.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20027Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20027Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20027Response):
            return True

        return self.to_dict() != other.to_dict()
