# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from zios.configuration import Configuration


class Body39(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public_api_hostname': 'str'
    }

    attribute_map = {
        'public_api_hostname': 'public_api_hostname'
    }

    def __init__(self, public_api_hostname=None, _configuration=None):  # noqa: E501
        """Body39 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._public_api_hostname = None
        self.discriminator = None

        self.public_api_hostname = public_api_hostname

    @property
    def public_api_hostname(self):
        """Gets the public_api_hostname of this Body39.  # noqa: E501


        :return: The public_api_hostname of this Body39.  # noqa: E501
        :rtype: str
        """
        return self._public_api_hostname

    @public_api_hostname.setter
    def public_api_hostname(self, public_api_hostname):
        """Sets the public_api_hostname of this Body39.


        :param public_api_hostname: The public_api_hostname of this Body39.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and public_api_hostname is None:
            raise ValueError("Invalid value for `public_api_hostname`, must not be `None`")  # noqa: E501

        self._public_api_hostname = public_api_hostname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body39, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body39):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body39):
            return True

        return self.to_dict() != other.to_dict()
