# coding: utf-8

"""
    ZIOS api

    ZIOS operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zios.api_client import ApiClient


class ObjectStorageDestinationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_object_storage_destination(self, body, **kwargs):  # noqa: E501
        """create_object_storage_destination  # noqa: E501

        Create an object storage destination. Connection will be tested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_object_storage_destination(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body28 body: todo (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_object_storage_destination_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_object_storage_destination_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_object_storage_destination_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_object_storage_destination  # noqa: E501

        Create an object storage destination. Connection will be tested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_object_storage_destination_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body28 body: todo (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_object_storage_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_object_storage_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/zios/object_storage_destinations.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_object_storage_destination(self, target_ext_name, body, **kwargs):  # noqa: E501
        """delete_object_storage_destination  # noqa: E501

        Delete an object storage destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_storage_destination(target_ext_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_ext_name: TODO (required)
        :param Body30 body: todo (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_object_storage_destination_with_http_info(target_ext_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_object_storage_destination_with_http_info(target_ext_name, body, **kwargs)  # noqa: E501
            return data

    def delete_object_storage_destination_with_http_info(self, target_ext_name, body, **kwargs):  # noqa: E501
        """delete_object_storage_destination  # noqa: E501

        Delete an object storage destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_storage_destination_with_http_info(target_ext_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_ext_name: TODO (required)
        :param Body30 body: todo (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_ext_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object_storage_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_ext_name' is set
        if self.api_client.client_side_validation and ('target_ext_name' not in params or
                                                       params['target_ext_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_ext_name` when calling `delete_object_storage_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `delete_object_storage_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_ext_name' in params:
            path_params['target_ext_name'] = params['target_ext_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/zios/object_storage_destinations/{target_ext_name}.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_storage_destination(self, target_ext_name, **kwargs):  # noqa: E501
        """get_object_storage_destination  # noqa: E501

        Get one Object Storage Destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_storage_destination(target_ext_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_ext_name: TODO (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_storage_destination_with_http_info(target_ext_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_storage_destination_with_http_info(target_ext_name, **kwargs)  # noqa: E501
            return data

    def get_object_storage_destination_with_http_info(self, target_ext_name, **kwargs):  # noqa: E501
        """get_object_storage_destination  # noqa: E501

        Get one Object Storage Destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_storage_destination_with_http_info(target_ext_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_ext_name: TODO (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_ext_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_storage_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_ext_name' is set
        if self.api_client.client_side_validation and ('target_ext_name' not in params or
                                                       params['target_ext_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_ext_name` when calling `get_object_storage_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_ext_name' in params:
            path_params['target_ext_name'] = params['target_ext_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/zios/object_storage_destinations/{target_ext_name}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_object_storage_destination_in_current_account(self, body, **kwargs):  # noqa: E501
        """list_object_storage_destination_in_current_account  # noqa: E501

        Get a list of Object Storage Destinations in current user's account or in a container's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_object_storage_destination_in_current_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body27 body: todo (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_object_storage_destination_in_current_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.list_object_storage_destination_in_current_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def list_object_storage_destination_in_current_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """list_object_storage_destination_in_current_account  # noqa: E501

        Get a list of Object Storage Destinations in current user's account or in a container's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_object_storage_destination_in_current_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body27 body: todo (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_object_storage_destination_in_current_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `list_object_storage_destination_in_current_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/zios/object_storage_destinations.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updat_object_storage_destination(self, target_ext_name, body, **kwargs):  # noqa: E501
        """updat_object_storage_destination  # noqa: E501

        Update an object storage destination. Connection will be tested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updat_object_storage_destination(target_ext_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_ext_name: TODO (required)
        :param Body29 body: todo (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updat_object_storage_destination_with_http_info(target_ext_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updat_object_storage_destination_with_http_info(target_ext_name, body, **kwargs)  # noqa: E501
            return data

    def updat_object_storage_destination_with_http_info(self, target_ext_name, body, **kwargs):  # noqa: E501
        """updat_object_storage_destination  # noqa: E501

        Update an object storage destination. Connection will be tested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updat_object_storage_destination_with_http_info(target_ext_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_ext_name: TODO (required)
        :param Body29 body: todo (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_ext_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updat_object_storage_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_ext_name' is set
        if self.api_client.client_side_validation and ('target_ext_name' not in params or
                                                       params['target_ext_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_ext_name` when calling `updat_object_storage_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `updat_object_storage_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_ext_name' in params:
            path_params['target_ext_name'] = params['target_ext_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/zios/object_storage_destinations/{target_ext_name}.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
