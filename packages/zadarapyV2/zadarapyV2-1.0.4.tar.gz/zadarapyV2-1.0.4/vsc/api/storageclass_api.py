# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vsc.api_client import ApiClient


class StorageclassApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_storage_class_member(self, storage_class_id, **kwargs):  # noqa: E501
        """Add VPSA as a member of Storage Class  # noqa: E501

        Add VPSA to Storage Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_storage_class_member(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param object add_storage_class_member_request:
        :return: Vpsa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_storage_class_member_with_http_info(storage_class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_storage_class_member_with_http_info(storage_class_id, **kwargs)  # noqa: E501
            return data

    def add_storage_class_member_with_http_info(self, storage_class_id, **kwargs):  # noqa: E501
        """Add VPSA as a member of Storage Class  # noqa: E501

        Add VPSA to Storage Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_storage_class_member_with_http_info(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param object add_storage_class_member_request:
        :return: Vpsa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'add_storage_class_member_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_storage_class_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `add_storage_class_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_storage_class_member_request' in params:
            body_params = params['add_storage_class_member_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vpsa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_storage_class(self, **kwargs):  # noqa: E501
        """Create a new VSC StorageClass  # noqa: E501

        Creates new VSC Storage Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_storage_class(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageClassCreateRequest storage_class_create_request:
        :return: StorageClass
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_storage_class_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_storage_class_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_storage_class_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new VSC StorageClass  # noqa: E501

        Creates new VSC Storage Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_storage_class_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageClassCreateRequest storage_class_create_request:
        :return: StorageClass
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_storage_class" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_class_create_request' in params:
            body_params = params['storage_class_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageClass',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storage_class(self, storage_class_id, **kwargs):  # noqa: E501
        """Delete Storage Class  # noqa: E501

        Deletes a specific Storage class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_storage_class(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param DeleteStorageClassRequest delete_storage_class_request:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_storage_class_with_http_info(storage_class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storage_class_with_http_info(storage_class_id, **kwargs)  # noqa: E501
            return data

    def delete_storage_class_with_http_info(self, storage_class_id, **kwargs):  # noqa: E501
        """Delete Storage Class  # noqa: E501

        Deletes a specific Storage class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_storage_class_with_http_info(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param DeleteStorageClassRequest delete_storage_class_request:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'delete_storage_class_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storage_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `delete_storage_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_storage_class_request' in params:
            body_params = params['delete_storage_class_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_storage_class(self, storage_class_id, **kwargs):  # noqa: E501
        """Get a specific Storage Class  # noqa: E501

        Get Storage Class details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_storage_class(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :return: StorageClass
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_storage_class_with_http_info(storage_class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_storage_class_with_http_info(storage_class_id, **kwargs)  # noqa: E501
            return data

    def get_one_storage_class_with_http_info(self, storage_class_id, **kwargs):  # noqa: E501
        """Get a specific Storage Class  # noqa: E501

        Get Storage Class details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_storage_class_with_http_info(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :return: StorageClass
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_storage_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `get_one_storage_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageClass',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_storage_class_member(self, storage_class_id, vpsa_id, **kwargs):  # noqa: E501
        """Get a Storage Class member details  # noqa: E501

        Get a Storage Class member details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_storage_class_member(storage_class_id, vpsa_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param str vpsa_id: VPSA ID (required)
        :return: Vpsa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_storage_class_member_with_http_info(storage_class_id, vpsa_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_storage_class_member_with_http_info(storage_class_id, vpsa_id, **kwargs)  # noqa: E501
            return data

    def get_one_storage_class_member_with_http_info(self, storage_class_id, vpsa_id, **kwargs):  # noqa: E501
        """Get a Storage Class member details  # noqa: E501

        Get a Storage Class member details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_storage_class_member_with_http_info(storage_class_id, vpsa_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param str vpsa_id: VPSA ID (required)
        :return: Vpsa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'vpsa_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_storage_class_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `get_one_storage_class_member`")  # noqa: E501
        # verify the required parameter 'vpsa_id' is set
        if self.api_client.client_side_validation and ('vpsa_id' not in params or
                                                       params['vpsa_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vpsa_id` when calling `get_one_storage_class_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501
        if 'vpsa_id' in params:
            path_params['vpsa_id'] = params['vpsa_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}/members/{vpsa_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vpsa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_class_members(self, storage_class_id, **kwargs):  # noqa: E501
        """Get Storage Class members  # noqa: E501

        Get a Storage Class's member VPSAs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_class_members(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param int limit: Specify max number of entities that should be returned
        :param int offset: Specify the first entity from which to retrieve
        :param str sort_order: The fields to sort by (can provide multiple values). Use \"-\" to reverse the order.
        :param str search_string: Search string to filter by VPSA display name
        :return: list[Vpsa]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_class_members_with_http_info(storage_class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_class_members_with_http_info(storage_class_id, **kwargs)  # noqa: E501
            return data

    def get_storage_class_members_with_http_info(self, storage_class_id, **kwargs):  # noqa: E501
        """Get Storage Class members  # noqa: E501

        Get a Storage Class's member VPSAs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_class_members_with_http_info(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param int limit: Specify max number of entities that should be returned
        :param int offset: Specify the first entity from which to retrieve
        :param str sort_order: The fields to sort by (can provide multiple values). Use \"-\" to reverse the order.
        :param str search_string: Search string to filter by VPSA display name
        :return: list[Vpsa]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'limit', 'offset', 'sort_order', 'search_string']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_class_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `get_storage_class_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'search_string' in params:
            query_params.append(('search_string', params['search_string']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Vpsa]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_classes(self, **kwargs):  # noqa: E501
        """Get VSC Storage Classes  # noqa: E501

        Pass optional filters for Storage class selection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_classes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Specify max number of entities that should be returned
        :param int offset: Specify the first entity from which to retrieve
        :param str sort_order: The fields to sort by (can provide multiple values). Use \"-\" to reverse the order.
        :param str search_string: optional search string to filter by storage class name
        :param bool is_default: If True returns only the default storage class
        :return: list[StorageClass]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_classes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_classes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storage_classes_with_http_info(self, **kwargs):  # noqa: E501
        """Get VSC Storage Classes  # noqa: E501

        Pass optional filters for Storage class selection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_classes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Specify max number of entities that should be returned
        :param int offset: Specify the first entity from which to retrieve
        :param str sort_order: The fields to sort by (can provide multiple values). Use \"-\" to reverse the order.
        :param str search_string: optional search string to filter by storage class name
        :param bool is_default: If True returns only the default storage class
        :return: list[StorageClass]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'sort_order', 'search_string', 'is_default']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_classes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'search_string' in params:
            query_params.append(('search_string', params['search_string']))  # noqa: E501
        if 'is_default' in params:
            query_params.append(('is_default', params['is_default']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StorageClass]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_storage_class_member(self, storage_class_id, vpsa_id, **kwargs):  # noqa: E501
        """Remove a Storage Class Member  # noqa: E501

        Removes a specific Storage class member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_storage_class_member(storage_class_id, vpsa_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param str vpsa_id: VPSA ID (required)
        :param RemoveStorageClassMemberRequest remove_storage_class_member_request:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_storage_class_member_with_http_info(storage_class_id, vpsa_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_storage_class_member_with_http_info(storage_class_id, vpsa_id, **kwargs)  # noqa: E501
            return data

    def remove_storage_class_member_with_http_info(self, storage_class_id, vpsa_id, **kwargs):  # noqa: E501
        """Remove a Storage Class Member  # noqa: E501

        Removes a specific Storage class member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_storage_class_member_with_http_info(storage_class_id, vpsa_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param str vpsa_id: VPSA ID (required)
        :param RemoveStorageClassMemberRequest remove_storage_class_member_request:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'vpsa_id', 'remove_storage_class_member_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_storage_class_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `remove_storage_class_member`")  # noqa: E501
        # verify the required parameter 'vpsa_id' is set
        if self.api_client.client_side_validation and ('vpsa_id' not in params or
                                                       params['vpsa_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vpsa_id` when calling `remove_storage_class_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501
        if 'vpsa_id' in params:
            path_params['vpsa_id'] = params['vpsa_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_storage_class_member_request' in params:
            body_params = params['remove_storage_class_member_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}/members/{vpsa_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storage_class(self, storage_class_id, **kwargs):  # noqa: E501
        """Update properties of a Storage Class  # noqa: E501

        Update one or more properties of a Storage class atomically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_class(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param StorageClassUpdateRequest storage_class_update_request:
        :return: StorageClass
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_storage_class_with_http_info(storage_class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storage_class_with_http_info(storage_class_id, **kwargs)  # noqa: E501
            return data

    def update_storage_class_with_http_info(self, storage_class_id, **kwargs):  # noqa: E501
        """Update properties of a Storage Class  # noqa: E501

        Update one or more properties of a Storage class atomically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_class_with_http_info(storage_class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param StorageClassUpdateRequest storage_class_update_request:
        :return: StorageClass
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'storage_class_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storage_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `update_storage_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_class_update_request' in params:
            body_params = params['storage_class_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageClass',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storage_class_member(self, storage_class_id, vpsa_id, **kwargs):  # noqa: E501
        """Update Storage Class member properties  # noqa: E501

        Update one or more Storage Class member properties atomically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_class_member(storage_class_id, vpsa_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param str vpsa_id: VPSA ID (required)
        :param VpsaCrupdRequest storage_class_member_update_request:
        :return: Vpsa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_storage_class_member_with_http_info(storage_class_id, vpsa_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storage_class_member_with_http_info(storage_class_id, vpsa_id, **kwargs)  # noqa: E501
            return data

    def update_storage_class_member_with_http_info(self, storage_class_id, vpsa_id, **kwargs):  # noqa: E501
        """Update Storage Class member properties  # noqa: E501

        Update one or more Storage Class member properties atomically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_class_member_with_http_info(storage_class_id, vpsa_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage_class_id: Storage Class ID (required)
        :param str vpsa_id: VPSA ID (required)
        :param VpsaCrupdRequest storage_class_member_update_request:
        :return: Vpsa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_class_id', 'vpsa_id', 'storage_class_member_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storage_class_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_class_id' is set
        if self.api_client.client_side_validation and ('storage_class_id' not in params or
                                                       params['storage_class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_class_id` when calling `update_storage_class_member`")  # noqa: E501
        # verify the required parameter 'vpsa_id' is set
        if self.api_client.client_side_validation and ('vpsa_id' not in params or
                                                       params['vpsa_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vpsa_id` when calling `update_storage_class_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_class_id' in params:
            path_params['storage_class_id'] = params['storage_class_id']  # noqa: E501
        if 'vpsa_id' in params:
            path_params['vpsa_id'] = params['vpsa_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_class_member_update_request' in params:
            body_params = params['storage_class_member_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/storageclass/{storage_class_id}/members/{vpsa_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vpsa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
