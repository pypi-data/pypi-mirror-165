# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vsc.api_client import ApiClient


class TenantsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_tenant(self, tenant_id, **kwargs):  # noqa: E501
        """Delete Tenant  # noqa: E501

        Deletes a specific tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tenant(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tenant_id: Tenant ID (required)
        :param DeleteTenantRequest delete_tenant_request:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tenant_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tenant_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def delete_tenant_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """Delete Tenant  # noqa: E501

        Deletes a specific tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tenant_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tenant_id: Tenant ID (required)
        :param DeleteTenantRequest delete_tenant_request:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'delete_tenant_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if self.api_client.client_side_validation and ('tenant_id' not in params or
                                                       params['tenant_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_id` when calling `delete_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant_id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_tenant_request' in params:
            body_params = params['delete_tenant_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_tenant(self, tenant_id, **kwargs):  # noqa: E501
        """Get tenant details  # noqa: E501

        Get Tenant details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_tenant(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tenant_id: Tenant ID (required)
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_tenant_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_tenant_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def get_one_tenant_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """Get tenant details  # noqa: E501

        Get Tenant details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_tenant_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tenant_id: Tenant ID (required)
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if self.api_client.client_side_validation and ('tenant_id' not in params or
                                                       params['tenant_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_one_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant_id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tenant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenants(self, **kwargs):  # noqa: E501
        """Get List of tenants  # noqa: E501

        Pass one or more filters for Tenant selection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenants(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Specify max number of entities that should be returned
        :param int offset: Specify the first entity from which to retrieve
        :param str sort_order: The fields to sort by (can provide multiple values). Use \"-\" to reverse the order.
        :param str search_string: Search string to filter by tenant display name
        :return: list[Tenant]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenants_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tenants_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tenants_with_http_info(self, **kwargs):  # noqa: E501
        """Get List of tenants  # noqa: E501

        Pass one or more filters for Tenant selection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Specify max number of entities that should be returned
        :param int offset: Specify the first entity from which to retrieve
        :param str sort_order: The fields to sort by (can provide multiple values). Use \"-\" to reverse the order.
        :param str search_string: Search string to filter by tenant display name
        :return: list[Tenant]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'sort_order', 'search_string']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenants" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'search_string' in params:
            query_params.append(('search_string', params['search_string']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Tenant]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_tenant(self, **kwargs):  # noqa: E501
        """Register a tenant  # noqa: E501

        Registers a new tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_tenant(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegisterTenantRequest register_tenant_request:
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_tenant_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.register_tenant_with_http_info(**kwargs)  # noqa: E501
            return data

    def register_tenant_with_http_info(self, **kwargs):  # noqa: E501
        """Register a tenant  # noqa: E501

        Registers a new tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_tenant_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegisterTenantRequest register_tenant_request:
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['register_tenant_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_tenant" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'register_tenant_request' in params:
            body_params = params['register_tenant_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tenant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tenant(self, tenant_id, **kwargs):  # noqa: E501
        """Update properties of a Tenant  # noqa: E501

        Update one or more properties of a Tenant atomically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tenant(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tenant_id: Tenant ID (required)
        :param TenantUpdateRequest tenant_update_request:
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tenant_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tenant_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def update_tenant_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """Update properties of a Tenant  # noqa: E501

        Update one or more properties of a Tenant atomically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tenant_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tenant_id: Tenant ID (required)
        :param TenantUpdateRequest tenant_update_request:
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'tenant_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if self.api_client.client_side_validation and ('tenant_id' not in params or
                                                       params['tenant_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_id` when calling `update_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant_id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tenant_update_request' in params:
            body_params = params['tenant_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tenant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
