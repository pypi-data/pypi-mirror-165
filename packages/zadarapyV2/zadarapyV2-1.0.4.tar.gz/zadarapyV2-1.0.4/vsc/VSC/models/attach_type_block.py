# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class AttachTypeBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_method': 'str',
        'auth_password': 'str',
        'auth_username': 'str',
        'target_iqn': 'str',
        'target_lun': 'int',
        'target_portal': 'str'
    }

    attribute_map = {
        'auth_method': 'auth_method',
        'auth_password': 'auth_password',
        'auth_username': 'auth_username',
        'target_iqn': 'target_iqn',
        'target_lun': 'target_lun',
        'target_portal': 'target_portal'
    }

    def __init__(self, auth_method=None, auth_password=None, auth_username=None, target_iqn=None, target_lun=None, target_portal=None, _configuration=None):  # noqa: E501
        """AttachTypeBlock - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_method = None
        self._auth_password = None
        self._auth_username = None
        self._target_iqn = None
        self._target_lun = None
        self._target_portal = None
        self.discriminator = None

        if auth_method is not None:
            self.auth_method = auth_method
        if auth_password is not None:
            self.auth_password = auth_password
        if auth_username is not None:
            self.auth_username = auth_username
        if target_iqn is not None:
            self.target_iqn = target_iqn
        if target_lun is not None:
            self.target_lun = target_lun
        if target_portal is not None:
            self.target_portal = target_portal

    @property
    def auth_method(self):
        """Gets the auth_method of this AttachTypeBlock.  # noqa: E501

        authentication method  # noqa: E501

        :return: The auth_method of this AttachTypeBlock.  # noqa: E501
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this AttachTypeBlock.

        authentication method  # noqa: E501

        :param auth_method: The auth_method of this AttachTypeBlock.  # noqa: E501
        :type: str
        """

        self._auth_method = auth_method

    @property
    def auth_password(self):
        """Gets the auth_password of this AttachTypeBlock.  # noqa: E501

        CHAP password  # noqa: E501

        :return: The auth_password of this AttachTypeBlock.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this AttachTypeBlock.

        CHAP password  # noqa: E501

        :param auth_password: The auth_password of this AttachTypeBlock.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def auth_username(self):
        """Gets the auth_username of this AttachTypeBlock.  # noqa: E501

        CHAP user  # noqa: E501

        :return: The auth_username of this AttachTypeBlock.  # noqa: E501
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this AttachTypeBlock.

        CHAP user  # noqa: E501

        :param auth_username: The auth_username of this AttachTypeBlock.  # noqa: E501
        :type: str
        """

        self._auth_username = auth_username

    @property
    def target_iqn(self):
        """Gets the target_iqn of this AttachTypeBlock.  # noqa: E501

        iSCSI Target IQN  # noqa: E501

        :return: The target_iqn of this AttachTypeBlock.  # noqa: E501
        :rtype: str
        """
        return self._target_iqn

    @target_iqn.setter
    def target_iqn(self, target_iqn):
        """Sets the target_iqn of this AttachTypeBlock.

        iSCSI Target IQN  # noqa: E501

        :param target_iqn: The target_iqn of this AttachTypeBlock.  # noqa: E501
        :type: str
        """

        self._target_iqn = target_iqn

    @property
    def target_lun(self):
        """Gets the target_lun of this AttachTypeBlock.  # noqa: E501

        LUN number on iSCSI target  # noqa: E501

        :return: The target_lun of this AttachTypeBlock.  # noqa: E501
        :rtype: int
        """
        return self._target_lun

    @target_lun.setter
    def target_lun(self, target_lun):
        """Sets the target_lun of this AttachTypeBlock.

        LUN number on iSCSI target  # noqa: E501

        :param target_lun: The target_lun of this AttachTypeBlock.  # noqa: E501
        :type: int
        """

        self._target_lun = target_lun

    @property
    def target_portal(self):
        """Gets the target_portal of this AttachTypeBlock.  # noqa: E501

        iSCSI Target IP and Port on which block volume is exposed  # noqa: E501

        :return: The target_portal of this AttachTypeBlock.  # noqa: E501
        :rtype: str
        """
        return self._target_portal

    @target_portal.setter
    def target_portal(self, target_portal):
        """Sets the target_portal of this AttachTypeBlock.

        iSCSI Target IP and Port on which block volume is exposed  # noqa: E501

        :param target_portal: The target_portal of this AttachTypeBlock.  # noqa: E501
        :type: str
        """

        self._target_portal = target_portal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachTypeBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachTypeBlock):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachTypeBlock):
            return True

        return self.to_dict() != other.to_dict()
