# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class AttachNodeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attach_type': 'AttachType',
        'client_token': 'str',
        'node_id': 'str',
        'readonly': 'bool'
    }

    attribute_map = {
        'attach_type': 'attach_type',
        'client_token': 'client_token',
        'node_id': 'node_id',
        'readonly': 'readonly'
    }

    def __init__(self, attach_type=None, client_token=None, node_id=None, readonly=False, _configuration=None):  # noqa: E501
        """AttachNodeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attach_type = None
        self._client_token = None
        self._node_id = None
        self._readonly = None
        self.discriminator = None

        self.attach_type = attach_type
        if client_token is not None:
            self.client_token = client_token
        self.node_id = node_id
        if readonly is not None:
            self.readonly = readonly

    @property
    def attach_type(self):
        """Gets the attach_type of this AttachNodeRequest.  # noqa: E501


        :return: The attach_type of this AttachNodeRequest.  # noqa: E501
        :rtype: AttachType
        """
        return self._attach_type

    @attach_type.setter
    def attach_type(self, attach_type):
        """Sets the attach_type of this AttachNodeRequest.


        :param attach_type: The attach_type of this AttachNodeRequest.  # noqa: E501
        :type: AttachType
        """
        if self._configuration.client_side_validation and attach_type is None:
            raise ValueError("Invalid value for `attach_type`, must not be `None`")  # noqa: E501

        self._attach_type = attach_type

    @property
    def client_token(self):
        """Gets the client_token of this AttachNodeRequest.  # noqa: E501

        request token to ensure the idempotency of the request  # noqa: E501

        :return: The client_token of this AttachNodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AttachNodeRequest.

        request token to ensure the idempotency of the request  # noqa: E501

        :param client_token: The client_token of this AttachNodeRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def node_id(self):
        """Gets the node_id of this AttachNodeRequest.  # noqa: E501

        Node ID  # noqa: E501

        :return: The node_id of this AttachNodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AttachNodeRequest.

        Node ID  # noqa: E501

        :param node_id: The node_id of this AttachNodeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def readonly(self):
        """Gets the readonly of this AttachNodeRequest.  # noqa: E501


        :return: The readonly of this AttachNodeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this AttachNodeRequest.


        :param readonly: The readonly of this AttachNodeRequest.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachNodeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachNodeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachNodeRequest):
            return True

        return self.to_dict() != other.to_dict()
