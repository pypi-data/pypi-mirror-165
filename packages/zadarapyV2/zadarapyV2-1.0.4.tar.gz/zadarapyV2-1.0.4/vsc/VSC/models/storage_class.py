# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class StorageClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_capacity_bytes': 'int',
        'capacity_mode': 'CapacityMode',
        'created_at': 'datetime',
        'description': 'str',
        'health': 'StorageClassHealth',
        'health_info': 'str',
        'id': 'str',
        'is_default': 'bool',
        'name': 'str',
        'pool_count': 'int',
        'snapshot_count': 'int',
        'state': 'StorageClassState',
        'total_capacity_bytes': 'int',
        'updated_at': 'datetime',
        'volume_count': 'int',
        'volume_creation_flags': 'VolumeFlags',
        'vpsa_count': 'int'
    }

    attribute_map = {
        'available_capacity_bytes': 'available_capacity_bytes',
        'capacity_mode': 'capacity_mode',
        'created_at': 'created_at',
        'description': 'description',
        'health': 'health',
        'health_info': 'health_info',
        'id': 'id',
        'is_default': 'is_default',
        'name': 'name',
        'pool_count': 'pool_count',
        'snapshot_count': 'snapshot_count',
        'state': 'state',
        'total_capacity_bytes': 'total_capacity_bytes',
        'updated_at': 'updated_at',
        'volume_count': 'volume_count',
        'volume_creation_flags': 'volume_creation_flags',
        'vpsa_count': 'vpsa_count'
    }

    def __init__(self, available_capacity_bytes=None, capacity_mode=None, created_at=None, description=None, health=None, health_info=None, id=None, is_default=None, name=None, pool_count=None, snapshot_count=None, state=None, total_capacity_bytes=None, updated_at=None, volume_count=None, volume_creation_flags=None, vpsa_count=None, _configuration=None):  # noqa: E501
        """StorageClass - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._available_capacity_bytes = None
        self._capacity_mode = None
        self._created_at = None
        self._description = None
        self._health = None
        self._health_info = None
        self._id = None
        self._is_default = None
        self._name = None
        self._pool_count = None
        self._snapshot_count = None
        self._state = None
        self._total_capacity_bytes = None
        self._updated_at = None
        self._volume_count = None
        self._volume_creation_flags = None
        self._vpsa_count = None
        self.discriminator = None

        if available_capacity_bytes is not None:
            self.available_capacity_bytes = available_capacity_bytes
        if capacity_mode is not None:
            self.capacity_mode = capacity_mode
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if health is not None:
            self.health = health
        if health_info is not None:
            self.health_info = health_info
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if name is not None:
            self.name = name
        if pool_count is not None:
            self.pool_count = pool_count
        if snapshot_count is not None:
            self.snapshot_count = snapshot_count
        if state is not None:
            self.state = state
        if total_capacity_bytes is not None:
            self.total_capacity_bytes = total_capacity_bytes
        if updated_at is not None:
            self.updated_at = updated_at
        if volume_count is not None:
            self.volume_count = volume_count
        if volume_creation_flags is not None:
            self.volume_creation_flags = volume_creation_flags
        if vpsa_count is not None:
            self.vpsa_count = vpsa_count

    @property
    def available_capacity_bytes(self):
        """Gets the available_capacity_bytes of this StorageClass.  # noqa: E501

        Available capacity in bytes  # noqa: E501

        :return: The available_capacity_bytes of this StorageClass.  # noqa: E501
        :rtype: int
        """
        return self._available_capacity_bytes

    @available_capacity_bytes.setter
    def available_capacity_bytes(self, available_capacity_bytes):
        """Sets the available_capacity_bytes of this StorageClass.

        Available capacity in bytes  # noqa: E501

        :param available_capacity_bytes: The available_capacity_bytes of this StorageClass.  # noqa: E501
        :type: int
        """

        self._available_capacity_bytes = available_capacity_bytes

    @property
    def capacity_mode(self):
        """Gets the capacity_mode of this StorageClass.  # noqa: E501

        Storage class capacity mode  # noqa: E501

        :return: The capacity_mode of this StorageClass.  # noqa: E501
        :rtype: CapacityMode
        """
        return self._capacity_mode

    @capacity_mode.setter
    def capacity_mode(self, capacity_mode):
        """Sets the capacity_mode of this StorageClass.

        Storage class capacity mode  # noqa: E501

        :param capacity_mode: The capacity_mode of this StorageClass.  # noqa: E501
        :type: CapacityMode
        """

        self._capacity_mode = capacity_mode

    @property
    def created_at(self):
        """Gets the created_at of this StorageClass.  # noqa: E501

        Storage Class creation time  # noqa: E501

        :return: The created_at of this StorageClass.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StorageClass.

        Storage Class creation time  # noqa: E501

        :param created_at: The created_at of this StorageClass.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this StorageClass.  # noqa: E501

        Description of Storage Class  # noqa: E501

        :return: The description of this StorageClass.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageClass.

        Description of Storage Class  # noqa: E501

        :param description: The description of this StorageClass.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def health(self):
        """Gets the health of this StorageClass.  # noqa: E501

        Storage class health  # noqa: E501

        :return: The health of this StorageClass.  # noqa: E501
        :rtype: StorageClassHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StorageClass.

        Storage class health  # noqa: E501

        :param health: The health of this StorageClass.  # noqa: E501
        :type: StorageClassHealth
        """

        self._health = health

    @property
    def health_info(self):
        """Gets the health_info of this StorageClass.  # noqa: E501

        Additional info on Storage class health  # noqa: E501

        :return: The health_info of this StorageClass.  # noqa: E501
        :rtype: str
        """
        return self._health_info

    @health_info.setter
    def health_info(self, health_info):
        """Sets the health_info of this StorageClass.

        Additional info on Storage class health  # noqa: E501

        :param health_info: The health_info of this StorageClass.  # noqa: E501
        :type: str
        """

        self._health_info = health_info

    @property
    def id(self):
        """Gets the id of this StorageClass.  # noqa: E501

        Storage Class UUID  # noqa: E501

        :return: The id of this StorageClass.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageClass.

        Storage Class UUID  # noqa: E501

        :param id: The id of this StorageClass.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this StorageClass.  # noqa: E501

        Identifies if this is the default Storage Class  # noqa: E501

        :return: The is_default of this StorageClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this StorageClass.

        Identifies if this is the default Storage Class  # noqa: E501

        :param is_default: The is_default of this StorageClass.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this StorageClass.  # noqa: E501

        Storage Class name  # noqa: E501

        :return: The name of this StorageClass.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageClass.

        Storage Class name  # noqa: E501

        :param name: The name of this StorageClass.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pool_count(self):
        """Gets the pool_count of this StorageClass.  # noqa: E501

        Count of Pools in Storage Class  # noqa: E501

        :return: The pool_count of this StorageClass.  # noqa: E501
        :rtype: int
        """
        return self._pool_count

    @pool_count.setter
    def pool_count(self, pool_count):
        """Sets the pool_count of this StorageClass.

        Count of Pools in Storage Class  # noqa: E501

        :param pool_count: The pool_count of this StorageClass.  # noqa: E501
        :type: int
        """

        self._pool_count = pool_count

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this StorageClass.  # noqa: E501

        Count of Snapshots in Storage Class  # noqa: E501

        :return: The snapshot_count of this StorageClass.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this StorageClass.

        Count of Snapshots in Storage Class  # noqa: E501

        :param snapshot_count: The snapshot_count of this StorageClass.  # noqa: E501
        :type: int
        """

        self._snapshot_count = snapshot_count

    @property
    def state(self):
        """Gets the state of this StorageClass.  # noqa: E501

        Storage class state  # noqa: E501

        :return: The state of this StorageClass.  # noqa: E501
        :rtype: StorageClassState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StorageClass.

        Storage class state  # noqa: E501

        :param state: The state of this StorageClass.  # noqa: E501
        :type: StorageClassState
        """

        self._state = state

    @property
    def total_capacity_bytes(self):
        """Gets the total_capacity_bytes of this StorageClass.  # noqa: E501

        Total capacity in bytes  # noqa: E501

        :return: The total_capacity_bytes of this StorageClass.  # noqa: E501
        :rtype: int
        """
        return self._total_capacity_bytes

    @total_capacity_bytes.setter
    def total_capacity_bytes(self, total_capacity_bytes):
        """Sets the total_capacity_bytes of this StorageClass.

        Total capacity in bytes  # noqa: E501

        :param total_capacity_bytes: The total_capacity_bytes of this StorageClass.  # noqa: E501
        :type: int
        """

        self._total_capacity_bytes = total_capacity_bytes

    @property
    def updated_at(self):
        """Gets the updated_at of this StorageClass.  # noqa: E501

        Storage Class last updated timestamp  # noqa: E501

        :return: The updated_at of this StorageClass.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StorageClass.

        Storage Class last updated timestamp  # noqa: E501

        :param updated_at: The updated_at of this StorageClass.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def volume_count(self):
        """Gets the volume_count of this StorageClass.  # noqa: E501

        Count of Volumes in Storage Class  # noqa: E501

        :return: The volume_count of this StorageClass.  # noqa: E501
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this StorageClass.

        Count of Volumes in Storage Class  # noqa: E501

        :param volume_count: The volume_count of this StorageClass.  # noqa: E501
        :type: int
        """

        self._volume_count = volume_count

    @property
    def volume_creation_flags(self):
        """Gets the volume_creation_flags of this StorageClass.  # noqa: E501

        Volume Creation Flags  # noqa: E501

        :return: The volume_creation_flags of this StorageClass.  # noqa: E501
        :rtype: VolumeFlags
        """
        return self._volume_creation_flags

    @volume_creation_flags.setter
    def volume_creation_flags(self, volume_creation_flags):
        """Sets the volume_creation_flags of this StorageClass.

        Volume Creation Flags  # noqa: E501

        :param volume_creation_flags: The volume_creation_flags of this StorageClass.  # noqa: E501
        :type: VolumeFlags
        """

        self._volume_creation_flags = volume_creation_flags

    @property
    def vpsa_count(self):
        """Gets the vpsa_count of this StorageClass.  # noqa: E501

        Count of VPSAs in Storage class  # noqa: E501

        :return: The vpsa_count of this StorageClass.  # noqa: E501
        :rtype: int
        """
        return self._vpsa_count

    @vpsa_count.setter
    def vpsa_count(self, vpsa_count):
        """Sets the vpsa_count of this StorageClass.

        Count of VPSAs in Storage class  # noqa: E501

        :param vpsa_count: The vpsa_count of this StorageClass.  # noqa: E501
        :type: int
        """

        self._vpsa_count = vpsa_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageClass):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageClass):
            return True

        return self.to_dict() != other.to_dict()
