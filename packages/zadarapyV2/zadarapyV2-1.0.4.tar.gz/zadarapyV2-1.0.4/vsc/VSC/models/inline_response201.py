# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class InlineResponse201(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attach_type': 'AttachType',
        'attach_type_block': 'AttachTypeBlock',
        'attach_type_nas': 'AttachTypeNas',
        'node_id': 'str',
        'volume_id': 'str'
    }

    attribute_map = {
        'attach_type': 'attach_type',
        'attach_type_block': 'attach_type_block',
        'attach_type_nas': 'attach_type_nas',
        'node_id': 'node_id',
        'volume_id': 'volume_id'
    }

    def __init__(self, attach_type=None, attach_type_block=None, attach_type_nas=None, node_id=None, volume_id=None, _configuration=None):  # noqa: E501
        """InlineResponse201 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attach_type = None
        self._attach_type_block = None
        self._attach_type_nas = None
        self._node_id = None
        self._volume_id = None
        self.discriminator = None

        if attach_type is not None:
            self.attach_type = attach_type
        if attach_type_block is not None:
            self.attach_type_block = attach_type_block
        if attach_type_nas is not None:
            self.attach_type_nas = attach_type_nas
        if node_id is not None:
            self.node_id = node_id
        if volume_id is not None:
            self.volume_id = volume_id

    @property
    def attach_type(self):
        """Gets the attach_type of this InlineResponse201.  # noqa: E501


        :return: The attach_type of this InlineResponse201.  # noqa: E501
        :rtype: AttachType
        """
        return self._attach_type

    @attach_type.setter
    def attach_type(self, attach_type):
        """Sets the attach_type of this InlineResponse201.


        :param attach_type: The attach_type of this InlineResponse201.  # noqa: E501
        :type: AttachType
        """

        self._attach_type = attach_type

    @property
    def attach_type_block(self):
        """Gets the attach_type_block of this InlineResponse201.  # noqa: E501


        :return: The attach_type_block of this InlineResponse201.  # noqa: E501
        :rtype: AttachTypeBlock
        """
        return self._attach_type_block

    @attach_type_block.setter
    def attach_type_block(self, attach_type_block):
        """Sets the attach_type_block of this InlineResponse201.


        :param attach_type_block: The attach_type_block of this InlineResponse201.  # noqa: E501
        :type: AttachTypeBlock
        """

        self._attach_type_block = attach_type_block

    @property
    def attach_type_nas(self):
        """Gets the attach_type_nas of this InlineResponse201.  # noqa: E501


        :return: The attach_type_nas of this InlineResponse201.  # noqa: E501
        :rtype: AttachTypeNas
        """
        return self._attach_type_nas

    @attach_type_nas.setter
    def attach_type_nas(self, attach_type_nas):
        """Sets the attach_type_nas of this InlineResponse201.


        :param attach_type_nas: The attach_type_nas of this InlineResponse201.  # noqa: E501
        :type: AttachTypeNas
        """

        self._attach_type_nas = attach_type_nas

    @property
    def node_id(self):
        """Gets the node_id of this InlineResponse201.  # noqa: E501

        Node ID  # noqa: E501

        :return: The node_id of this InlineResponse201.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this InlineResponse201.

        Node ID  # noqa: E501

        :param node_id: The node_id of this InlineResponse201.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def volume_id(self):
        """Gets the volume_id of this InlineResponse201.  # noqa: E501

        Volume ID  # noqa: E501

        :return: The volume_id of this InlineResponse201.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this InlineResponse201.

        Volume ID  # noqa: E501

        :param volume_id: The volume_id of this InlineResponse201.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse201, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse201):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse201):
            return True

        return self.to_dict() != other.to_dict()
