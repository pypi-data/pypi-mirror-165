# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class NewVolumeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_token': 'str',
        'description': 'str',
        'name': 'str',
        'size_gi_b': 'int',
        'storage_class_id': 'str',
        'tags': 'TagKeyValues',
        'volume_flags': 'VolumeFlags',
        'volume_type': 'VolumeType'
    }

    attribute_map = {
        'client_token': 'client_token',
        'description': 'description',
        'name': 'name',
        'size_gi_b': 'size_GiB',
        'storage_class_id': 'storage_class_id',
        'tags': 'tags',
        'volume_flags': 'volume_flags',
        'volume_type': 'volume_type'
    }

    def __init__(self, client_token=None, description=None, name=None, size_gi_b=None, storage_class_id=None, tags=None, volume_flags=None, volume_type=None, _configuration=None):  # noqa: E501
        """NewVolumeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_token = None
        self._description = None
        self._name = None
        self._size_gi_b = None
        self._storage_class_id = None
        self._tags = None
        self._volume_flags = None
        self._volume_type = None
        self.discriminator = None

        if client_token is not None:
            self.client_token = client_token
        if description is not None:
            self.description = description
        self.name = name
        self.size_gi_b = size_gi_b
        if storage_class_id is not None:
            self.storage_class_id = storage_class_id
        if tags is not None:
            self.tags = tags
        if volume_flags is not None:
            self.volume_flags = volume_flags
        self.volume_type = volume_type

    @property
    def client_token(self):
        """Gets the client_token of this NewVolumeRequest.  # noqa: E501

        request token to ensure the idempotency of the request  # noqa: E501

        :return: The client_token of this NewVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this NewVolumeRequest.

        request token to ensure the idempotency of the request  # noqa: E501

        :param client_token: The client_token of this NewVolumeRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this NewVolumeRequest.  # noqa: E501

        Description of Volume  # noqa: E501

        :return: The description of this NewVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewVolumeRequest.

        Description of Volume  # noqa: E501

        :param description: The description of this NewVolumeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this NewVolumeRequest.  # noqa: E501

        Name of Volume  # noqa: E501

        :return: The name of this NewVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewVolumeRequest.

        Name of Volume  # noqa: E501

        :param name: The name of this NewVolumeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size_gi_b(self):
        """Gets the size_gi_b of this NewVolumeRequest.  # noqa: E501

        Volume Size in GiB  # noqa: E501

        :return: The size_gi_b of this NewVolumeRequest.  # noqa: E501
        :rtype: int
        """
        return self._size_gi_b

    @size_gi_b.setter
    def size_gi_b(self, size_gi_b):
        """Sets the size_gi_b of this NewVolumeRequest.

        Volume Size in GiB  # noqa: E501

        :param size_gi_b: The size_gi_b of this NewVolumeRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and size_gi_b is None:
            raise ValueError("Invalid value for `size_gi_b`, must not be `None`")  # noqa: E501

        self._size_gi_b = size_gi_b

    @property
    def storage_class_id(self):
        """Gets the storage_class_id of this NewVolumeRequest.  # noqa: E501

        Storage Class ID  # noqa: E501

        :return: The storage_class_id of this NewVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_class_id

    @storage_class_id.setter
    def storage_class_id(self, storage_class_id):
        """Sets the storage_class_id of this NewVolumeRequest.

        Storage Class ID  # noqa: E501

        :param storage_class_id: The storage_class_id of this NewVolumeRequest.  # noqa: E501
        :type: str
        """

        self._storage_class_id = storage_class_id

    @property
    def tags(self):
        """Gets the tags of this NewVolumeRequest.  # noqa: E501

        Tag key/values to be added to volume  # noqa: E501

        :return: The tags of this NewVolumeRequest.  # noqa: E501
        :rtype: TagKeyValues
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NewVolumeRequest.

        Tag key/values to be added to volume  # noqa: E501

        :param tags: The tags of this NewVolumeRequest.  # noqa: E501
        :type: TagKeyValues
        """

        self._tags = tags

    @property
    def volume_flags(self):
        """Gets the volume_flags of this NewVolumeRequest.  # noqa: E501

        If specified, these Flags are used or else Storage Class flags are used  # noqa: E501

        :return: The volume_flags of this NewVolumeRequest.  # noqa: E501
        :rtype: VolumeFlags
        """
        return self._volume_flags

    @volume_flags.setter
    def volume_flags(self, volume_flags):
        """Sets the volume_flags of this NewVolumeRequest.

        If specified, these Flags are used or else Storage Class flags are used  # noqa: E501

        :param volume_flags: The volume_flags of this NewVolumeRequest.  # noqa: E501
        :type: VolumeFlags
        """

        self._volume_flags = volume_flags

    @property
    def volume_type(self):
        """Gets the volume_type of this NewVolumeRequest.  # noqa: E501

        Volume Type  # noqa: E501

        :return: The volume_type of this NewVolumeRequest.  # noqa: E501
        :rtype: VolumeType
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this NewVolumeRequest.

        Volume Type  # noqa: E501

        :param volume_type: The volume_type of this NewVolumeRequest.  # noqa: E501
        :type: VolumeType
        """
        if self._configuration.client_side_validation and volume_type is None:
            raise ValueError("Invalid value for `volume_type`, must not be `None`")  # noqa: E501

        self._volume_type = volume_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewVolumeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewVolumeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewVolumeRequest):
            return True

        return self.to_dict() != other.to_dict()
