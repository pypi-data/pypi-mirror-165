# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'description': 'str',
        'health': 'VolumeHealth',
        'id': 'str',
        'iscsi_lun': 'int',
        'iscsi_target': 'str',
        'name': 'str',
        'nfs_export_path': 'str',
        'size_gi_b': 'int',
        'smb_export_path': 'str',
        'state': 'VolumeState',
        'storage_class_id': 'str',
        'updated_at': 'datetime',
        'volume_flags': 'VolumeFlags',
        'volume_type': 'VolumeType',
        'vpsa_id': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'description': 'description',
        'health': 'health',
        'id': 'id',
        'iscsi_lun': 'iscsi_lun',
        'iscsi_target': 'iscsi_target',
        'name': 'name',
        'nfs_export_path': 'nfs_export_path',
        'size_gi_b': 'size_GiB',
        'smb_export_path': 'smb_export_path',
        'state': 'state',
        'storage_class_id': 'storage_class_id',
        'updated_at': 'updated_at',
        'volume_flags': 'volume_flags',
        'volume_type': 'volume_type',
        'vpsa_id': 'vpsa_id'
    }

    def __init__(self, created_at=None, description=None, health=None, id=None, iscsi_lun=None, iscsi_target=None, name=None, nfs_export_path=None, size_gi_b=None, smb_export_path=None, state=None, storage_class_id=None, updated_at=None, volume_flags=None, volume_type=None, vpsa_id=None, _configuration=None):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._description = None
        self._health = None
        self._id = None
        self._iscsi_lun = None
        self._iscsi_target = None
        self._name = None
        self._nfs_export_path = None
        self._size_gi_b = None
        self._smb_export_path = None
        self._state = None
        self._storage_class_id = None
        self._updated_at = None
        self._volume_flags = None
        self._volume_type = None
        self._vpsa_id = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if health is not None:
            self.health = health
        if id is not None:
            self.id = id
        if iscsi_lun is not None:
            self.iscsi_lun = iscsi_lun
        if iscsi_target is not None:
            self.iscsi_target = iscsi_target
        if name is not None:
            self.name = name
        if nfs_export_path is not None:
            self.nfs_export_path = nfs_export_path
        if size_gi_b is not None:
            self.size_gi_b = size_gi_b
        if smb_export_path is not None:
            self.smb_export_path = smb_export_path
        if state is not None:
            self.state = state
        if storage_class_id is not None:
            self.storage_class_id = storage_class_id
        if updated_at is not None:
            self.updated_at = updated_at
        if volume_flags is not None:
            self.volume_flags = volume_flags
        if volume_type is not None:
            self.volume_type = volume_type
        if vpsa_id is not None:
            self.vpsa_id = vpsa_id

    @property
    def created_at(self):
        """Gets the created_at of this Volume.  # noqa: E501

        Volume creation time  # noqa: E501

        :return: The created_at of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Volume.

        Volume creation time  # noqa: E501

        :param created_at: The created_at of this Volume.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Volume.  # noqa: E501

        Description of Volume  # noqa: E501

        :return: The description of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Volume.

        Description of Volume  # noqa: E501

        :param description: The description of this Volume.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def health(self):
        """Gets the health of this Volume.  # noqa: E501

        Volume health  # noqa: E501

        :return: The health of this Volume.  # noqa: E501
        :rtype: VolumeHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Volume.

        Volume health  # noqa: E501

        :param health: The health of this Volume.  # noqa: E501
        :type: VolumeHealth
        """

        self._health = health

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501

        Volume UUID  # noqa: E501

        :return: The id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.

        Volume UUID  # noqa: E501

        :param id: The id of this Volume.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def iscsi_lun(self):
        """Gets the iscsi_lun of this Volume.  # noqa: E501

        iSCSI LUN number for a block volume  # noqa: E501

        :return: The iscsi_lun of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._iscsi_lun

    @iscsi_lun.setter
    def iscsi_lun(self, iscsi_lun):
        """Sets the iscsi_lun of this Volume.

        iSCSI LUN number for a block volume  # noqa: E501

        :param iscsi_lun: The iscsi_lun of this Volume.  # noqa: E501
        :type: int
        """

        self._iscsi_lun = iscsi_lun

    @property
    def iscsi_target(self):
        """Gets the iscsi_target of this Volume.  # noqa: E501

        iSCSI/iSER Target co-ordinates with VPSA target IQN for a block volume  # noqa: E501

        :return: The iscsi_target of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._iscsi_target

    @iscsi_target.setter
    def iscsi_target(self, iscsi_target):
        """Sets the iscsi_target of this Volume.

        iSCSI/iSER Target co-ordinates with VPSA target IQN for a block volume  # noqa: E501

        :param iscsi_target: The iscsi_target of this Volume.  # noqa: E501
        :type: str
        """

        self._iscsi_target = iscsi_target

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501

        Volume display name  # noqa: E501

        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.

        Volume display name  # noqa: E501

        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nfs_export_path(self):
        """Gets the nfs_export_path of this Volume.  # noqa: E501

        NFS Share export path on IP  # noqa: E501

        :return: The nfs_export_path of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._nfs_export_path

    @nfs_export_path.setter
    def nfs_export_path(self, nfs_export_path):
        """Sets the nfs_export_path of this Volume.

        NFS Share export path on IP  # noqa: E501

        :param nfs_export_path: The nfs_export_path of this Volume.  # noqa: E501
        :type: str
        """

        self._nfs_export_path = nfs_export_path

    @property
    def size_gi_b(self):
        """Gets the size_gi_b of this Volume.  # noqa: E501

        Volume Size in GiB  # noqa: E501

        :return: The size_gi_b of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._size_gi_b

    @size_gi_b.setter
    def size_gi_b(self, size_gi_b):
        """Sets the size_gi_b of this Volume.

        Volume Size in GiB  # noqa: E501

        :param size_gi_b: The size_gi_b of this Volume.  # noqa: E501
        :type: int
        """

        self._size_gi_b = size_gi_b

    @property
    def smb_export_path(self):
        """Gets the smb_export_path of this Volume.  # noqa: E501

        SMB Share export path on IP  # noqa: E501

        :return: The smb_export_path of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._smb_export_path

    @smb_export_path.setter
    def smb_export_path(self, smb_export_path):
        """Sets the smb_export_path of this Volume.

        SMB Share export path on IP  # noqa: E501

        :param smb_export_path: The smb_export_path of this Volume.  # noqa: E501
        :type: str
        """

        self._smb_export_path = smb_export_path

    @property
    def state(self):
        """Gets the state of this Volume.  # noqa: E501

        Volume state  # noqa: E501

        :return: The state of this Volume.  # noqa: E501
        :rtype: VolumeState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.

        Volume state  # noqa: E501

        :param state: The state of this Volume.  # noqa: E501
        :type: VolumeState
        """

        self._state = state

    @property
    def storage_class_id(self):
        """Gets the storage_class_id of this Volume.  # noqa: E501

        Storage Class ID  # noqa: E501

        :return: The storage_class_id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._storage_class_id

    @storage_class_id.setter
    def storage_class_id(self, storage_class_id):
        """Sets the storage_class_id of this Volume.

        Storage Class ID  # noqa: E501

        :param storage_class_id: The storage_class_id of this Volume.  # noqa: E501
        :type: str
        """

        self._storage_class_id = storage_class_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Volume.  # noqa: E501

        Volume last updated timestamp at VSC  # noqa: E501

        :return: The updated_at of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Volume.

        Volume last updated timestamp at VSC  # noqa: E501

        :param updated_at: The updated_at of this Volume.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def volume_flags(self):
        """Gets the volume_flags of this Volume.  # noqa: E501

        Volume Flags  # noqa: E501

        :return: The volume_flags of this Volume.  # noqa: E501
        :rtype: VolumeFlags
        """
        return self._volume_flags

    @volume_flags.setter
    def volume_flags(self, volume_flags):
        """Sets the volume_flags of this Volume.

        Volume Flags  # noqa: E501

        :param volume_flags: The volume_flags of this Volume.  # noqa: E501
        :type: VolumeFlags
        """

        self._volume_flags = volume_flags

    @property
    def volume_type(self):
        """Gets the volume_type of this Volume.  # noqa: E501

        Volume Type  # noqa: E501

        :return: The volume_type of this Volume.  # noqa: E501
        :rtype: VolumeType
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this Volume.

        Volume Type  # noqa: E501

        :param volume_type: The volume_type of this Volume.  # noqa: E501
        :type: VolumeType
        """

        self._volume_type = volume_type

    @property
    def vpsa_id(self):
        """Gets the vpsa_id of this Volume.  # noqa: E501

        VPSA ID  # noqa: E501

        :return: The vpsa_id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_id

    @vpsa_id.setter
    def vpsa_id(self, vpsa_id):
        """Sets the vpsa_id of this Volume.

        VPSA ID  # noqa: E501

        :param vpsa_id: The vpsa_id of this Volume.  # noqa: E501
        :type: str
        """

        self._vpsa_id = vpsa_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Volume):
            return True

        return self.to_dict() != other.to_dict()
