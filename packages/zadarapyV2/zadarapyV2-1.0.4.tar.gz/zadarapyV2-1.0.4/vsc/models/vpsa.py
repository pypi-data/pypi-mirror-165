# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class Vpsa(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iqn': 'str',
        'allocation_disabled': 'bool',
        'available_capacity_bytes': 'int',
        'capacity_mode': 'CapacityMode',
        'chap_secret': 'str',
        'chap_user': 'str',
        'created_at': 'datetime',
        'description': 'str',
        'host_name': 'str',
        'id': 'str',
        'in_maintenance': 'bool',
        'name': 'str',
        'pool_count': 'int',
        'snapshot_count': 'int',
        'software_version': 'str',
        'state': 'VpsaState',
        'token': 'str',
        'total_capacity_bytes': 'int',
        'updated_at': 'datetime',
        'volume_count': 'int'
    }

    attribute_map = {
        'iqn': 'IQN',
        'allocation_disabled': 'allocation_disabled',
        'available_capacity_bytes': 'available_capacity_bytes',
        'capacity_mode': 'capacity_mode',
        'chap_secret': 'chap_secret',
        'chap_user': 'chap_user',
        'created_at': 'created_at',
        'description': 'description',
        'host_name': 'host_name',
        'id': 'id',
        'in_maintenance': 'in_maintenance',
        'name': 'name',
        'pool_count': 'pool_count',
        'snapshot_count': 'snapshot_count',
        'software_version': 'software_version',
        'state': 'state',
        'token': 'token',
        'total_capacity_bytes': 'total_capacity_bytes',
        'updated_at': 'updated_at',
        'volume_count': 'volume_count'
    }

    def __init__(self, iqn=None, allocation_disabled=None, available_capacity_bytes=None, capacity_mode=None, chap_secret=None, chap_user=None, created_at=None, description=None, host_name=None, id=None, in_maintenance=None, name=None, pool_count=None, snapshot_count=None, software_version=None, state=None, token=None, total_capacity_bytes=None, updated_at=None, volume_count=None, _configuration=None):  # noqa: E501
        """Vpsa - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._iqn = None
        self._allocation_disabled = None
        self._available_capacity_bytes = None
        self._capacity_mode = None
        self._chap_secret = None
        self._chap_user = None
        self._created_at = None
        self._description = None
        self._host_name = None
        self._id = None
        self._in_maintenance = None
        self._name = None
        self._pool_count = None
        self._snapshot_count = None
        self._software_version = None
        self._state = None
        self._token = None
        self._total_capacity_bytes = None
        self._updated_at = None
        self._volume_count = None
        self.discriminator = None

        if iqn is not None:
            self.iqn = iqn
        if allocation_disabled is not None:
            self.allocation_disabled = allocation_disabled
        if available_capacity_bytes is not None:
            self.available_capacity_bytes = available_capacity_bytes
        if capacity_mode is not None:
            self.capacity_mode = capacity_mode
        if chap_secret is not None:
            self.chap_secret = chap_secret
        if chap_user is not None:
            self.chap_user = chap_user
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if host_name is not None:
            self.host_name = host_name
        if id is not None:
            self.id = id
        if in_maintenance is not None:
            self.in_maintenance = in_maintenance
        if name is not None:
            self.name = name
        if pool_count is not None:
            self.pool_count = pool_count
        if snapshot_count is not None:
            self.snapshot_count = snapshot_count
        if software_version is not None:
            self.software_version = software_version
        if state is not None:
            self.state = state
        if token is not None:
            self.token = token
        if total_capacity_bytes is not None:
            self.total_capacity_bytes = total_capacity_bytes
        if updated_at is not None:
            self.updated_at = updated_at
        if volume_count is not None:
            self.volume_count = volume_count

    @property
    def iqn(self):
        """Gets the iqn of this Vpsa.  # noqa: E501

        VPSA iSCSI/iSER Target IQN  # noqa: E501

        :return: The iqn of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this Vpsa.

        VPSA iSCSI/iSER Target IQN  # noqa: E501

        :param iqn: The iqn of this Vpsa.  # noqa: E501
        :type: str
        """

        self._iqn = iqn

    @property
    def allocation_disabled(self):
        """Gets the allocation_disabled of this Vpsa.  # noqa: E501

        Flag indicating if new volume/snapshot creation from this VPSA is allowed or not  # noqa: E501

        :return: The allocation_disabled of this Vpsa.  # noqa: E501
        :rtype: bool
        """
        return self._allocation_disabled

    @allocation_disabled.setter
    def allocation_disabled(self, allocation_disabled):
        """Sets the allocation_disabled of this Vpsa.

        Flag indicating if new volume/snapshot creation from this VPSA is allowed or not  # noqa: E501

        :param allocation_disabled: The allocation_disabled of this Vpsa.  # noqa: E501
        :type: bool
        """

        self._allocation_disabled = allocation_disabled

    @property
    def available_capacity_bytes(self):
        """Gets the available_capacity_bytes of this Vpsa.  # noqa: E501

        Available capacity in bytes  # noqa: E501

        :return: The available_capacity_bytes of this Vpsa.  # noqa: E501
        :rtype: int
        """
        return self._available_capacity_bytes

    @available_capacity_bytes.setter
    def available_capacity_bytes(self, available_capacity_bytes):
        """Sets the available_capacity_bytes of this Vpsa.

        Available capacity in bytes  # noqa: E501

        :param available_capacity_bytes: The available_capacity_bytes of this Vpsa.  # noqa: E501
        :type: int
        """

        self._available_capacity_bytes = available_capacity_bytes

    @property
    def capacity_mode(self):
        """Gets the capacity_mode of this Vpsa.  # noqa: E501

        VPSA capacity mode  # noqa: E501

        :return: The capacity_mode of this Vpsa.  # noqa: E501
        :rtype: CapacityMode
        """
        return self._capacity_mode

    @capacity_mode.setter
    def capacity_mode(self, capacity_mode):
        """Sets the capacity_mode of this Vpsa.

        VPSA capacity mode  # noqa: E501

        :param capacity_mode: The capacity_mode of this Vpsa.  # noqa: E501
        :type: CapacityMode
        """

        self._capacity_mode = capacity_mode

    @property
    def chap_secret(self):
        """Gets the chap_secret of this Vpsa.  # noqa: E501

        CHAP secret  # noqa: E501

        :return: The chap_secret of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._chap_secret

    @chap_secret.setter
    def chap_secret(self, chap_secret):
        """Sets the chap_secret of this Vpsa.

        CHAP secret  # noqa: E501

        :param chap_secret: The chap_secret of this Vpsa.  # noqa: E501
        :type: str
        """

        self._chap_secret = chap_secret

    @property
    def chap_user(self):
        """Gets the chap_user of this Vpsa.  # noqa: E501

        CHAP user  # noqa: E501

        :return: The chap_user of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._chap_user

    @chap_user.setter
    def chap_user(self, chap_user):
        """Sets the chap_user of this Vpsa.

        CHAP user  # noqa: E501

        :param chap_user: The chap_user of this Vpsa.  # noqa: E501
        :type: str
        """

        self._chap_user = chap_user

    @property
    def created_at(self):
        """Gets the created_at of this Vpsa.  # noqa: E501

        Time at which VPSA record was created in VSC DB (add member to Storage Class)  # noqa: E501

        :return: The created_at of this Vpsa.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Vpsa.

        Time at which VPSA record was created in VSC DB (add member to Storage Class)  # noqa: E501

        :param created_at: The created_at of this Vpsa.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Vpsa.  # noqa: E501

        VPSA Description  # noqa: E501

        :return: The description of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vpsa.

        VPSA Description  # noqa: E501

        :param description: The description of this Vpsa.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host_name(self):
        """Gets the host_name of this Vpsa.  # noqa: E501

        VPSA IP/hostname through which it can be connected  # noqa: E501

        :return: The host_name of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Vpsa.

        VPSA IP/hostname through which it can be connected  # noqa: E501

        :param host_name: The host_name of this Vpsa.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def id(self):
        """Gets the id of this Vpsa.  # noqa: E501

        VPSA UUID  # noqa: E501

        :return: The id of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vpsa.

        VPSA UUID  # noqa: E501

        :param id: The id of this Vpsa.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_maintenance(self):
        """Gets the in_maintenance of this Vpsa.  # noqa: E501

        Flag indicating if VPSA is undergoing maintenance - no health checks/allocation on VPSA  # noqa: E501

        :return: The in_maintenance of this Vpsa.  # noqa: E501
        :rtype: bool
        """
        return self._in_maintenance

    @in_maintenance.setter
    def in_maintenance(self, in_maintenance):
        """Sets the in_maintenance of this Vpsa.

        Flag indicating if VPSA is undergoing maintenance - no health checks/allocation on VPSA  # noqa: E501

        :param in_maintenance: The in_maintenance of this Vpsa.  # noqa: E501
        :type: bool
        """

        self._in_maintenance = in_maintenance

    @property
    def name(self):
        """Gets the name of this Vpsa.  # noqa: E501

        VPSA display name  # noqa: E501

        :return: The name of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vpsa.

        VPSA display name  # noqa: E501

        :param name: The name of this Vpsa.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pool_count(self):
        """Gets the pool_count of this Vpsa.  # noqa: E501

        Count of Pools in VPSA  # noqa: E501

        :return: The pool_count of this Vpsa.  # noqa: E501
        :rtype: int
        """
        return self._pool_count

    @pool_count.setter
    def pool_count(self, pool_count):
        """Sets the pool_count of this Vpsa.

        Count of Pools in VPSA  # noqa: E501

        :param pool_count: The pool_count of this Vpsa.  # noqa: E501
        :type: int
        """

        self._pool_count = pool_count

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this Vpsa.  # noqa: E501

        Count of Snapshots in VPSA  # noqa: E501

        :return: The snapshot_count of this Vpsa.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this Vpsa.

        Count of Snapshots in VPSA  # noqa: E501

        :param snapshot_count: The snapshot_count of this Vpsa.  # noqa: E501
        :type: int
        """

        self._snapshot_count = snapshot_count

    @property
    def software_version(self):
        """Gets the software_version of this Vpsa.  # noqa: E501

        VPSA software version (like yy.mm-build#)  # noqa: E501

        :return: The software_version of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this Vpsa.

        VPSA software version (like yy.mm-build#)  # noqa: E501

        :param software_version: The software_version of this Vpsa.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def state(self):
        """Gets the state of this Vpsa.  # noqa: E501

        VPSA State  # noqa: E501

        :return: The state of this Vpsa.  # noqa: E501
        :rtype: VpsaState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Vpsa.

        VPSA State  # noqa: E501

        :param state: The state of this Vpsa.  # noqa: E501
        :type: VpsaState
        """

        self._state = state

    @property
    def token(self):
        """Gets the token of this Vpsa.  # noqa: E501

        VPSA auth token  # noqa: E501

        :return: The token of this Vpsa.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Vpsa.

        VPSA auth token  # noqa: E501

        :param token: The token of this Vpsa.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def total_capacity_bytes(self):
        """Gets the total_capacity_bytes of this Vpsa.  # noqa: E501

        Total capacity in bytes  # noqa: E501

        :return: The total_capacity_bytes of this Vpsa.  # noqa: E501
        :rtype: int
        """
        return self._total_capacity_bytes

    @total_capacity_bytes.setter
    def total_capacity_bytes(self, total_capacity_bytes):
        """Sets the total_capacity_bytes of this Vpsa.

        Total capacity in bytes  # noqa: E501

        :param total_capacity_bytes: The total_capacity_bytes of this Vpsa.  # noqa: E501
        :type: int
        """

        self._total_capacity_bytes = total_capacity_bytes

    @property
    def updated_at(self):
        """Gets the updated_at of this Vpsa.  # noqa: E501

        Last update time for VPSA record at VSC  # noqa: E501

        :return: The updated_at of this Vpsa.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Vpsa.

        Last update time for VPSA record at VSC  # noqa: E501

        :param updated_at: The updated_at of this Vpsa.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def volume_count(self):
        """Gets the volume_count of this Vpsa.  # noqa: E501

        Count of Volumes in VPSA  # noqa: E501

        :return: The volume_count of this Vpsa.  # noqa: E501
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this Vpsa.

        Count of Volumes in VPSA  # noqa: E501

        :param volume_count: The volume_count of this Vpsa.  # noqa: E501
        :type: int
        """

        self._volume_count = volume_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vpsa, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vpsa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vpsa):
            return True

        return self.to_dict() != other.to_dict()
