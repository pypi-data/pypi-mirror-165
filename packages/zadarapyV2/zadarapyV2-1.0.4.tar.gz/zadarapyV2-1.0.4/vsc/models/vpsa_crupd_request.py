# coding: utf-8

"""
    vsc

    Provides VSC APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vsc.configuration import Configuration


class VpsaCrupdRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocation_disabled': 'bool',
        'client_token': 'str',
        'description': 'str',
        'host_name': 'str',
        'in_maintenance': 'bool',
        'name': 'str',
        'token': 'str'
    }

    attribute_map = {
        'allocation_disabled': 'allocation_disabled',
        'client_token': 'client_token',
        'description': 'description',
        'host_name': 'host_name',
        'in_maintenance': 'in_maintenance',
        'name': 'name',
        'token': 'token'
    }

    def __init__(self, allocation_disabled=None, client_token=None, description=None, host_name=None, in_maintenance=None, name=None, token=None, _configuration=None):  # noqa: E501
        """VpsaCrupdRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allocation_disabled = None
        self._client_token = None
        self._description = None
        self._host_name = None
        self._in_maintenance = None
        self._name = None
        self._token = None
        self.discriminator = None

        if allocation_disabled is not None:
            self.allocation_disabled = allocation_disabled
        if client_token is not None:
            self.client_token = client_token
        if description is not None:
            self.description = description
        if host_name is not None:
            self.host_name = host_name
        if in_maintenance is not None:
            self.in_maintenance = in_maintenance
        if name is not None:
            self.name = name
        if token is not None:
            self.token = token

    @property
    def allocation_disabled(self):
        """Gets the allocation_disabled of this VpsaCrupdRequest.  # noqa: E501

        Flag indicating if new volume/snapshot creation from this VPSA is allowed or not  # noqa: E501

        :return: The allocation_disabled of this VpsaCrupdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allocation_disabled

    @allocation_disabled.setter
    def allocation_disabled(self, allocation_disabled):
        """Sets the allocation_disabled of this VpsaCrupdRequest.

        Flag indicating if new volume/snapshot creation from this VPSA is allowed or not  # noqa: E501

        :param allocation_disabled: The allocation_disabled of this VpsaCrupdRequest.  # noqa: E501
        :type: bool
        """

        self._allocation_disabled = allocation_disabled

    @property
    def client_token(self):
        """Gets the client_token of this VpsaCrupdRequest.  # noqa: E501

        request token to ensure the idempotency of the request  # noqa: E501

        :return: The client_token of this VpsaCrupdRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this VpsaCrupdRequest.

        request token to ensure the idempotency of the request  # noqa: E501

        :param client_token: The client_token of this VpsaCrupdRequest.  # noqa: E501
        :type: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this VpsaCrupdRequest.  # noqa: E501

        VPSA Description  # noqa: E501

        :return: The description of this VpsaCrupdRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VpsaCrupdRequest.

        VPSA Description  # noqa: E501

        :param description: The description of this VpsaCrupdRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host_name(self):
        """Gets the host_name of this VpsaCrupdRequest.  # noqa: E501

        VPSA IP/hostname through which it can be connected  # noqa: E501

        :return: The host_name of this VpsaCrupdRequest.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this VpsaCrupdRequest.

        VPSA IP/hostname through which it can be connected  # noqa: E501

        :param host_name: The host_name of this VpsaCrupdRequest.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def in_maintenance(self):
        """Gets the in_maintenance of this VpsaCrupdRequest.  # noqa: E501

        Flag indicating if VPSA is undergoing maintenance - no health checks/allocation on VPSA  # noqa: E501

        :return: The in_maintenance of this VpsaCrupdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._in_maintenance

    @in_maintenance.setter
    def in_maintenance(self, in_maintenance):
        """Sets the in_maintenance of this VpsaCrupdRequest.

        Flag indicating if VPSA is undergoing maintenance - no health checks/allocation on VPSA  # noqa: E501

        :param in_maintenance: The in_maintenance of this VpsaCrupdRequest.  # noqa: E501
        :type: bool
        """

        self._in_maintenance = in_maintenance

    @property
    def name(self):
        """Gets the name of this VpsaCrupdRequest.  # noqa: E501

        VPSA display name  # noqa: E501

        :return: The name of this VpsaCrupdRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VpsaCrupdRequest.

        VPSA display name  # noqa: E501

        :param name: The name of this VpsaCrupdRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def token(self):
        """Gets the token of this VpsaCrupdRequest.  # noqa: E501

        VPSA auth token  # noqa: E501

        :return: The token of this VpsaCrupdRequest.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this VpsaCrupdRequest.

        VPSA auth token  # noqa: E501

        :param token: The token of this VpsaCrupdRequest.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpsaCrupdRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpsaCrupdRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VpsaCrupdRequest):
            return True

        return self.to_dict() != other.to_dict()
