# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body156(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alertmode': 'int',
        'emergencymode': 'int',
        'capacityhistory': 'int',
        'autoexpand': 'str',
        'maxcapacity': 'str',
        'autoexpandby': 'str'
    }

    attribute_map = {
        'alertmode': 'alertmode',
        'emergencymode': 'emergencymode',
        'capacityhistory': 'capacityhistory',
        'autoexpand': 'autoexpand',
        'maxcapacity': 'maxcapacity',
        'autoexpandby': 'autoexpandby'
    }

    def __init__(self, alertmode=None, emergencymode=None, capacityhistory=None, autoexpand=None, maxcapacity=None, autoexpandby=None, _configuration=None):  # noqa: E501
        """Body156 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alertmode = None
        self._emergencymode = None
        self._capacityhistory = None
        self._autoexpand = None
        self._maxcapacity = None
        self._autoexpandby = None
        self.discriminator = None

        if alertmode is not None:
            self.alertmode = alertmode
        if emergencymode is not None:
            self.emergencymode = emergencymode
        if capacityhistory is not None:
            self.capacityhistory = capacityhistory
        if autoexpand is not None:
            self.autoexpand = autoexpand
        if maxcapacity is not None:
            self.maxcapacity = maxcapacity
        if autoexpandby is not None:
            self.autoexpandby = autoexpandby

    @property
    def alertmode(self):
        """Gets the alertmode of this Body156.  # noqa: E501


        :return: The alertmode of this Body156.  # noqa: E501
        :rtype: int
        """
        return self._alertmode

    @alertmode.setter
    def alertmode(self, alertmode):
        """Sets the alertmode of this Body156.


        :param alertmode: The alertmode of this Body156.  # noqa: E501
        :type: int
        """

        self._alertmode = alertmode

    @property
    def emergencymode(self):
        """Gets the emergencymode of this Body156.  # noqa: E501


        :return: The emergencymode of this Body156.  # noqa: E501
        :rtype: int
        """
        return self._emergencymode

    @emergencymode.setter
    def emergencymode(self, emergencymode):
        """Sets the emergencymode of this Body156.


        :param emergencymode: The emergencymode of this Body156.  # noqa: E501
        :type: int
        """

        self._emergencymode = emergencymode

    @property
    def capacityhistory(self):
        """Gets the capacityhistory of this Body156.  # noqa: E501


        :return: The capacityhistory of this Body156.  # noqa: E501
        :rtype: int
        """
        return self._capacityhistory

    @capacityhistory.setter
    def capacityhistory(self, capacityhistory):
        """Sets the capacityhistory of this Body156.


        :param capacityhistory: The capacityhistory of this Body156.  # noqa: E501
        :type: int
        """

        self._capacityhistory = capacityhistory

    @property
    def autoexpand(self):
        """Gets the autoexpand of this Body156.  # noqa: E501


        :return: The autoexpand of this Body156.  # noqa: E501
        :rtype: str
        """
        return self._autoexpand

    @autoexpand.setter
    def autoexpand(self, autoexpand):
        """Sets the autoexpand of this Body156.


        :param autoexpand: The autoexpand of this Body156.  # noqa: E501
        :type: str
        """

        self._autoexpand = autoexpand

    @property
    def maxcapacity(self):
        """Gets the maxcapacity of this Body156.  # noqa: E501


        :return: The maxcapacity of this Body156.  # noqa: E501
        :rtype: str
        """
        return self._maxcapacity

    @maxcapacity.setter
    def maxcapacity(self, maxcapacity):
        """Sets the maxcapacity of this Body156.


        :param maxcapacity: The maxcapacity of this Body156.  # noqa: E501
        :type: str
        """

        self._maxcapacity = maxcapacity

    @property
    def autoexpandby(self):
        """Gets the autoexpandby of this Body156.  # noqa: E501


        :return: The autoexpandby of this Body156.  # noqa: E501
        :rtype: str
        """
        return self._autoexpandby

    @autoexpandby.setter
    def autoexpandby(self, autoexpandby):
        """Sets the autoexpandby of this Body156.


        :param autoexpandby: The autoexpandby of this Body156.  # noqa: E501
        :type: str
        """

        self._autoexpandby = autoexpandby

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body156, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body156):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body156):
            return True

        return self.to_dict() != other.to_dict()
