# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body42(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'capacity': 'str',
        'cache': 'str',
        'cowcache': 'bool',
        'mode': 'str',
        'raid_groups': 'str',
        'pooltype': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'capacity': 'capacity',
        'cache': 'cache',
        'cowcache': 'cowcache',
        'mode': 'mode',
        'raid_groups': 'raid_groups',
        'pooltype': 'pooltype'
    }

    def __init__(self, display_name=None, capacity=None, cache=None, cowcache=None, mode=None, raid_groups=None, pooltype=None, _configuration=None):  # noqa: E501
        """Body42 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display_name = None
        self._capacity = None
        self._cache = None
        self._cowcache = None
        self._mode = None
        self._raid_groups = None
        self._pooltype = None
        self.discriminator = None

        self.display_name = display_name
        self.capacity = capacity
        if cache is not None:
            self.cache = cache
        if cowcache is not None:
            self.cowcache = cowcache
        if mode is not None:
            self.mode = mode
        self.raid_groups = raid_groups
        if pooltype is not None:
            self.pooltype = pooltype

    @property
    def display_name(self):
        """Gets the display_name of this Body42.  # noqa: E501


        :return: The display_name of this Body42.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Body42.


        :param display_name: The display_name of this Body42.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def capacity(self):
        """Gets the capacity of this Body42.  # noqa: E501


        :return: The capacity of this Body42.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Body42.


        :param capacity: The capacity of this Body42.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def cache(self):
        """Gets the cache of this Body42.  # noqa: E501


        :return: The cache of this Body42.  # noqa: E501
        :rtype: str
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Body42.


        :param cache: The cache of this Body42.  # noqa: E501
        :type: str
        """

        self._cache = cache

    @property
    def cowcache(self):
        """Gets the cowcache of this Body42.  # noqa: E501


        :return: The cowcache of this Body42.  # noqa: E501
        :rtype: bool
        """
        return self._cowcache

    @cowcache.setter
    def cowcache(self, cowcache):
        """Sets the cowcache of this Body42.


        :param cowcache: The cowcache of this Body42.  # noqa: E501
        :type: bool
        """

        self._cowcache = cowcache

    @property
    def mode(self):
        """Gets the mode of this Body42.  # noqa: E501


        :return: The mode of this Body42.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Body42.


        :param mode: The mode of this Body42.  # noqa: E501
        :type: str
        """
        allowed_values = ["stripe", "simple"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def raid_groups(self):
        """Gets the raid_groups of this Body42.  # noqa: E501


        :return: The raid_groups of this Body42.  # noqa: E501
        :rtype: str
        """
        return self._raid_groups

    @raid_groups.setter
    def raid_groups(self, raid_groups):
        """Sets the raid_groups of this Body42.


        :param raid_groups: The raid_groups of this Body42.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and raid_groups is None:
            raise ValueError("Invalid value for `raid_groups`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                raid_groups is not None and not re.search(r'^RaidGroup-[0-9]+$', raid_groups)):  # noqa: E501
            raise ValueError(r"Invalid value for `raid_groups`, must be a follow pattern or equal to `/^RaidGroup-[0-9]+$/`")  # noqa: E501

        self._raid_groups = raid_groups

    @property
    def pooltype(self):
        """Gets the pooltype of this Body42.  # noqa: E501


        :return: The pooltype of this Body42.  # noqa: E501
        :rtype: str
        """
        return self._pooltype

    @pooltype.setter
    def pooltype(self, pooltype):
        """Sets the pooltype of this Body42.


        :param pooltype: The pooltype of this Body42.  # noqa: E501
        :type: str
        """
        allowed_values = ["Transactional Workloads", "Repository Storage", "Archival Storage", "IOPs-Optimized", "Balanced", "Throughput-Optimized", "Depot"]  # noqa: E501
        if (self._configuration.client_side_validation and
                pooltype not in allowed_values):
            raise ValueError(
                "Invalid value for `pooltype` ({0}), must be one of {1}"  # noqa: E501
                .format(pooltype, allowed_values)
            )

        self._pooltype = pooltype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body42, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body42):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body42):
            return True

        return self.to_dict() != other.to_dict()
