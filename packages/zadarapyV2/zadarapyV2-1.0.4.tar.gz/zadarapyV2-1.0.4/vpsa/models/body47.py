# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body47(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacityhistory': 'int',
        'effectivecapacityhistory': 'int',
        'alertmode': 'int',
        'effectivealertmode': 'int',
        'protectedmode': 'int',
        'effectiveprotectedmode': 'int',
        'emergencymode': 'int',
        'effectiveemergencymode': 'int'
    }

    attribute_map = {
        'capacityhistory': 'capacityhistory',
        'effectivecapacityhistory': 'effectivecapacityhistory',
        'alertmode': 'alertmode',
        'effectivealertmode': 'effectivealertmode',
        'protectedmode': 'protectedmode',
        'effectiveprotectedmode': 'effectiveprotectedmode',
        'emergencymode': 'emergencymode',
        'effectiveemergencymode': 'effectiveemergencymode'
    }

    def __init__(self, capacityhistory=None, effectivecapacityhistory=None, alertmode=None, effectivealertmode=None, protectedmode=None, effectiveprotectedmode=None, emergencymode=None, effectiveemergencymode=None, _configuration=None):  # noqa: E501
        """Body47 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._capacityhistory = None
        self._effectivecapacityhistory = None
        self._alertmode = None
        self._effectivealertmode = None
        self._protectedmode = None
        self._effectiveprotectedmode = None
        self._emergencymode = None
        self._effectiveemergencymode = None
        self.discriminator = None

        if capacityhistory is not None:
            self.capacityhistory = capacityhistory
        if effectivecapacityhistory is not None:
            self.effectivecapacityhistory = effectivecapacityhistory
        if alertmode is not None:
            self.alertmode = alertmode
        if effectivealertmode is not None:
            self.effectivealertmode = effectivealertmode
        if protectedmode is not None:
            self.protectedmode = protectedmode
        if effectiveprotectedmode is not None:
            self.effectiveprotectedmode = effectiveprotectedmode
        if emergencymode is not None:
            self.emergencymode = emergencymode
        if effectiveemergencymode is not None:
            self.effectiveemergencymode = effectiveemergencymode

    @property
    def capacityhistory(self):
        """Gets the capacityhistory of this Body47.  # noqa: E501


        :return: The capacityhistory of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._capacityhistory

    @capacityhistory.setter
    def capacityhistory(self, capacityhistory):
        """Sets the capacityhistory of this Body47.


        :param capacityhistory: The capacityhistory of this Body47.  # noqa: E501
        :type: int
        """

        self._capacityhistory = capacityhistory

    @property
    def effectivecapacityhistory(self):
        """Gets the effectivecapacityhistory of this Body47.  # noqa: E501


        :return: The effectivecapacityhistory of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._effectivecapacityhistory

    @effectivecapacityhistory.setter
    def effectivecapacityhistory(self, effectivecapacityhistory):
        """Sets the effectivecapacityhistory of this Body47.


        :param effectivecapacityhistory: The effectivecapacityhistory of this Body47.  # noqa: E501
        :type: int
        """

        self._effectivecapacityhistory = effectivecapacityhistory

    @property
    def alertmode(self):
        """Gets the alertmode of this Body47.  # noqa: E501


        :return: The alertmode of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._alertmode

    @alertmode.setter
    def alertmode(self, alertmode):
        """Sets the alertmode of this Body47.


        :param alertmode: The alertmode of this Body47.  # noqa: E501
        :type: int
        """

        self._alertmode = alertmode

    @property
    def effectivealertmode(self):
        """Gets the effectivealertmode of this Body47.  # noqa: E501


        :return: The effectivealertmode of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._effectivealertmode

    @effectivealertmode.setter
    def effectivealertmode(self, effectivealertmode):
        """Sets the effectivealertmode of this Body47.


        :param effectivealertmode: The effectivealertmode of this Body47.  # noqa: E501
        :type: int
        """

        self._effectivealertmode = effectivealertmode

    @property
    def protectedmode(self):
        """Gets the protectedmode of this Body47.  # noqa: E501


        :return: The protectedmode of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._protectedmode

    @protectedmode.setter
    def protectedmode(self, protectedmode):
        """Sets the protectedmode of this Body47.


        :param protectedmode: The protectedmode of this Body47.  # noqa: E501
        :type: int
        """

        self._protectedmode = protectedmode

    @property
    def effectiveprotectedmode(self):
        """Gets the effectiveprotectedmode of this Body47.  # noqa: E501


        :return: The effectiveprotectedmode of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._effectiveprotectedmode

    @effectiveprotectedmode.setter
    def effectiveprotectedmode(self, effectiveprotectedmode):
        """Sets the effectiveprotectedmode of this Body47.


        :param effectiveprotectedmode: The effectiveprotectedmode of this Body47.  # noqa: E501
        :type: int
        """

        self._effectiveprotectedmode = effectiveprotectedmode

    @property
    def emergencymode(self):
        """Gets the emergencymode of this Body47.  # noqa: E501


        :return: The emergencymode of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._emergencymode

    @emergencymode.setter
    def emergencymode(self, emergencymode):
        """Sets the emergencymode of this Body47.


        :param emergencymode: The emergencymode of this Body47.  # noqa: E501
        :type: int
        """

        self._emergencymode = emergencymode

    @property
    def effectiveemergencymode(self):
        """Gets the effectiveemergencymode of this Body47.  # noqa: E501


        :return: The effectiveemergencymode of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._effectiveemergencymode

    @effectiveemergencymode.setter
    def effectiveemergencymode(self, effectiveemergencymode):
        """Sets the effectiveemergencymode of this Body47.


        :param effectiveemergencymode: The effectiveemergencymode of this Body47.  # noqa: E501
        :type: int
        """

        self._effectiveemergencymode = effectiveemergencymode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body47, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body47):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body47):
            return True

        return self.to_dict() != other.to_dict()
