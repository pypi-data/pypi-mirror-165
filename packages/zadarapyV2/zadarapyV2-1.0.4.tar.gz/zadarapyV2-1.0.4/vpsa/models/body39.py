# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body39(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'realm_kdc_servers': 'list[str]',
        'dns': 'str',
        'dns_lookup_realm': 'str',
        'dns_lookup_kdc': 'str',
        'add_to_ignored_domains': 'list[str]',
        'remove_from_ignored_domains': 'list[str]'
    }

    attribute_map = {
        'realm_kdc_servers': 'realm_kdc_servers',
        'dns': 'dns',
        'dns_lookup_realm': 'dns_lookup_realm',
        'dns_lookup_kdc': 'dns_lookup_kdc',
        'add_to_ignored_domains': 'add_to_ignored_domains',
        'remove_from_ignored_domains': 'remove_from_ignored_domains'
    }

    def __init__(self, realm_kdc_servers=None, dns=None, dns_lookup_realm=None, dns_lookup_kdc=None, add_to_ignored_domains=None, remove_from_ignored_domains=None, _configuration=None):  # noqa: E501
        """Body39 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._realm_kdc_servers = None
        self._dns = None
        self._dns_lookup_realm = None
        self._dns_lookup_kdc = None
        self._add_to_ignored_domains = None
        self._remove_from_ignored_domains = None
        self.discriminator = None

        if realm_kdc_servers is not None:
            self.realm_kdc_servers = realm_kdc_servers
        self.dns = dns
        if dns_lookup_realm is not None:
            self.dns_lookup_realm = dns_lookup_realm
        if dns_lookup_kdc is not None:
            self.dns_lookup_kdc = dns_lookup_kdc
        if add_to_ignored_domains is not None:
            self.add_to_ignored_domains = add_to_ignored_domains
        if remove_from_ignored_domains is not None:
            self.remove_from_ignored_domains = remove_from_ignored_domains

    @property
    def realm_kdc_servers(self):
        """Gets the realm_kdc_servers of this Body39.  # noqa: E501


        :return: The realm_kdc_servers of this Body39.  # noqa: E501
        :rtype: list[str]
        """
        return self._realm_kdc_servers

    @realm_kdc_servers.setter
    def realm_kdc_servers(self, realm_kdc_servers):
        """Sets the realm_kdc_servers of this Body39.


        :param realm_kdc_servers: The realm_kdc_servers of this Body39.  # noqa: E501
        :type: list[str]
        """

        self._realm_kdc_servers = realm_kdc_servers

    @property
    def dns(self):
        """Gets the dns of this Body39.  # noqa: E501


        :return: The dns of this Body39.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this Body39.


        :param dns: The dns of this Body39.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")  # noqa: E501

        self._dns = dns

    @property
    def dns_lookup_realm(self):
        """Gets the dns_lookup_realm of this Body39.  # noqa: E501


        :return: The dns_lookup_realm of this Body39.  # noqa: E501
        :rtype: str
        """
        return self._dns_lookup_realm

    @dns_lookup_realm.setter
    def dns_lookup_realm(self, dns_lookup_realm):
        """Sets the dns_lookup_realm of this Body39.


        :param dns_lookup_realm: The dns_lookup_realm of this Body39.  # noqa: E501
        :type: str
        """

        self._dns_lookup_realm = dns_lookup_realm

    @property
    def dns_lookup_kdc(self):
        """Gets the dns_lookup_kdc of this Body39.  # noqa: E501


        :return: The dns_lookup_kdc of this Body39.  # noqa: E501
        :rtype: str
        """
        return self._dns_lookup_kdc

    @dns_lookup_kdc.setter
    def dns_lookup_kdc(self, dns_lookup_kdc):
        """Sets the dns_lookup_kdc of this Body39.


        :param dns_lookup_kdc: The dns_lookup_kdc of this Body39.  # noqa: E501
        :type: str
        """

        self._dns_lookup_kdc = dns_lookup_kdc

    @property
    def add_to_ignored_domains(self):
        """Gets the add_to_ignored_domains of this Body39.  # noqa: E501


        :return: The add_to_ignored_domains of this Body39.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_to_ignored_domains

    @add_to_ignored_domains.setter
    def add_to_ignored_domains(self, add_to_ignored_domains):
        """Sets the add_to_ignored_domains of this Body39.


        :param add_to_ignored_domains: The add_to_ignored_domains of this Body39.  # noqa: E501
        :type: list[str]
        """

        self._add_to_ignored_domains = add_to_ignored_domains

    @property
    def remove_from_ignored_domains(self):
        """Gets the remove_from_ignored_domains of this Body39.  # noqa: E501


        :return: The remove_from_ignored_domains of this Body39.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_from_ignored_domains

    @remove_from_ignored_domains.setter
    def remove_from_ignored_domains(self, remove_from_ignored_domains):
        """Sets the remove_from_ignored_domains of this Body39.


        :param remove_from_ignored_domains: The remove_from_ignored_domains of this Body39.  # noqa: E501
        :type: list[str]
        """

        self._remove_from_ignored_domains = remove_from_ignored_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body39, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body39):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body39):
            return True

        return self.to_dict() != other.to_dict()
