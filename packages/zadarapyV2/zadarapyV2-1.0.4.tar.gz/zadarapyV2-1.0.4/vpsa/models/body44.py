# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body44(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raid_groups': 'str',
        'capacity': 'str',
        'obsdestname': 'str',
        'cloud_size': 'str',
        'sse': 'str'
    }

    attribute_map = {
        'raid_groups': 'raid_groups',
        'capacity': 'capacity',
        'obsdestname': 'obsdestname',
        'cloud_size': 'cloud_size',
        'sse': 'sse'
    }

    def __init__(self, raid_groups=None, capacity=None, obsdestname=None, cloud_size=None, sse=None, _configuration=None):  # noqa: E501
        """Body44 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._raid_groups = None
        self._capacity = None
        self._obsdestname = None
        self._cloud_size = None
        self._sse = None
        self.discriminator = None

        if raid_groups is not None:
            self.raid_groups = raid_groups
        if capacity is not None:
            self.capacity = capacity
        if obsdestname is not None:
            self.obsdestname = obsdestname
        if cloud_size is not None:
            self.cloud_size = cloud_size
        if sse is not None:
            self.sse = sse

    @property
    def raid_groups(self):
        """Gets the raid_groups of this Body44.  # noqa: E501


        :return: The raid_groups of this Body44.  # noqa: E501
        :rtype: str
        """
        return self._raid_groups

    @raid_groups.setter
    def raid_groups(self, raid_groups):
        """Sets the raid_groups of this Body44.


        :param raid_groups: The raid_groups of this Body44.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                raid_groups is not None and not re.search(r'^RaidGroup-[0-9]+$', raid_groups)):  # noqa: E501
            raise ValueError(r"Invalid value for `raid_groups`, must be a follow pattern or equal to `/^RaidGroup-[0-9]+$/`")  # noqa: E501

        self._raid_groups = raid_groups

    @property
    def capacity(self):
        """Gets the capacity of this Body44.  # noqa: E501


        :return: The capacity of this Body44.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Body44.


        :param capacity: The capacity of this Body44.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def obsdestname(self):
        """Gets the obsdestname of this Body44.  # noqa: E501


        :return: The obsdestname of this Body44.  # noqa: E501
        :rtype: str
        """
        return self._obsdestname

    @obsdestname.setter
    def obsdestname(self, obsdestname):
        """Sets the obsdestname of this Body44.


        :param obsdestname: The obsdestname of this Body44.  # noqa: E501
        :type: str
        """

        self._obsdestname = obsdestname

    @property
    def cloud_size(self):
        """Gets the cloud_size of this Body44.  # noqa: E501


        :return: The cloud_size of this Body44.  # noqa: E501
        :rtype: str
        """
        return self._cloud_size

    @cloud_size.setter
    def cloud_size(self, cloud_size):
        """Sets the cloud_size of this Body44.


        :param cloud_size: The cloud_size of this Body44.  # noqa: E501
        :type: str
        """

        self._cloud_size = cloud_size

    @property
    def sse(self):
        """Gets the sse of this Body44.  # noqa: E501


        :return: The sse of this Body44.  # noqa: E501
        :rtype: str
        """
        return self._sse

    @sse.setter
    def sse(self, sse):
        """Sets the sse of this Body44.


        :param sse: The sse of this Body44.  # noqa: E501
        :type: str
        """

        self._sse = sse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body44, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body44):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body44):
            return True

        return self.to_dict() != other.to_dict()
