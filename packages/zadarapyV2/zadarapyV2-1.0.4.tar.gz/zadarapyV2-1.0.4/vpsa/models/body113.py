# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body113(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'displayname': 'str',
        'create_policy': 'str',
        'delete_policy': 'str',
        'destination_policy': 'str',
        'empty': 'str'
    }

    attribute_map = {
        'displayname': 'displayname',
        'create_policy': 'create_policy',
        'delete_policy': 'delete_policy',
        'destination_policy': 'destination_policy',
        'empty': 'empty'
    }

    def __init__(self, displayname=None, create_policy=None, delete_policy=None, destination_policy=None, empty=None, _configuration=None):  # noqa: E501
        """Body113 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._displayname = None
        self._create_policy = None
        self._delete_policy = None
        self._destination_policy = None
        self._empty = None
        self.discriminator = None

        if displayname is not None:
            self.displayname = displayname
        self.create_policy = create_policy
        self.delete_policy = delete_policy
        if destination_policy is not None:
            self.destination_policy = destination_policy
        if empty is not None:
            self.empty = empty

    @property
    def displayname(self):
        """Gets the displayname of this Body113.  # noqa: E501


        :return: The displayname of this Body113.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this Body113.


        :param displayname: The displayname of this Body113.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def create_policy(self):
        """Gets the create_policy of this Body113.  # noqa: E501


        :return: The create_policy of this Body113.  # noqa: E501
        :rtype: str
        """
        return self._create_policy

    @create_policy.setter
    def create_policy(self, create_policy):
        """Sets the create_policy of this Body113.


        :param create_policy: The create_policy of this Body113.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and create_policy is None:
            raise ValueError("Invalid value for `create_policy`, must not be `None`")  # noqa: E501

        self._create_policy = create_policy

    @property
    def delete_policy(self):
        """Gets the delete_policy of this Body113.  # noqa: E501


        :return: The delete_policy of this Body113.  # noqa: E501
        :rtype: str
        """
        return self._delete_policy

    @delete_policy.setter
    def delete_policy(self, delete_policy):
        """Sets the delete_policy of this Body113.


        :param delete_policy: The delete_policy of this Body113.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and delete_policy is None:
            raise ValueError("Invalid value for `delete_policy`, must not be `None`")  # noqa: E501

        self._delete_policy = delete_policy

    @property
    def destination_policy(self):
        """Gets the destination_policy of this Body113.  # noqa: E501


        :return: The destination_policy of this Body113.  # noqa: E501
        :rtype: str
        """
        return self._destination_policy

    @destination_policy.setter
    def destination_policy(self, destination_policy):
        """Sets the destination_policy of this Body113.


        :param destination_policy: The destination_policy of this Body113.  # noqa: E501
        :type: str
        """

        self._destination_policy = destination_policy

    @property
    def empty(self):
        """Gets the empty of this Body113.  # noqa: E501


        :return: The empty of this Body113.  # noqa: E501
        :rtype: str
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this Body113.


        :param empty: The empty of this Body113.  # noqa: E501
        :type: str
        """

        self._empty = empty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body113, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body113):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body113):
            return True

        return self.to_dict() != other.to_dict()
