# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class InlineResponse200161Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'status': 'int',
        'quotas': 'list[InlineResponse200161ResponseQuotas]',
        'count': 'int',
        'updated': 'str',
        'updated_iso': 'str'
    }

    attribute_map = {
        'message': 'message',
        'status': 'status',
        'quotas': 'quotas',
        'count': 'count',
        'updated': 'updated',
        'updated_iso': 'updated_iso'
    }

    def __init__(self, message=None, status=None, quotas=None, count=None, updated=None, updated_iso=None, _configuration=None):  # noqa: E501
        """InlineResponse200161Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._status = None
        self._quotas = None
        self._count = None
        self._updated = None
        self._updated_iso = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if quotas is not None:
            self.quotas = quotas
        if count is not None:
            self.count = count
        if updated is not None:
            self.updated = updated
        if updated_iso is not None:
            self.updated_iso = updated_iso

    @property
    def message(self):
        """Gets the message of this InlineResponse200161Response.  # noqa: E501


        :return: The message of this InlineResponse200161Response.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse200161Response.


        :param message: The message of this InlineResponse200161Response.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this InlineResponse200161Response.  # noqa: E501


        :return: The status of this InlineResponse200161Response.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200161Response.


        :param status: The status of this InlineResponse200161Response.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def quotas(self):
        """Gets the quotas of this InlineResponse200161Response.  # noqa: E501


        :return: The quotas of this InlineResponse200161Response.  # noqa: E501
        :rtype: list[InlineResponse200161ResponseQuotas]
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas):
        """Sets the quotas of this InlineResponse200161Response.


        :param quotas: The quotas of this InlineResponse200161Response.  # noqa: E501
        :type: list[InlineResponse200161ResponseQuotas]
        """

        self._quotas = quotas

    @property
    def count(self):
        """Gets the count of this InlineResponse200161Response.  # noqa: E501


        :return: The count of this InlineResponse200161Response.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse200161Response.


        :param count: The count of this InlineResponse200161Response.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def updated(self):
        """Gets the updated of this InlineResponse200161Response.  # noqa: E501


        :return: The updated of this InlineResponse200161Response.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this InlineResponse200161Response.


        :param updated: The updated of this InlineResponse200161Response.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def updated_iso(self):
        """Gets the updated_iso of this InlineResponse200161Response.  # noqa: E501


        :return: The updated_iso of this InlineResponse200161Response.  # noqa: E501
        :rtype: str
        """
        return self._updated_iso

    @updated_iso.setter
    def updated_iso(self, updated_iso):
        """Sets the updated_iso of this InlineResponse200161Response.


        :param updated_iso: The updated_iso of this InlineResponse200161Response.  # noqa: E501
        :type: str
        """

        self._updated_iso = updated_iso

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200161Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200161Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200161Response):
            return True

        return self.to_dict() != other.to_dict()
