# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body72(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'destination': 'str',
        'volume': 'str',
        'policy': 'str',
        'compression': 'str',
        'sse': 'str',
        'storage_class': 'str'
    }

    attribute_map = {
        'name': 'name',
        'destination': 'destination',
        'volume': 'volume',
        'policy': 'policy',
        'compression': 'compression',
        'sse': 'sse',
        'storage_class': 'storage_class'
    }

    def __init__(self, name=None, destination=None, volume=None, policy=None, compression=None, sse=None, storage_class=None, _configuration=None):  # noqa: E501
        """Body72 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._destination = None
        self._volume = None
        self._policy = None
        self._compression = None
        self._sse = None
        self._storage_class = None
        self.discriminator = None

        self.name = name
        self.destination = destination
        self.volume = volume
        self.policy = policy
        self.compression = compression
        self.sse = sse
        if storage_class is not None:
            self.storage_class = storage_class

    @property
    def name(self):
        """Gets the name of this Body72.  # noqa: E501


        :return: The name of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body72.


        :param name: The name of this Body72.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def destination(self):
        """Gets the destination of this Body72.  # noqa: E501


        :return: The destination of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Body72.


        :param destination: The destination of this Body72.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def volume(self):
        """Gets the volume of this Body72.  # noqa: E501


        :return: The volume of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Body72.


        :param volume: The volume of this Body72.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                volume is not None and not re.search(r'^volume-[0-9a-f]{8}$', volume)):  # noqa: E501
            raise ValueError(r"Invalid value for `volume`, must be a follow pattern or equal to `/^volume-[0-9a-f]{8}$/`")  # noqa: E501

        self._volume = volume

    @property
    def policy(self):
        """Gets the policy of this Body72.  # noqa: E501


        :return: The policy of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Body72.


        :param policy: The policy of this Body72.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                policy is not None and not re.search(r'^policy-[0-9a-f]{8}$', policy)):  # noqa: E501
            raise ValueError(r"Invalid value for `policy`, must be a follow pattern or equal to `/^policy-[0-9a-f]{8}$/`")  # noqa: E501

        self._policy = policy

    @property
    def compression(self):
        """Gets the compression of this Body72.  # noqa: E501


        :return: The compression of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this Body72.


        :param compression: The compression of this Body72.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and compression is None:
            raise ValueError("Invalid value for `compression`, must not be `None`")  # noqa: E501

        self._compression = compression

    @property
    def sse(self):
        """Gets the sse of this Body72.  # noqa: E501


        :return: The sse of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._sse

    @sse.setter
    def sse(self, sse):
        """Sets the sse of this Body72.


        :param sse: The sse of this Body72.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and sse is None:
            raise ValueError("Invalid value for `sse`, must not be `None`")  # noqa: E501

        self._sse = sse

    @property
    def storage_class(self):
        """Gets the storage_class of this Body72.  # noqa: E501


        :return: The storage_class of this Body72.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Body72.


        :param storage_class: The storage_class of this Body72.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body72, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body72):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body72):
            return True

        return self.to_dict() != other.to_dict()
