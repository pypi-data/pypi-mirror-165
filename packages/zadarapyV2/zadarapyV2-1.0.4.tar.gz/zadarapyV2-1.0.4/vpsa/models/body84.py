# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body84(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'os': 'str',
        'vpsachapuser': 'str',
        'vpsachapsecret': 'str',
        'hostchapuser': 'str',
        'hostchapsecret': 'str',
        'iqn': 'str',
        'iscsi': 'str',
        'ipsec_iscsi': 'str',
        'ipsec_nfs': 'str',
        'wwpns': 'list[str]'
    }

    attribute_map = {
        'display_name': 'display_name',
        'os': 'os',
        'vpsachapuser': 'vpsachapuser',
        'vpsachapsecret': 'vpsachapsecret',
        'hostchapuser': 'hostchapuser',
        'hostchapsecret': 'hostchapsecret',
        'iqn': 'iqn',
        'iscsi': 'iscsi',
        'ipsec_iscsi': 'ipsec_iscsi',
        'ipsec_nfs': 'ipsec_nfs',
        'wwpns': 'wwpns'
    }

    def __init__(self, display_name=None, os=None, vpsachapuser=None, vpsachapsecret=None, hostchapuser=None, hostchapsecret=None, iqn=None, iscsi=None, ipsec_iscsi=None, ipsec_nfs=None, wwpns=None, _configuration=None):  # noqa: E501
        """Body84 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display_name = None
        self._os = None
        self._vpsachapuser = None
        self._vpsachapsecret = None
        self._hostchapuser = None
        self._hostchapsecret = None
        self._iqn = None
        self._iscsi = None
        self._ipsec_iscsi = None
        self._ipsec_nfs = None
        self._wwpns = None
        self.discriminator = None

        self.display_name = display_name
        if os is not None:
            self.os = os
        if vpsachapuser is not None:
            self.vpsachapuser = vpsachapuser
        if vpsachapsecret is not None:
            self.vpsachapsecret = vpsachapsecret
        if hostchapuser is not None:
            self.hostchapuser = hostchapuser
        if hostchapsecret is not None:
            self.hostchapsecret = hostchapsecret
        if iqn is not None:
            self.iqn = iqn
        if iscsi is not None:
            self.iscsi = iscsi
        if ipsec_iscsi is not None:
            self.ipsec_iscsi = ipsec_iscsi
        if ipsec_nfs is not None:
            self.ipsec_nfs = ipsec_nfs
        if wwpns is not None:
            self.wwpns = wwpns

    @property
    def display_name(self):
        """Gets the display_name of this Body84.  # noqa: E501


        :return: The display_name of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Body84.


        :param display_name: The display_name of this Body84.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def os(self):
        """Gets the os of this Body84.  # noqa: E501


        :return: The os of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Body84.


        :param os: The os of this Body84.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def vpsachapuser(self):
        """Gets the vpsachapuser of this Body84.  # noqa: E501


        :return: The vpsachapuser of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._vpsachapuser

    @vpsachapuser.setter
    def vpsachapuser(self, vpsachapuser):
        """Sets the vpsachapuser of this Body84.


        :param vpsachapuser: The vpsachapuser of this Body84.  # noqa: E501
        :type: str
        """

        self._vpsachapuser = vpsachapuser

    @property
    def vpsachapsecret(self):
        """Gets the vpsachapsecret of this Body84.  # noqa: E501


        :return: The vpsachapsecret of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._vpsachapsecret

    @vpsachapsecret.setter
    def vpsachapsecret(self, vpsachapsecret):
        """Sets the vpsachapsecret of this Body84.


        :param vpsachapsecret: The vpsachapsecret of this Body84.  # noqa: E501
        :type: str
        """

        self._vpsachapsecret = vpsachapsecret

    @property
    def hostchapuser(self):
        """Gets the hostchapuser of this Body84.  # noqa: E501


        :return: The hostchapuser of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._hostchapuser

    @hostchapuser.setter
    def hostchapuser(self, hostchapuser):
        """Sets the hostchapuser of this Body84.


        :param hostchapuser: The hostchapuser of this Body84.  # noqa: E501
        :type: str
        """

        self._hostchapuser = hostchapuser

    @property
    def hostchapsecret(self):
        """Gets the hostchapsecret of this Body84.  # noqa: E501


        :return: The hostchapsecret of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._hostchapsecret

    @hostchapsecret.setter
    def hostchapsecret(self, hostchapsecret):
        """Sets the hostchapsecret of this Body84.


        :param hostchapsecret: The hostchapsecret of this Body84.  # noqa: E501
        :type: str
        """

        self._hostchapsecret = hostchapsecret

    @property
    def iqn(self):
        """Gets the iqn of this Body84.  # noqa: E501


        :return: The iqn of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this Body84.


        :param iqn: The iqn of this Body84.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                iqn is not None and not re.search(r'^(?:iqn.[0-9]{4}-[0-9]{2}(?:.[A-Za-z])).+', iqn)):  # noqa: E501
            raise ValueError(r"Invalid value for `iqn`, must be a follow pattern or equal to `/^(?:iqn.[0-9]{4}-[0-9]{2}(?:.[A-Za-z])).+/`")  # noqa: E501

        self._iqn = iqn

    @property
    def iscsi(self):
        """Gets the iscsi of this Body84.  # noqa: E501


        :return: The iscsi of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._iscsi

    @iscsi.setter
    def iscsi(self, iscsi):
        """Sets the iscsi of this Body84.


        :param iscsi: The iscsi of this Body84.  # noqa: E501
        :type: str
        """

        self._iscsi = iscsi

    @property
    def ipsec_iscsi(self):
        """Gets the ipsec_iscsi of this Body84.  # noqa: E501


        :return: The ipsec_iscsi of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_iscsi

    @ipsec_iscsi.setter
    def ipsec_iscsi(self, ipsec_iscsi):
        """Sets the ipsec_iscsi of this Body84.


        :param ipsec_iscsi: The ipsec_iscsi of this Body84.  # noqa: E501
        :type: str
        """

        self._ipsec_iscsi = ipsec_iscsi

    @property
    def ipsec_nfs(self):
        """Gets the ipsec_nfs of this Body84.  # noqa: E501


        :return: The ipsec_nfs of this Body84.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_nfs

    @ipsec_nfs.setter
    def ipsec_nfs(self, ipsec_nfs):
        """Sets the ipsec_nfs of this Body84.


        :param ipsec_nfs: The ipsec_nfs of this Body84.  # noqa: E501
        :type: str
        """

        self._ipsec_nfs = ipsec_nfs

    @property
    def wwpns(self):
        """Gets the wwpns of this Body84.  # noqa: E501


        :return: The wwpns of this Body84.  # noqa: E501
        :rtype: list[str]
        """
        return self._wwpns

    @wwpns.setter
    def wwpns(self, wwpns):
        """Sets the wwpns of this Body84.


        :param wwpns: The wwpns of this Body84.  # noqa: E501
        :type: list[str]
        """

        self._wwpns = wwpns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body84, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body84):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body84):
            return True

        return self.to_dict() != other.to_dict()
