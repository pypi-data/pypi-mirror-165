# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body157(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read_iops_limit': 'int',
        'read_mbps_limit': 'int',
        'read_latency_limit': 'int',
        'write_iops_limit': 'int',
        'write_mbps_limit': 'int',
        'write_latency_limit': 'int'
    }

    attribute_map = {
        'read_iops_limit': 'read_iops_limit',
        'read_mbps_limit': 'read_mbps_limit',
        'read_latency_limit': 'read_latency_limit',
        'write_iops_limit': 'write_iops_limit',
        'write_mbps_limit': 'write_mbps_limit',
        'write_latency_limit': 'write_latency_limit'
    }

    def __init__(self, read_iops_limit=None, read_mbps_limit=None, read_latency_limit=None, write_iops_limit=None, write_mbps_limit=None, write_latency_limit=None, _configuration=None):  # noqa: E501
        """Body157 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._read_iops_limit = None
        self._read_mbps_limit = None
        self._read_latency_limit = None
        self._write_iops_limit = None
        self._write_mbps_limit = None
        self._write_latency_limit = None
        self.discriminator = None

        if read_iops_limit is not None:
            self.read_iops_limit = read_iops_limit
        if read_mbps_limit is not None:
            self.read_mbps_limit = read_mbps_limit
        if read_latency_limit is not None:
            self.read_latency_limit = read_latency_limit
        if write_iops_limit is not None:
            self.write_iops_limit = write_iops_limit
        if write_mbps_limit is not None:
            self.write_mbps_limit = write_mbps_limit
        if write_latency_limit is not None:
            self.write_latency_limit = write_latency_limit

    @property
    def read_iops_limit(self):
        """Gets the read_iops_limit of this Body157.  # noqa: E501


        :return: The read_iops_limit of this Body157.  # noqa: E501
        :rtype: int
        """
        return self._read_iops_limit

    @read_iops_limit.setter
    def read_iops_limit(self, read_iops_limit):
        """Sets the read_iops_limit of this Body157.


        :param read_iops_limit: The read_iops_limit of this Body157.  # noqa: E501
        :type: int
        """

        self._read_iops_limit = read_iops_limit

    @property
    def read_mbps_limit(self):
        """Gets the read_mbps_limit of this Body157.  # noqa: E501


        :return: The read_mbps_limit of this Body157.  # noqa: E501
        :rtype: int
        """
        return self._read_mbps_limit

    @read_mbps_limit.setter
    def read_mbps_limit(self, read_mbps_limit):
        """Sets the read_mbps_limit of this Body157.


        :param read_mbps_limit: The read_mbps_limit of this Body157.  # noqa: E501
        :type: int
        """

        self._read_mbps_limit = read_mbps_limit

    @property
    def read_latency_limit(self):
        """Gets the read_latency_limit of this Body157.  # noqa: E501


        :return: The read_latency_limit of this Body157.  # noqa: E501
        :rtype: int
        """
        return self._read_latency_limit

    @read_latency_limit.setter
    def read_latency_limit(self, read_latency_limit):
        """Sets the read_latency_limit of this Body157.


        :param read_latency_limit: The read_latency_limit of this Body157.  # noqa: E501
        :type: int
        """

        self._read_latency_limit = read_latency_limit

    @property
    def write_iops_limit(self):
        """Gets the write_iops_limit of this Body157.  # noqa: E501


        :return: The write_iops_limit of this Body157.  # noqa: E501
        :rtype: int
        """
        return self._write_iops_limit

    @write_iops_limit.setter
    def write_iops_limit(self, write_iops_limit):
        """Sets the write_iops_limit of this Body157.


        :param write_iops_limit: The write_iops_limit of this Body157.  # noqa: E501
        :type: int
        """

        self._write_iops_limit = write_iops_limit

    @property
    def write_mbps_limit(self):
        """Gets the write_mbps_limit of this Body157.  # noqa: E501


        :return: The write_mbps_limit of this Body157.  # noqa: E501
        :rtype: int
        """
        return self._write_mbps_limit

    @write_mbps_limit.setter
    def write_mbps_limit(self, write_mbps_limit):
        """Sets the write_mbps_limit of this Body157.


        :param write_mbps_limit: The write_mbps_limit of this Body157.  # noqa: E501
        :type: int
        """

        self._write_mbps_limit = write_mbps_limit

    @property
    def write_latency_limit(self):
        """Gets the write_latency_limit of this Body157.  # noqa: E501


        :return: The write_latency_limit of this Body157.  # noqa: E501
        :rtype: int
        """
        return self._write_latency_limit

    @write_latency_limit.setter
    def write_latency_limit(self, write_latency_limit):
        """Sets the write_latency_limit of this Body157.


        :param write_latency_limit: The write_latency_limit of this Body157.  # noqa: E501
        :type: int
        """

        self._write_latency_limit = write_latency_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body157, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body157):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body157):
            return True

        return self.to_dict() != other.to_dict()
