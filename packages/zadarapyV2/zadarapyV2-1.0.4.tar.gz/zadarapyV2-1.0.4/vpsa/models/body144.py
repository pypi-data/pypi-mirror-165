# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body144(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'source_type': 'str',
        'hard': 'str',
        'source_id_display': 'str'
    }

    attribute_map = {
        'source_id': 'source_id',
        'source_type': 'source_type',
        'hard': 'hard',
        'source_id_display': 'source_id_display'
    }

    def __init__(self, source_id=None, source_type=None, hard=None, source_id_display=None, _configuration=None):  # noqa: E501
        """Body144 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._source_id = None
        self._source_type = None
        self._hard = None
        self._source_id_display = None
        self.discriminator = None

        if source_id is not None:
            self.source_id = source_id
        self.source_type = source_type
        self.hard = hard
        if source_id_display is not None:
            self.source_id_display = source_id_display

    @property
    def source_id(self):
        """Gets the source_id of this Body144.  # noqa: E501


        :return: The source_id of this Body144.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Body144.


        :param source_id: The source_id of this Body144.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this Body144.  # noqa: E501


        :return: The source_type of this Body144.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Body144.


        :param source_type: The source_type of this Body144.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def hard(self):
        """Gets the hard of this Body144.  # noqa: E501


        :return: The hard of this Body144.  # noqa: E501
        :rtype: str
        """
        return self._hard

    @hard.setter
    def hard(self, hard):
        """Sets the hard of this Body144.


        :param hard: The hard of this Body144.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and hard is None:
            raise ValueError("Invalid value for `hard`, must not be `None`")  # noqa: E501

        self._hard = hard

    @property
    def source_id_display(self):
        """Gets the source_id_display of this Body144.  # noqa: E501


        :return: The source_id_display of this Body144.  # noqa: E501
        :rtype: str
        """
        return self._source_id_display

    @source_id_display.setter
    def source_id_display(self, source_id_display):
        """Sets the source_id_display of this Body144.


        :param source_id_display: The source_id_display of this Body144.  # noqa: E501
        :type: str
        """

        self._source_id_display = source_id_display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body144, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body144):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body144):
            return True

        return self.to_dict() != other.to_dict()
