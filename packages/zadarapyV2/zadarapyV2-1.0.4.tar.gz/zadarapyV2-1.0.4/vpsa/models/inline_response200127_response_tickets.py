# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class InlineResponse200127ResponseTickets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'str',
        'updated_at': 'str',
        'subject': 'str',
        'description': 'str',
        'priority': 'str',
        'status': 'str',
        'requester_id': 'int',
        'submitter_id': 'int',
        'assignee_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'subject': 'subject',
        'description': 'description',
        'priority': 'priority',
        'status': 'status',
        'requester_id': 'requester_id',
        'submitter_id': 'submitter_id',
        'assignee_id': 'assignee_id'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, subject=None, description=None, priority=None, status=None, requester_id=None, submitter_id=None, assignee_id=None, _configuration=None):  # noqa: E501
        """InlineResponse200127ResponseTickets - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._updated_at = None
        self._subject = None
        self._description = None
        self._priority = None
        self._status = None
        self._requester_id = None
        self._submitter_id = None
        self._assignee_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if subject is not None:
            self.subject = subject
        if description is not None:
            self.description = description
        if priority is not None:
            self.priority = priority
        if status is not None:
            self.status = status
        if requester_id is not None:
            self.requester_id = requester_id
        if submitter_id is not None:
            self.submitter_id = submitter_id
        if assignee_id is not None:
            self.assignee_id = assignee_id

    @property
    def id(self):
        """Gets the id of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200127ResponseTickets.


        :param id: The id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The created_at of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200127ResponseTickets.


        :param created_at: The created_at of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The updated_at of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse200127ResponseTickets.


        :param updated_at: The updated_at of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def subject(self):
        """Gets the subject of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The subject of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this InlineResponse200127ResponseTickets.


        :param subject: The subject of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def description(self):
        """Gets the description of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The description of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200127ResponseTickets.


        :param description: The description of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The priority of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InlineResponse200127ResponseTickets.


        :param priority: The priority of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The status of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200127ResponseTickets.


        :param status: The status of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def requester_id(self):
        """Gets the requester_id of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The requester_id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: int
        """
        return self._requester_id

    @requester_id.setter
    def requester_id(self, requester_id):
        """Sets the requester_id of this InlineResponse200127ResponseTickets.


        :param requester_id: The requester_id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: int
        """

        self._requester_id = requester_id

    @property
    def submitter_id(self):
        """Gets the submitter_id of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The submitter_id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: int
        """
        return self._submitter_id

    @submitter_id.setter
    def submitter_id(self, submitter_id):
        """Sets the submitter_id of this InlineResponse200127ResponseTickets.


        :param submitter_id: The submitter_id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: int
        """

        self._submitter_id = submitter_id

    @property
    def assignee_id(self):
        """Gets the assignee_id of this InlineResponse200127ResponseTickets.  # noqa: E501


        :return: The assignee_id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this InlineResponse200127ResponseTickets.


        :param assignee_id: The assignee_id of this InlineResponse200127ResponseTickets.  # noqa: E501
        :type: int
        """

        self._assignee_id = assignee_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200127ResponseTickets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200127ResponseTickets):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200127ResponseTickets):
            return True

        return self.to_dict() != other.to_dict()
