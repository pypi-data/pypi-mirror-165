# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body58(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'user': 'str',
        'password': 'str',
        'interface': 'str',
        'proxyhost': 'str',
        'proxyport': 'str',
        'proxytype': 'str',
        'proxyusername': 'str',
        'proxypassword': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'user': 'user',
        'password': 'password',
        'interface': 'interface',
        'proxyhost': 'proxyhost',
        'proxyport': 'proxyport',
        'proxytype': 'proxytype',
        'proxyusername': 'proxyusername',
        'proxypassword': 'proxypassword'
    }

    def __init__(self, ip=None, user=None, password=None, interface=None, proxyhost=None, proxyport=None, proxytype=None, proxyusername=None, proxypassword=None, _configuration=None):  # noqa: E501
        """Body58 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ip = None
        self._user = None
        self._password = None
        self._interface = None
        self._proxyhost = None
        self._proxyport = None
        self._proxytype = None
        self._proxyusername = None
        self._proxypassword = None
        self.discriminator = None

        self.ip = ip
        self.user = user
        self.password = password
        if interface is not None:
            self.interface = interface
        if proxyhost is not None:
            self.proxyhost = proxyhost
        if proxyport is not None:
            self.proxyport = proxyport
        if proxytype is not None:
            self.proxytype = proxytype
        if proxyusername is not None:
            self.proxyusername = proxyusername
        if proxypassword is not None:
            self.proxypassword = proxypassword

    @property
    def ip(self):
        """Gets the ip of this Body58.  # noqa: E501


        :return: The ip of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Body58.


        :param ip: The ip of this Body58.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def user(self):
        """Gets the user of this Body58.  # noqa: E501


        :return: The user of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Body58.


        :param user: The user of this Body58.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def password(self):
        """Gets the password of this Body58.  # noqa: E501


        :return: The password of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body58.


        :param password: The password of this Body58.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def interface(self):
        """Gets the interface of this Body58.  # noqa: E501


        :return: The interface of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this Body58.


        :param interface: The interface of this Body58.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                interface is not None and not re.search(r'(^vni-.*|.*(public|fe).*)', interface)):  # noqa: E501
            raise ValueError(r"Invalid value for `interface`, must be a follow pattern or equal to `/(^vni-.*|.*(public|fe).*)/`")  # noqa: E501

        self._interface = interface

    @property
    def proxyhost(self):
        """Gets the proxyhost of this Body58.  # noqa: E501


        :return: The proxyhost of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._proxyhost

    @proxyhost.setter
    def proxyhost(self, proxyhost):
        """Sets the proxyhost of this Body58.


        :param proxyhost: The proxyhost of this Body58.  # noqa: E501
        :type: str
        """

        self._proxyhost = proxyhost

    @property
    def proxyport(self):
        """Gets the proxyport of this Body58.  # noqa: E501


        :return: The proxyport of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._proxyport

    @proxyport.setter
    def proxyport(self, proxyport):
        """Sets the proxyport of this Body58.


        :param proxyport: The proxyport of this Body58.  # noqa: E501
        :type: str
        """

        self._proxyport = proxyport

    @property
    def proxytype(self):
        """Gets the proxytype of this Body58.  # noqa: E501


        :return: The proxytype of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._proxytype

    @proxytype.setter
    def proxytype(self, proxytype):
        """Sets the proxytype of this Body58.


        :param proxytype: The proxytype of this Body58.  # noqa: E501
        :type: str
        """

        self._proxytype = proxytype

    @property
    def proxyusername(self):
        """Gets the proxyusername of this Body58.  # noqa: E501


        :return: The proxyusername of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._proxyusername

    @proxyusername.setter
    def proxyusername(self, proxyusername):
        """Sets the proxyusername of this Body58.


        :param proxyusername: The proxyusername of this Body58.  # noqa: E501
        :type: str
        """

        self._proxyusername = proxyusername

    @property
    def proxypassword(self):
        """Gets the proxypassword of this Body58.  # noqa: E501


        :return: The proxypassword of this Body58.  # noqa: E501
        :rtype: str
        """
        return self._proxypassword

    @proxypassword.setter
    def proxypassword(self, proxypassword):
        """Sets the proxypassword of this Body58.


        :param proxypassword: The proxypassword of this Body58.  # noqa: E501
        :type: str
        """

        self._proxypassword = proxypassword

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body58, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body58):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body58):
            return True

        return self.to_dict() != other.to_dict()
