# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body148(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope': 'str',
        'quota_id': 'int',
        'quota_nas': 'str',
        'quota_ad': 'str'
    }

    attribute_map = {
        'scope': 'scope',
        'quota_id': 'quota_id',
        'quota_nas': 'quota_nas',
        'quota_ad': 'quota_ad'
    }

    def __init__(self, scope=None, quota_id=None, quota_nas=None, quota_ad=None, _configuration=None):  # noqa: E501
        """Body148 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._scope = None
        self._quota_id = None
        self._quota_nas = None
        self._quota_ad = None
        self.discriminator = None

        self.scope = scope
        if quota_id is not None:
            self.quota_id = quota_id
        if quota_nas is not None:
            self.quota_nas = quota_nas
        if quota_ad is not None:
            self.quota_ad = quota_ad

    @property
    def scope(self):
        """Gets the scope of this Body148.  # noqa: E501


        :return: The scope of this Body148.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Body148.


        :param scope: The scope of this Body148.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def quota_id(self):
        """Gets the quota_id of this Body148.  # noqa: E501


        :return: The quota_id of this Body148.  # noqa: E501
        :rtype: int
        """
        return self._quota_id

    @quota_id.setter
    def quota_id(self, quota_id):
        """Sets the quota_id of this Body148.


        :param quota_id: The quota_id of this Body148.  # noqa: E501
        :type: int
        """

        self._quota_id = quota_id

    @property
    def quota_nas(self):
        """Gets the quota_nas of this Body148.  # noqa: E501


        :return: The quota_nas of this Body148.  # noqa: E501
        :rtype: str
        """
        return self._quota_nas

    @quota_nas.setter
    def quota_nas(self, quota_nas):
        """Sets the quota_nas of this Body148.


        :param quota_nas: The quota_nas of this Body148.  # noqa: E501
        :type: str
        """

        self._quota_nas = quota_nas

    @property
    def quota_ad(self):
        """Gets the quota_ad of this Body148.  # noqa: E501


        :return: The quota_ad of this Body148.  # noqa: E501
        :rtype: str
        """
        return self._quota_ad

    @quota_ad.setter
    def quota_ad(self, quota_ad):
        """Sets the quota_ad of this Body148.


        :param quota_ad: The quota_ad of this Body148.  # noqa: E501
        :type: str
        """

        self._quota_ad = quota_ad

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body148, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body148):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body148):
            return True

        return self.to_dict() != other.to_dict()
