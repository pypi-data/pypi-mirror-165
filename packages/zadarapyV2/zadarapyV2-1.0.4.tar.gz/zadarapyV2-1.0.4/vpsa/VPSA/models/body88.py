# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body88(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume_name': 'str',
        'access_type': 'str',
        'lun': 'int',
        'readonly': 'str',
        'force': 'str'
    }

    attribute_map = {
        'volume_name': 'volume_name',
        'access_type': 'access_type',
        'lun': 'lun',
        'readonly': 'readonly',
        'force': 'force'
    }

    def __init__(self, volume_name=None, access_type=None, lun=None, readonly=None, force=None, _configuration=None):  # noqa: E501
        """Body88 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._volume_name = None
        self._access_type = None
        self._lun = None
        self._readonly = None
        self._force = None
        self.discriminator = None

        self.volume_name = volume_name
        if access_type is not None:
            self.access_type = access_type
        if lun is not None:
            self.lun = lun
        if readonly is not None:
            self.readonly = readonly
        if force is not None:
            self.force = force

    @property
    def volume_name(self):
        """Gets the volume_name of this Body88.  # noqa: E501


        :return: The volume_name of this Body88.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this Body88.


        :param volume_name: The volume_name of this Body88.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and volume_name is None:
            raise ValueError("Invalid value for `volume_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                volume_name is not None and not re.search(r'^volume-[0-9a-f]{8}$', volume_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `volume_name`, must be a follow pattern or equal to `/^volume-[0-9a-f]{8}$/`")  # noqa: E501

        self._volume_name = volume_name

    @property
    def access_type(self):
        """Gets the access_type of this Body88.  # noqa: E501


        :return: The access_type of this Body88.  # noqa: E501
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Body88.


        :param access_type: The access_type of this Body88.  # noqa: E501
        :type: str
        """

        self._access_type = access_type

    @property
    def lun(self):
        """Gets the lun of this Body88.  # noqa: E501


        :return: The lun of this Body88.  # noqa: E501
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this Body88.


        :param lun: The lun of this Body88.  # noqa: E501
        :type: int
        """

        self._lun = lun

    @property
    def readonly(self):
        """Gets the readonly of this Body88.  # noqa: E501


        :return: The readonly of this Body88.  # noqa: E501
        :rtype: str
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Body88.


        :param readonly: The readonly of this Body88.  # noqa: E501
        :type: str
        """

        self._readonly = readonly

    @property
    def force(self):
        """Gets the force of this Body88.  # noqa: E501


        :return: The force of this Body88.  # noqa: E501
        :rtype: str
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this Body88.


        :param force: The force of this Body88.  # noqa: E501
        :type: str
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body88, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body88):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body88):
            return True

        return self.to_dict() != other.to_dict()
