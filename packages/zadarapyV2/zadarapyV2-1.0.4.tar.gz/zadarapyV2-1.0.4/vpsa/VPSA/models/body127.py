# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body127(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dedupe': 'str',
        'compress': 'str',
        'atimeupdate': 'str',
        'smbguest': 'str',
        'smbonly': 'str',
        'smbwindowsacl': 'str',
        'smbfilecreatemask': 'str',
        'smbdircreatemask': 'str',
        'smbbrowseable': 'str',
        'smbhiddenfiles': 'str',
        'smbhideunreadable': 'str',
        'smbhidedotfiles': 'str',
        'smbhideunwriteable': 'str',
        'smbmaparchive': 'str',
        'smbaiosize': 'str',
        'smbencryptionmode': 'str',
        'smbenableoplocks': 'str',
        'smbmanglednames': 'str',
        'smbcasesensitive': 'str',
        'nfsrootsquash': 'str',
        'nfsallsquash': 'str',
        'nfsanongid': 'int',
        'nfsanonuid': 'int',
        'readaheadkb': 'str',
        'force': 'str',
        'auditenable': 'str',
        'flcenabled': 'str',
        'mtr_histograms': 'str',
        'write_mbps_capping': 'int',
        'read_mbps_capping': 'int',
        'write_iops_capping': 'int',
        'read_iops_capping': 'int'
    }

    attribute_map = {
        'dedupe': 'dedupe',
        'compress': 'compress',
        'atimeupdate': 'atimeupdate',
        'smbguest': 'smbguest',
        'smbonly': 'smbonly',
        'smbwindowsacl': 'smbwindowsacl',
        'smbfilecreatemask': 'smbfilecreatemask',
        'smbdircreatemask': 'smbdircreatemask',
        'smbbrowseable': 'smbbrowseable',
        'smbhiddenfiles': 'smbhiddenfiles',
        'smbhideunreadable': 'smbhideunreadable',
        'smbhidedotfiles': 'smbhidedotfiles',
        'smbhideunwriteable': 'smbhideunwriteable',
        'smbmaparchive': 'smbmaparchive',
        'smbaiosize': 'smbaiosize',
        'smbencryptionmode': 'smbencryptionmode',
        'smbenableoplocks': 'smbenableoplocks',
        'smbmanglednames': 'smbmanglednames',
        'smbcasesensitive': 'smbcasesensitive',
        'nfsrootsquash': 'nfsrootsquash',
        'nfsallsquash': 'nfsallsquash',
        'nfsanongid': 'nfsanongid',
        'nfsanonuid': 'nfsanonuid',
        'readaheadkb': 'readaheadkb',
        'force': 'force',
        'auditenable': 'auditenable',
        'flcenabled': 'flcenabled',
        'mtr_histograms': 'mtr_histograms',
        'write_mbps_capping': 'write_mbps_capping',
        'read_mbps_capping': 'read_mbps_capping',
        'write_iops_capping': 'write_iops_capping',
        'read_iops_capping': 'read_iops_capping'
    }

    def __init__(self, dedupe=None, compress=None, atimeupdate=None, smbguest=None, smbonly=None, smbwindowsacl=None, smbfilecreatemask=None, smbdircreatemask=None, smbbrowseable=None, smbhiddenfiles=None, smbhideunreadable=None, smbhidedotfiles=None, smbhideunwriteable=None, smbmaparchive=None, smbaiosize=None, smbencryptionmode=None, smbenableoplocks=None, smbmanglednames=None, smbcasesensitive=None, nfsrootsquash=None, nfsallsquash=None, nfsanongid=None, nfsanonuid=None, readaheadkb=None, force=None, auditenable=None, flcenabled=None, mtr_histograms=None, write_mbps_capping=None, read_mbps_capping=None, write_iops_capping=None, read_iops_capping=None, _configuration=None):  # noqa: E501
        """Body127 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dedupe = None
        self._compress = None
        self._atimeupdate = None
        self._smbguest = None
        self._smbonly = None
        self._smbwindowsacl = None
        self._smbfilecreatemask = None
        self._smbdircreatemask = None
        self._smbbrowseable = None
        self._smbhiddenfiles = None
        self._smbhideunreadable = None
        self._smbhidedotfiles = None
        self._smbhideunwriteable = None
        self._smbmaparchive = None
        self._smbaiosize = None
        self._smbencryptionmode = None
        self._smbenableoplocks = None
        self._smbmanglednames = None
        self._smbcasesensitive = None
        self._nfsrootsquash = None
        self._nfsallsquash = None
        self._nfsanongid = None
        self._nfsanonuid = None
        self._readaheadkb = None
        self._force = None
        self._auditenable = None
        self._flcenabled = None
        self._mtr_histograms = None
        self._write_mbps_capping = None
        self._read_mbps_capping = None
        self._write_iops_capping = None
        self._read_iops_capping = None
        self.discriminator = None

        if dedupe is not None:
            self.dedupe = dedupe
        if compress is not None:
            self.compress = compress
        if atimeupdate is not None:
            self.atimeupdate = atimeupdate
        if smbguest is not None:
            self.smbguest = smbguest
        if smbonly is not None:
            self.smbonly = smbonly
        if smbwindowsacl is not None:
            self.smbwindowsacl = smbwindowsacl
        if smbfilecreatemask is not None:
            self.smbfilecreatemask = smbfilecreatemask
        if smbdircreatemask is not None:
            self.smbdircreatemask = smbdircreatemask
        if smbbrowseable is not None:
            self.smbbrowseable = smbbrowseable
        if smbhiddenfiles is not None:
            self.smbhiddenfiles = smbhiddenfiles
        if smbhideunreadable is not None:
            self.smbhideunreadable = smbhideunreadable
        if smbhidedotfiles is not None:
            self.smbhidedotfiles = smbhidedotfiles
        if smbhideunwriteable is not None:
            self.smbhideunwriteable = smbhideunwriteable
        if smbmaparchive is not None:
            self.smbmaparchive = smbmaparchive
        if smbaiosize is not None:
            self.smbaiosize = smbaiosize
        if smbencryptionmode is not None:
            self.smbencryptionmode = smbencryptionmode
        if smbenableoplocks is not None:
            self.smbenableoplocks = smbenableoplocks
        if smbmanglednames is not None:
            self.smbmanglednames = smbmanglednames
        if smbcasesensitive is not None:
            self.smbcasesensitive = smbcasesensitive
        if nfsrootsquash is not None:
            self.nfsrootsquash = nfsrootsquash
        if nfsallsquash is not None:
            self.nfsallsquash = nfsallsquash
        if nfsanongid is not None:
            self.nfsanongid = nfsanongid
        if nfsanonuid is not None:
            self.nfsanonuid = nfsanonuid
        if readaheadkb is not None:
            self.readaheadkb = readaheadkb
        if force is not None:
            self.force = force
        if auditenable is not None:
            self.auditenable = auditenable
        if flcenabled is not None:
            self.flcenabled = flcenabled
        if mtr_histograms is not None:
            self.mtr_histograms = mtr_histograms
        if write_mbps_capping is not None:
            self.write_mbps_capping = write_mbps_capping
        if read_mbps_capping is not None:
            self.read_mbps_capping = read_mbps_capping
        if write_iops_capping is not None:
            self.write_iops_capping = write_iops_capping
        if read_iops_capping is not None:
            self.read_iops_capping = read_iops_capping

    @property
    def dedupe(self):
        """Gets the dedupe of this Body127.  # noqa: E501


        :return: The dedupe of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._dedupe

    @dedupe.setter
    def dedupe(self, dedupe):
        """Sets the dedupe of this Body127.


        :param dedupe: The dedupe of this Body127.  # noqa: E501
        :type: str
        """

        self._dedupe = dedupe

    @property
    def compress(self):
        """Gets the compress of this Body127.  # noqa: E501


        :return: The compress of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this Body127.


        :param compress: The compress of this Body127.  # noqa: E501
        :type: str
        """

        self._compress = compress

    @property
    def atimeupdate(self):
        """Gets the atimeupdate of this Body127.  # noqa: E501


        :return: The atimeupdate of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._atimeupdate

    @atimeupdate.setter
    def atimeupdate(self, atimeupdate):
        """Sets the atimeupdate of this Body127.


        :param atimeupdate: The atimeupdate of this Body127.  # noqa: E501
        :type: str
        """

        self._atimeupdate = atimeupdate

    @property
    def smbguest(self):
        """Gets the smbguest of this Body127.  # noqa: E501


        :return: The smbguest of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbguest

    @smbguest.setter
    def smbguest(self, smbguest):
        """Sets the smbguest of this Body127.


        :param smbguest: The smbguest of this Body127.  # noqa: E501
        :type: str
        """

        self._smbguest = smbguest

    @property
    def smbonly(self):
        """Gets the smbonly of this Body127.  # noqa: E501


        :return: The smbonly of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbonly

    @smbonly.setter
    def smbonly(self, smbonly):
        """Sets the smbonly of this Body127.


        :param smbonly: The smbonly of this Body127.  # noqa: E501
        :type: str
        """

        self._smbonly = smbonly

    @property
    def smbwindowsacl(self):
        """Gets the smbwindowsacl of this Body127.  # noqa: E501


        :return: The smbwindowsacl of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbwindowsacl

    @smbwindowsacl.setter
    def smbwindowsacl(self, smbwindowsacl):
        """Sets the smbwindowsacl of this Body127.


        :param smbwindowsacl: The smbwindowsacl of this Body127.  # noqa: E501
        :type: str
        """

        self._smbwindowsacl = smbwindowsacl

    @property
    def smbfilecreatemask(self):
        """Gets the smbfilecreatemask of this Body127.  # noqa: E501


        :return: The smbfilecreatemask of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbfilecreatemask

    @smbfilecreatemask.setter
    def smbfilecreatemask(self, smbfilecreatemask):
        """Sets the smbfilecreatemask of this Body127.


        :param smbfilecreatemask: The smbfilecreatemask of this Body127.  # noqa: E501
        :type: str
        """

        self._smbfilecreatemask = smbfilecreatemask

    @property
    def smbdircreatemask(self):
        """Gets the smbdircreatemask of this Body127.  # noqa: E501


        :return: The smbdircreatemask of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbdircreatemask

    @smbdircreatemask.setter
    def smbdircreatemask(self, smbdircreatemask):
        """Sets the smbdircreatemask of this Body127.


        :param smbdircreatemask: The smbdircreatemask of this Body127.  # noqa: E501
        :type: str
        """

        self._smbdircreatemask = smbdircreatemask

    @property
    def smbbrowseable(self):
        """Gets the smbbrowseable of this Body127.  # noqa: E501


        :return: The smbbrowseable of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbbrowseable

    @smbbrowseable.setter
    def smbbrowseable(self, smbbrowseable):
        """Sets the smbbrowseable of this Body127.


        :param smbbrowseable: The smbbrowseable of this Body127.  # noqa: E501
        :type: str
        """

        self._smbbrowseable = smbbrowseable

    @property
    def smbhiddenfiles(self):
        """Gets the smbhiddenfiles of this Body127.  # noqa: E501


        :return: The smbhiddenfiles of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbhiddenfiles

    @smbhiddenfiles.setter
    def smbhiddenfiles(self, smbhiddenfiles):
        """Sets the smbhiddenfiles of this Body127.


        :param smbhiddenfiles: The smbhiddenfiles of this Body127.  # noqa: E501
        :type: str
        """

        self._smbhiddenfiles = smbhiddenfiles

    @property
    def smbhideunreadable(self):
        """Gets the smbhideunreadable of this Body127.  # noqa: E501


        :return: The smbhideunreadable of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbhideunreadable

    @smbhideunreadable.setter
    def smbhideunreadable(self, smbhideunreadable):
        """Sets the smbhideunreadable of this Body127.


        :param smbhideunreadable: The smbhideunreadable of this Body127.  # noqa: E501
        :type: str
        """

        self._smbhideunreadable = smbhideunreadable

    @property
    def smbhidedotfiles(self):
        """Gets the smbhidedotfiles of this Body127.  # noqa: E501


        :return: The smbhidedotfiles of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbhidedotfiles

    @smbhidedotfiles.setter
    def smbhidedotfiles(self, smbhidedotfiles):
        """Sets the smbhidedotfiles of this Body127.


        :param smbhidedotfiles: The smbhidedotfiles of this Body127.  # noqa: E501
        :type: str
        """

        self._smbhidedotfiles = smbhidedotfiles

    @property
    def smbhideunwriteable(self):
        """Gets the smbhideunwriteable of this Body127.  # noqa: E501


        :return: The smbhideunwriteable of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbhideunwriteable

    @smbhideunwriteable.setter
    def smbhideunwriteable(self, smbhideunwriteable):
        """Sets the smbhideunwriteable of this Body127.


        :param smbhideunwriteable: The smbhideunwriteable of this Body127.  # noqa: E501
        :type: str
        """

        self._smbhideunwriteable = smbhideunwriteable

    @property
    def smbmaparchive(self):
        """Gets the smbmaparchive of this Body127.  # noqa: E501


        :return: The smbmaparchive of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbmaparchive

    @smbmaparchive.setter
    def smbmaparchive(self, smbmaparchive):
        """Sets the smbmaparchive of this Body127.


        :param smbmaparchive: The smbmaparchive of this Body127.  # noqa: E501
        :type: str
        """

        self._smbmaparchive = smbmaparchive

    @property
    def smbaiosize(self):
        """Gets the smbaiosize of this Body127.  # noqa: E501


        :return: The smbaiosize of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbaiosize

    @smbaiosize.setter
    def smbaiosize(self, smbaiosize):
        """Sets the smbaiosize of this Body127.


        :param smbaiosize: The smbaiosize of this Body127.  # noqa: E501
        :type: str
        """

        self._smbaiosize = smbaiosize

    @property
    def smbencryptionmode(self):
        """Gets the smbencryptionmode of this Body127.  # noqa: E501


        :return: The smbencryptionmode of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbencryptionmode

    @smbencryptionmode.setter
    def smbencryptionmode(self, smbencryptionmode):
        """Sets the smbencryptionmode of this Body127.


        :param smbencryptionmode: The smbencryptionmode of this Body127.  # noqa: E501
        :type: str
        """

        self._smbencryptionmode = smbencryptionmode

    @property
    def smbenableoplocks(self):
        """Gets the smbenableoplocks of this Body127.  # noqa: E501


        :return: The smbenableoplocks of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbenableoplocks

    @smbenableoplocks.setter
    def smbenableoplocks(self, smbenableoplocks):
        """Sets the smbenableoplocks of this Body127.


        :param smbenableoplocks: The smbenableoplocks of this Body127.  # noqa: E501
        :type: str
        """

        self._smbenableoplocks = smbenableoplocks

    @property
    def smbmanglednames(self):
        """Gets the smbmanglednames of this Body127.  # noqa: E501


        :return: The smbmanglednames of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbmanglednames

    @smbmanglednames.setter
    def smbmanglednames(self, smbmanglednames):
        """Sets the smbmanglednames of this Body127.


        :param smbmanglednames: The smbmanglednames of this Body127.  # noqa: E501
        :type: str
        """

        self._smbmanglednames = smbmanglednames

    @property
    def smbcasesensitive(self):
        """Gets the smbcasesensitive of this Body127.  # noqa: E501


        :return: The smbcasesensitive of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._smbcasesensitive

    @smbcasesensitive.setter
    def smbcasesensitive(self, smbcasesensitive):
        """Sets the smbcasesensitive of this Body127.


        :param smbcasesensitive: The smbcasesensitive of this Body127.  # noqa: E501
        :type: str
        """

        self._smbcasesensitive = smbcasesensitive

    @property
    def nfsrootsquash(self):
        """Gets the nfsrootsquash of this Body127.  # noqa: E501


        :return: The nfsrootsquash of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._nfsrootsquash

    @nfsrootsquash.setter
    def nfsrootsquash(self, nfsrootsquash):
        """Sets the nfsrootsquash of this Body127.


        :param nfsrootsquash: The nfsrootsquash of this Body127.  # noqa: E501
        :type: str
        """

        self._nfsrootsquash = nfsrootsquash

    @property
    def nfsallsquash(self):
        """Gets the nfsallsquash of this Body127.  # noqa: E501


        :return: The nfsallsquash of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._nfsallsquash

    @nfsallsquash.setter
    def nfsallsquash(self, nfsallsquash):
        """Sets the nfsallsquash of this Body127.


        :param nfsallsquash: The nfsallsquash of this Body127.  # noqa: E501
        :type: str
        """

        self._nfsallsquash = nfsallsquash

    @property
    def nfsanongid(self):
        """Gets the nfsanongid of this Body127.  # noqa: E501


        :return: The nfsanongid of this Body127.  # noqa: E501
        :rtype: int
        """
        return self._nfsanongid

    @nfsanongid.setter
    def nfsanongid(self, nfsanongid):
        """Sets the nfsanongid of this Body127.


        :param nfsanongid: The nfsanongid of this Body127.  # noqa: E501
        :type: int
        """

        self._nfsanongid = nfsanongid

    @property
    def nfsanonuid(self):
        """Gets the nfsanonuid of this Body127.  # noqa: E501


        :return: The nfsanonuid of this Body127.  # noqa: E501
        :rtype: int
        """
        return self._nfsanonuid

    @nfsanonuid.setter
    def nfsanonuid(self, nfsanonuid):
        """Sets the nfsanonuid of this Body127.


        :param nfsanonuid: The nfsanonuid of this Body127.  # noqa: E501
        :type: int
        """

        self._nfsanonuid = nfsanonuid

    @property
    def readaheadkb(self):
        """Gets the readaheadkb of this Body127.  # noqa: E501


        :return: The readaheadkb of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._readaheadkb

    @readaheadkb.setter
    def readaheadkb(self, readaheadkb):
        """Sets the readaheadkb of this Body127.


        :param readaheadkb: The readaheadkb of this Body127.  # noqa: E501
        :type: str
        """

        self._readaheadkb = readaheadkb

    @property
    def force(self):
        """Gets the force of this Body127.  # noqa: E501


        :return: The force of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this Body127.


        :param force: The force of this Body127.  # noqa: E501
        :type: str
        """

        self._force = force

    @property
    def auditenable(self):
        """Gets the auditenable of this Body127.  # noqa: E501


        :return: The auditenable of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._auditenable

    @auditenable.setter
    def auditenable(self, auditenable):
        """Sets the auditenable of this Body127.


        :param auditenable: The auditenable of this Body127.  # noqa: E501
        :type: str
        """

        self._auditenable = auditenable

    @property
    def flcenabled(self):
        """Gets the flcenabled of this Body127.  # noqa: E501


        :return: The flcenabled of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._flcenabled

    @flcenabled.setter
    def flcenabled(self, flcenabled):
        """Sets the flcenabled of this Body127.


        :param flcenabled: The flcenabled of this Body127.  # noqa: E501
        :type: str
        """

        self._flcenabled = flcenabled

    @property
    def mtr_histograms(self):
        """Gets the mtr_histograms of this Body127.  # noqa: E501


        :return: The mtr_histograms of this Body127.  # noqa: E501
        :rtype: str
        """
        return self._mtr_histograms

    @mtr_histograms.setter
    def mtr_histograms(self, mtr_histograms):
        """Sets the mtr_histograms of this Body127.


        :param mtr_histograms: The mtr_histograms of this Body127.  # noqa: E501
        :type: str
        """

        self._mtr_histograms = mtr_histograms

    @property
    def write_mbps_capping(self):
        """Gets the write_mbps_capping of this Body127.  # noqa: E501


        :return: The write_mbps_capping of this Body127.  # noqa: E501
        :rtype: int
        """
        return self._write_mbps_capping

    @write_mbps_capping.setter
    def write_mbps_capping(self, write_mbps_capping):
        """Sets the write_mbps_capping of this Body127.


        :param write_mbps_capping: The write_mbps_capping of this Body127.  # noqa: E501
        :type: int
        """

        self._write_mbps_capping = write_mbps_capping

    @property
    def read_mbps_capping(self):
        """Gets the read_mbps_capping of this Body127.  # noqa: E501


        :return: The read_mbps_capping of this Body127.  # noqa: E501
        :rtype: int
        """
        return self._read_mbps_capping

    @read_mbps_capping.setter
    def read_mbps_capping(self, read_mbps_capping):
        """Sets the read_mbps_capping of this Body127.


        :param read_mbps_capping: The read_mbps_capping of this Body127.  # noqa: E501
        :type: int
        """

        self._read_mbps_capping = read_mbps_capping

    @property
    def write_iops_capping(self):
        """Gets the write_iops_capping of this Body127.  # noqa: E501


        :return: The write_iops_capping of this Body127.  # noqa: E501
        :rtype: int
        """
        return self._write_iops_capping

    @write_iops_capping.setter
    def write_iops_capping(self, write_iops_capping):
        """Sets the write_iops_capping of this Body127.


        :param write_iops_capping: The write_iops_capping of this Body127.  # noqa: E501
        :type: int
        """

        self._write_iops_capping = write_iops_capping

    @property
    def read_iops_capping(self):
        """Gets the read_iops_capping of this Body127.  # noqa: E501


        :return: The read_iops_capping of this Body127.  # noqa: E501
        :rtype: int
        """
        return self._read_iops_capping

    @read_iops_capping.setter
    def read_iops_capping(self, read_iops_capping):
        """Sets the read_iops_capping of this Body127.


        :param read_iops_capping: The read_iops_capping of this Body127.  # noqa: E501
        :type: int
        """

        self._read_iops_capping = read_iops_capping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body127, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body127):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body127):
            return True

        return self.to_dict() != other.to_dict()
