# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body70(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'bucket': 'str',
        'endpoint': 'str',
        'username': 'str',
        'password': 'str',
        'connect_via': 'str',
        'allow_lifecycle_policies': 'bool',
        'proxyhost': 'str',
        'proxyport': 'str',
        'proxyuser': 'str',
        'proxypassword': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'bucket': 'bucket',
        'endpoint': 'endpoint',
        'username': 'username',
        'password': 'password',
        'connect_via': 'connectVia',
        'allow_lifecycle_policies': 'allow_lifecycle_policies',
        'proxyhost': 'proxyhost',
        'proxyport': 'proxyport',
        'proxyuser': 'proxyuser',
        'proxypassword': 'proxypassword'
    }

    def __init__(self, name=None, type=None, bucket=None, endpoint=None, username=None, password=None, connect_via=None, allow_lifecycle_policies=None, proxyhost=None, proxyport=None, proxyuser=None, proxypassword=None, _configuration=None):  # noqa: E501
        """Body70 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type = None
        self._bucket = None
        self._endpoint = None
        self._username = None
        self._password = None
        self._connect_via = None
        self._allow_lifecycle_policies = None
        self._proxyhost = None
        self._proxyport = None
        self._proxyuser = None
        self._proxypassword = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.bucket = bucket
        self.endpoint = endpoint
        self.username = username
        self.password = password
        self.connect_via = connect_via
        self.allow_lifecycle_policies = allow_lifecycle_policies
        if proxyhost is not None:
            self.proxyhost = proxyhost
        if proxyport is not None:
            self.proxyport = proxyport
        if proxyuser is not None:
            self.proxyuser = proxyuser
        if proxypassword is not None:
            self.proxypassword = proxypassword

    @property
    def name(self):
        """Gets the name of this Body70.  # noqa: E501


        :return: The name of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body70.


        :param name: The name of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Body70.  # noqa: E501


        :return: The type of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Body70.


        :param type: The type of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def bucket(self):
        """Gets the bucket of this Body70.  # noqa: E501


        :return: The bucket of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Body70.


        :param bucket: The bucket of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")  # noqa: E501

        self._bucket = bucket

    @property
    def endpoint(self):
        """Gets the endpoint of this Body70.  # noqa: E501


        :return: The endpoint of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Body70.


        :param endpoint: The endpoint of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def username(self):
        """Gets the username of this Body70.  # noqa: E501


        :return: The username of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Body70.


        :param username: The username of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this Body70.  # noqa: E501


        :return: The password of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body70.


        :param password: The password of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def connect_via(self):
        """Gets the connect_via of this Body70.  # noqa: E501


        :return: The connect_via of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._connect_via

    @connect_via.setter
    def connect_via(self, connect_via):
        """Sets the connect_via of this Body70.


        :param connect_via: The connect_via of this Body70.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connect_via is None:
            raise ValueError("Invalid value for `connect_via`, must not be `None`")  # noqa: E501

        self._connect_via = connect_via

    @property
    def allow_lifecycle_policies(self):
        """Gets the allow_lifecycle_policies of this Body70.  # noqa: E501


        :return: The allow_lifecycle_policies of this Body70.  # noqa: E501
        :rtype: bool
        """
        return self._allow_lifecycle_policies

    @allow_lifecycle_policies.setter
    def allow_lifecycle_policies(self, allow_lifecycle_policies):
        """Sets the allow_lifecycle_policies of this Body70.


        :param allow_lifecycle_policies: The allow_lifecycle_policies of this Body70.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and allow_lifecycle_policies is None:
            raise ValueError("Invalid value for `allow_lifecycle_policies`, must not be `None`")  # noqa: E501

        self._allow_lifecycle_policies = allow_lifecycle_policies

    @property
    def proxyhost(self):
        """Gets the proxyhost of this Body70.  # noqa: E501


        :return: The proxyhost of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._proxyhost

    @proxyhost.setter
    def proxyhost(self, proxyhost):
        """Sets the proxyhost of this Body70.


        :param proxyhost: The proxyhost of this Body70.  # noqa: E501
        :type: str
        """

        self._proxyhost = proxyhost

    @property
    def proxyport(self):
        """Gets the proxyport of this Body70.  # noqa: E501


        :return: The proxyport of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._proxyport

    @proxyport.setter
    def proxyport(self, proxyport):
        """Sets the proxyport of this Body70.


        :param proxyport: The proxyport of this Body70.  # noqa: E501
        :type: str
        """

        self._proxyport = proxyport

    @property
    def proxyuser(self):
        """Gets the proxyuser of this Body70.  # noqa: E501


        :return: The proxyuser of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._proxyuser

    @proxyuser.setter
    def proxyuser(self, proxyuser):
        """Sets the proxyuser of this Body70.


        :param proxyuser: The proxyuser of this Body70.  # noqa: E501
        :type: str
        """

        self._proxyuser = proxyuser

    @property
    def proxypassword(self):
        """Gets the proxypassword of this Body70.  # noqa: E501


        :return: The proxypassword of this Body70.  # noqa: E501
        :rtype: str
        """
        return self._proxypassword

    @proxypassword.setter
    def proxypassword(self, proxypassword):
        """Sets the proxypassword of this Body70.


        :param proxypassword: The proxypassword of this Body70.  # noqa: E501
        :type: str
        """

        self._proxypassword = proxypassword

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body70, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body70):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body70):
            return True

        return self.to_dict() != other.to_dict()
