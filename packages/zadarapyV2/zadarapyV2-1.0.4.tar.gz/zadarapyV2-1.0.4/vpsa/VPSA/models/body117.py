# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class Body117(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'email': 'str',
        'notify_on_events': 'str',
        'notification_severity': 'str'
    }

    attribute_map = {
        'username': 'username',
        'email': 'email',
        'notify_on_events': 'notify_on_events',
        'notification_severity': 'notification_severity'
    }

    def __init__(self, username=None, email=None, notify_on_events=None, notification_severity=None, _configuration=None):  # noqa: E501
        """Body117 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._email = None
        self._notify_on_events = None
        self._notification_severity = None
        self.discriminator = None

        self.username = username
        self.email = email
        if notify_on_events is not None:
            self.notify_on_events = notify_on_events
        if notification_severity is not None:
            self.notification_severity = notification_severity

    @property
    def username(self):
        """Gets the username of this Body117.  # noqa: E501


        :return: The username of this Body117.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Body117.


        :param username: The username of this Body117.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self):
        """Gets the email of this Body117.  # noqa: E501


        :return: The email of this Body117.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Body117.


        :param email: The email of this Body117.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def notify_on_events(self):
        """Gets the notify_on_events of this Body117.  # noqa: E501


        :return: The notify_on_events of this Body117.  # noqa: E501
        :rtype: str
        """
        return self._notify_on_events

    @notify_on_events.setter
    def notify_on_events(self, notify_on_events):
        """Sets the notify_on_events of this Body117.


        :param notify_on_events: The notify_on_events of this Body117.  # noqa: E501
        :type: str
        """

        self._notify_on_events = notify_on_events

    @property
    def notification_severity(self):
        """Gets the notification_severity of this Body117.  # noqa: E501


        :return: The notification_severity of this Body117.  # noqa: E501
        :rtype: str
        """
        return self._notification_severity

    @notification_severity.setter
    def notification_severity(self, notification_severity):
        """Sets the notification_severity of this Body117.


        :param notification_severity: The notification_severity of this Body117.  # noqa: E501
        :type: str
        """
        allowed_values = ["low", "normal", "high", "urgent"]  # noqa: E501
        if (self._configuration.client_side_validation and
                notification_severity not in allowed_values):
            raise ValueError(
                "Invalid value for `notification_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_severity, allowed_values)
            )

        self._notification_severity = notification_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body117, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body117):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body117):
            return True

        return self.to_dict() != other.to_dict()
