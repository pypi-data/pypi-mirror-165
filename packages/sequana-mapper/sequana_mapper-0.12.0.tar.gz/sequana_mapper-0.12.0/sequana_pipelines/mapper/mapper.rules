#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Development Team
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  website: https://github.com/sequana/sequana
#  website: https://github.com/sequana/mapper
#  documentation: http://sequana.readthedocs.io
#  Documentation: https://github.com/sequana/mapper/README.rst
##############################################################################
"""Mappper pipeline"""
import os

import sequana

from sequana_pipetools import snaketools as sm

# This must be defined before the include
configfile: "config.yaml"


# A convenient manager
if config['input_readtag']:
    manager = sm.PipelineManager("mapper", config)
else:
    manager = sm.PipelineManager("mapper", config, fastq=False)


sequana_wrapper_branch = "main"


__multiqc__input = []

rule pipeline:
    input:
        "multiqc/multiqc_report.html",
        ".sequana/rulegraph.svg",
        "reference/genome.fasta",

reference_file = config['general']['reference_file']


rule copy_reference:
    input: config['general']['reference_file']
    output: "reference/genome.fasta"
    shell:
        """
        cp {input} {output}
        """


annotation_file = config['general']['annotation_file']


if config['general']['mapper'] == "bwa":
    reference = config["general"]["reference_file"]

    rule bwa_index:
        input:
            reference="reference/genome.fasta"
        output:
            bwa_bwt="reference/genome.fasta.bwt",
            fai="reference/genome.fasta.fai"
        log:
            "reference/build.log"
        params:
            options="",
            index_algorithm='is'
        threads: 2
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        wrapper:
            f"{sequana_wrapper_branch}/wrappers/bwa/build"

    rule bwa:
        input:
            fastq=manager.getrawdata(),
            bwa_bwt="reference/genome.fasta.bwt",
            fai="reference/genome.fasta.fai",
            reference="reference/genome.fasta"
        output:
            sorted="{sample}/{sample}.sorted.bam",
        log:
            "{sample}/{sample}.log"
        params:
            options=config["bwa"]["options"],
            tmp_directory=config["bwa"]["tmp_directory"]
        threads: 2
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        wrapper:
            f"{sequana_wrapper_branch}/wrappers/bwa/align"


elif config['general']['mapper'] == "minimap2":
    rule minimap2:
        input:
            fastq=manager.getrawdata(),
            reference="reference/genome.fasta"
        output:
            "{sample}/{sample}.sorted.bam"
        threads:
            config["minimap2"]["threads"]
        params:
            options=config['minimap2']['options']
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        wrapper:
            f"{sequana_wrapper_branch}/wrappers/minimap2"

elif config['general']['mapper'] == "bowtie2":
    if not os.path.exists("reference/genome.1.bt2"):
        rule bowtie2_index:
            input:
                reference="reference/genome.fasta"
            output:
                multiext("reference/genome", ".1.bt2", ".2.bt2", ".3.bt2", ".4.bt2", ".rev.1.bt2", ".rev.2.bt2"),

            log:
                "logs/indexing/bowtie2_genome.log"
            params:
                options=config["bowtie2_index"]["options"]
            threads:
                config['bowtie2_index']['threads']
            container:
                "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
            wrapper:
                f"{sequana_wrapper_branch}/wrappers/bowtie2/build"

    rule bowtie2:
        input:
            fastq=manager.getrawdata(),
            idx=multiext("reference/genome",".1.bt2",".2.bt2",".3.bt2",".4.bt2",".rev.1.bt2",".rev.2.bt2"),
        output:
            bam="{sample}/{sample}.sorted.bam",
        log:
            "logs/bowtie2/{sample}.log"
        params:
            options=config["bowtie2"]["options"]
        threads:
            config["bowtie2"]["threads"]
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        wrapper:
            f"{sequana_wrapper_branch}/wrappers/bowtie2/align"

__multiqc__input += expand("{sample}/{sample}.sorted.bam", sample=manager.samples)

rule bam_indexing:
    input:
        "{sample}/{sample}.sorted.bam"
    output:
        "{sample}/{sample}.sorted.bam.bai"
    container:
        "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
    shell:
        """
        bamtools index -in {input}
        """

__multiqc__input += expand("{sample}/{sample}.sorted.bam.bai", sample=manager.samples)

# sample should be included at the end of the filename for the multiqc to work
rule bamtools_stats:
    input:
        bam="{sample}/{sample}.sorted.bam",
        bai="{sample}/{sample}.sorted.bam.bai"
    output:
        "{sample}/bamtools_stats/sequana_bamtools_stats_{sample}.txt"
    container:
        "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
    shell:
        """
        bamtools stats -in {input[0]} > {output}
        """

__multiqc__input += expand("{sample}/bamtools_stats/sequana_bamtools_stats_{sample}.txt", sample=manager.samples)

if config["feature_counts"]["do"]:
    rule feature_counts:
        input:
            bam="{sample}/{sample}.sorted.bam",
            gff=config["feature_counts"]["gff"]
        output:
            counts="{sample}/feature_counts/{sample}_feature.out",
            summary="{sample}/feature_counts/{sample}_feature.out.summary"
        params:
            strandness=0,
            options=config["feature_counts"]["options"],
            feature=config["feature_counts"]["feature"],
            attribute=config["feature_counts"]["attribute"]
        threads:
            config["feature_counts"]['threads']
        log:
            "{sample}/feature_counts/feature_counts.log"
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        wrapper:
            f"{sequana_wrapper_branch}/wrappers/feature_counts"

    __multiqc__input += expand("{sample}/feature_counts/{sample}_feature.out", sample=manager.samples)

# Sequana_coverage analysis

if config["sequana_coverage"]["do"]:

    rule bam2cov:
        input:
            "{sample}/{sample}.sorted.bam",
        output:
            "{sample}/bam2cov/{sample}.bed"
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        shell:
            """
            bedtools genomecov -d -ibam {input} > {output}
            """

    def get_sequana_coverage_input(config):
        input_file = {
            "bed": "{sample}/bam2cov/{sample}.bed",
            "fasta": reference_file
        }
        if config["general"]["annotation_file"]:
            input_file['gbk'] = config["general"]["annotation_file"]
        return input_file

    rule sequana_coverage:
        input:
            **get_sequana_coverage_input(config)
        output:
            "{sample}/sequana_coverage/sequana_coverage.html"
        params:
            circular=config["sequana_coverage"]["circular"],
            window_size=config["sequana_coverage"]["window_size"],
            chunksize=config["sequana_coverage"]["chunksize"],
            double_threshold=config["sequana_coverage"]["double_threshold"],
            gc_window_size=config["sequana_coverage"]["gc_window_size"],
            high_threshold=config["sequana_coverage"]["high_threshold"],
            low_threshold=config["sequana_coverage"]["low_threshold"],
            mixture_models=config["sequana_coverage"]["mixture_models"]
        wrapper:
            f"{sequana_wrapper_branch}/wrappers/sequana_coverage"

    __multiqc__input += expand("{sample}/sequana_coverage/sequana_coverage.html", sample=manager.samples)


if config["general"]["create_bigwig"]:
    rule bam2bigwig:
        input:
            "{sample}/{sample}.sorted.bam"
        output:
            "{sample}/bigwig/{sample}.bw"
        log:
            "{sample}/bigwig/{sample}.log"
        container:
            "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
        shell:
            """
            bamCoverage --bam {input} --outFileFormat bigwig --outFileName {output} > {log}
            """
    __multiqc__input += expand("{sample}/bigwig/{sample}.bw", sample=manager.samples)

# ========================================================== multiqc

multiqc_params_options = config['multiqc']['options']
if manager.config.multiqc.config_file:
    multiqc_params_options += f" -c {manager.config.multiqc.config_file}"

rule multiqc:
    input:
        __multiqc__input
    output:
       "multiqc/multiqc_report.html"
    params:
        options=multiqc_params_options,
        input_directory=config['multiqc']['input_directory'],
        config_file=config['multiqc']['config_file'],
        modules=config['multiqc']['modules']
    log:
        "multiqc/multiqc.log"
    wrapper:
       f"{sequana_wrapper_branch}/wrappers/multiqc"

# ========================================================== rulegraph
sequana_rulegraph_mapper = {"multiqc": "../multiqc/multiqc_report.html"}
include: sm.modules['rulegraph']

# Those rules takes a couple of seconds so no need for a cluster
localrules: multiqc, rulegraph

onsuccess:
    shell("chmod -R g+w .")

    from sequana import logger as mylog
    mylog.setLevel("INFO")

    # This should create the stats plot and the Makefile
    manager.teardown()
    manager.clean_multiqc("multiqc/multiqc_report.html")


    from sequana_pipelines.mapper import version as mapper_version
    data = {"name": "mapper",
            "rulegraph": ".sequana/rulegraph.svg",
            "pipeline_version": mapper_version}
    from sequana.modules_report.summary import SummaryModule2


    intro = """<h2>Overview</h2>
This pipeline mapper the different samples on the provided reference. 
A <a href="multiqc/multiqc_report.html">multiqc report</a> is available. Here below are the details of the pipeline (parameters) together with summary plots.
If coverage was selected, you should also have HTML reports for each sample with its coverage."""

    if config["sequana_coverage"]["do"]:
        intro += """<h2>Coverage plots overview</h2>"""
        import glob
        filenames = glob.glob("*/sequana_coverage/*/coverage.png")
        for count, filename in enumerate(filenames):
            parts = filename.split("/")
            image = SummaryModule2.png_to_embedded_png("self_dummy", 
                        filename,
                        #style="align:center; width:30%; height:30%",
                        style="align:center; width:95%; height:95%",
                        alt=parts[0])
            parts = filename.split("/")
            link = "/".join(parts[0:-1] + [parts[-2] + ".cov.html"])

            intro += """
            <div class="box_1_3" ><a href="{}">{}</a><hr>
            <a href="{}">{}</a>
            </div>
            """.format(link, image, link, parts[0])
            if count > 0:
                break


    s = SummaryModule2(data, intro=intro)


onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("mapper")
    p.status()

