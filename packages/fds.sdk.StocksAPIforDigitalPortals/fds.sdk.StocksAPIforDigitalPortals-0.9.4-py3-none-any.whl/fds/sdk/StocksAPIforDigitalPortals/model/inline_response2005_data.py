"""
    Prime Developer Trial

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.StocksAPIforDigitalPortals.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.StocksAPIforDigitalPortals.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_company import InlineResponse2005DataCompany
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_compliance import InlineResponse2005DataCompliance
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_estimates import InlineResponse2005DataEstimates
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_industry_classification import InlineResponse2005DataIndustryClassification
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_market import InlineResponse2005DataMarket
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_performance import InlineResponse2005DataPerformance
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_recommendation import InlineResponse2005DataRecommendation
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_reported_key_figures import InlineResponse2005DataReportedKeyFigures
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_rsi_wilder import InlineResponse2005DataRsiWilder
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_simple_moving_average import InlineResponse2005DataSimpleMovingAverage
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_stock_type import InlineResponse2005DataStockType
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_trading_value import InlineResponse2005DataTradingValue
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_value_unit import InlineResponse2005DataValueUnit
    from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005_data_volatility import InlineResponse2005DataVolatility
    globals()['InlineResponse2005DataCompany'] = InlineResponse2005DataCompany
    globals()['InlineResponse2005DataCompliance'] = InlineResponse2005DataCompliance
    globals()['InlineResponse2005DataEstimates'] = InlineResponse2005DataEstimates
    globals()['InlineResponse2005DataIndustryClassification'] = InlineResponse2005DataIndustryClassification
    globals()['InlineResponse2005DataMarket'] = InlineResponse2005DataMarket
    globals()['InlineResponse2005DataPerformance'] = InlineResponse2005DataPerformance
    globals()['InlineResponse2005DataRecommendation'] = InlineResponse2005DataRecommendation
    globals()['InlineResponse2005DataReportedKeyFigures'] = InlineResponse2005DataReportedKeyFigures
    globals()['InlineResponse2005DataRsiWilder'] = InlineResponse2005DataRsiWilder
    globals()['InlineResponse2005DataSimpleMovingAverage'] = InlineResponse2005DataSimpleMovingAverage
    globals()['InlineResponse2005DataStockType'] = InlineResponse2005DataStockType
    globals()['InlineResponse2005DataTradingValue'] = InlineResponse2005DataTradingValue
    globals()['InlineResponse2005DataValueUnit'] = InlineResponse2005DataValueUnit
    globals()['InlineResponse2005DataVolatility'] = InlineResponse2005DataVolatility


class InlineResponse2005Data(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'total_count': (float,),  # noqa: E501
            'value_unit': ([InlineResponse2005DataValueUnit],),  # noqa: E501
            'market': ([InlineResponse2005DataMarket],),  # noqa: E501
            'stock_type': ([InlineResponse2005DataStockType],),  # noqa: E501
            'industry_classification': ([InlineResponse2005DataIndustryClassification],),  # noqa: E501
            'company': (InlineResponse2005DataCompany,),  # noqa: E501
            'compliance': (InlineResponse2005DataCompliance,),  # noqa: E501
            'reported_key_figures': (InlineResponse2005DataReportedKeyFigures,),  # noqa: E501
            'performance': (InlineResponse2005DataPerformance,),  # noqa: E501
            'volatility': (InlineResponse2005DataVolatility,),  # noqa: E501
            'trading_value': (InlineResponse2005DataTradingValue,),  # noqa: E501
            'simple_moving_average': (InlineResponse2005DataSimpleMovingAverage,),  # noqa: E501
            'rsi_wilder': (InlineResponse2005DataRsiWilder,),  # noqa: E501
            'recommendation': (InlineResponse2005DataRecommendation,),  # noqa: E501
            'estimates': (InlineResponse2005DataEstimates,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'total_count': 'totalCount',  # noqa: E501
        'value_unit': 'valueUnit',  # noqa: E501
        'market': 'market',  # noqa: E501
        'stock_type': 'stockType',  # noqa: E501
        'industry_classification': 'industryClassification',  # noqa: E501
        'company': 'company',  # noqa: E501
        'compliance': 'compliance',  # noqa: E501
        'reported_key_figures': 'reportedKeyFigures',  # noqa: E501
        'performance': 'performance',  # noqa: E501
        'volatility': 'volatility',  # noqa: E501
        'trading_value': 'tradingValue',  # noqa: E501
        'simple_moving_average': 'simpleMovingAverage',  # noqa: E501
        'rsi_wilder': 'rsiWilder',  # noqa: E501
        'recommendation': 'recommendation',  # noqa: E501
        'estimates': 'estimates',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InlineResponse2005Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            total_count (float): Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.. [optional]  # noqa: E501
            value_unit ([InlineResponse2005DataValueUnit]): List of value unit identifiers. See endpoint `/basic/valueUnit/list` for possible values.. [optional]  # noqa: E501
            market ([InlineResponse2005DataMarket]): List of market identifiers. See endpoint `/basic/market/list` for possible values.. [optional]  # noqa: E501
            stock_type ([InlineResponse2005DataStockType]): List of stock types.. [optional]  # noqa: E501
            industry_classification ([InlineResponse2005DataIndustryClassification]): Lists of categories of the industry classification. Here, an industry is a category from any level of category system FactSet Revere Business Industry Classification System (RBICS). Starting with the most coarse level (one), for each level of the category system, the list of categories of the stocks, matching the parameters, is returned. See endpoint `/category/listBySystem` with `id=48` for possible values.. [optional]  # noqa: E501
            company (InlineResponse2005DataCompany): [optional]  # noqa: E501
            compliance (InlineResponse2005DataCompliance): [optional]  # noqa: E501
            reported_key_figures (InlineResponse2005DataReportedKeyFigures): [optional]  # noqa: E501
            performance (InlineResponse2005DataPerformance): [optional]  # noqa: E501
            volatility (InlineResponse2005DataVolatility): [optional]  # noqa: E501
            trading_value (InlineResponse2005DataTradingValue): [optional]  # noqa: E501
            simple_moving_average (InlineResponse2005DataSimpleMovingAverage): [optional]  # noqa: E501
            rsi_wilder (InlineResponse2005DataRsiWilder): [optional]  # noqa: E501
            recommendation (InlineResponse2005DataRecommendation): [optional]  # noqa: E501
            estimates (InlineResponse2005DataEstimates): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InlineResponse2005Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            total_count (float): Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.. [optional]  # noqa: E501
            value_unit ([InlineResponse2005DataValueUnit]): List of value unit identifiers. See endpoint `/basic/valueUnit/list` for possible values.. [optional]  # noqa: E501
            market ([InlineResponse2005DataMarket]): List of market identifiers. See endpoint `/basic/market/list` for possible values.. [optional]  # noqa: E501
            stock_type ([InlineResponse2005DataStockType]): List of stock types.. [optional]  # noqa: E501
            industry_classification ([InlineResponse2005DataIndustryClassification]): Lists of categories of the industry classification. Here, an industry is a category from any level of category system FactSet Revere Business Industry Classification System (RBICS). Starting with the most coarse level (one), for each level of the category system, the list of categories of the stocks, matching the parameters, is returned. See endpoint `/category/listBySystem` with `id=48` for possible values.. [optional]  # noqa: E501
            company (InlineResponse2005DataCompany): [optional]  # noqa: E501
            compliance (InlineResponse2005DataCompliance): [optional]  # noqa: E501
            reported_key_figures (InlineResponse2005DataReportedKeyFigures): [optional]  # noqa: E501
            performance (InlineResponse2005DataPerformance): [optional]  # noqa: E501
            volatility (InlineResponse2005DataVolatility): [optional]  # noqa: E501
            trading_value (InlineResponse2005DataTradingValue): [optional]  # noqa: E501
            simple_moving_average (InlineResponse2005DataSimpleMovingAverage): [optional]  # noqa: E501
            rsi_wilder (InlineResponse2005DataRsiWilder): [optional]  # noqa: E501
            recommendation (InlineResponse2005DataRecommendation): [optional]  # noqa: E501
            estimates (InlineResponse2005DataEstimates): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
