"""
    Prime Developer Trial

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.StocksAPIforDigitalPortals.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.StocksAPIforDigitalPortals.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.StocksAPIforDigitalPortals.exceptions import ApiException
from fds.sdk.StocksAPIforDigitalPortals.model.inline_object import InlineObject
from fds.sdk.StocksAPIforDigitalPortals.model.inline_object1 import InlineObject1
from fds.sdk.StocksAPIforDigitalPortals.model.inline_object2 import InlineObject2
from fds.sdk.StocksAPIforDigitalPortals.model.inline_object3 import InlineObject3
from fds.sdk.StocksAPIforDigitalPortals.model.inline_response200 import InlineResponse200
from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2001 import InlineResponse2001
from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2002 import InlineResponse2002
from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2003 import InlineResponse2003
from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2004 import InlineResponse2004
from fds.sdk.StocksAPIforDigitalPortals.model.inline_response2005 import InlineResponse2005





class StockApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_stock_dividend_type_list_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2001,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/dividend/type/list',
                'operation_id': 'get_stock_dividend_type_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stock_notation_key_figures_benchmark_month_1_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2002,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/keyFigures/benchmark/month/1/get',
                'operation_id': 'get_stock_notation_key_figures_benchmark_month_1_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ],
                'required': [
                    'id',
                    'id_notation_benchmark',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('id_notation_benchmark',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_notation_benchmark':
                        ([str],),
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_notation_benchmark': 'idNotationBenchmark',
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'id': 'query',
                    'id_notation_benchmark': 'query',
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'id_notation_benchmark': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stock_notation_key_figures_benchmark_month_3_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2002,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/keyFigures/benchmark/month/3/get',
                'operation_id': 'get_stock_notation_key_figures_benchmark_month_3_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ],
                'required': [
                    'id',
                    'id_notation_benchmark',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('id_notation_benchmark',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_notation_benchmark':
                        ([str],),
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_notation_benchmark': 'idNotationBenchmark',
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'id': 'query',
                    'id_notation_benchmark': 'query',
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'id_notation_benchmark': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stock_notation_key_figures_benchmark_week_1_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2002,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/keyFigures/benchmark/week/1/get',
                'operation_id': 'get_stock_notation_key_figures_benchmark_week_1_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ],
                'required': [
                    'id',
                    'id_notation_benchmark',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('id_notation_benchmark',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_notation_benchmark':
                        ([str],),
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_notation_benchmark': 'idNotationBenchmark',
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'id': 'query',
                    'id_notation_benchmark': 'query',
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'id_notation_benchmark': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stock_notation_key_figures_benchmark_year_1_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2002,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/keyFigures/benchmark/year/1/get',
                'operation_id': 'get_stock_notation_key_figures_benchmark_year_1_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ],
                'required': [
                    'id',
                    'id_notation_benchmark',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('id_notation_benchmark',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_notation_benchmark':
                        ([str],),
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_notation_benchmark': 'idNotationBenchmark',
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'id': 'query',
                    'id_notation_benchmark': 'query',
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'id_notation_benchmark': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stock_notation_key_figures_benchmark_year_3_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2002,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/keyFigures/benchmark/year/3/get',
                'operation_id': 'get_stock_notation_key_figures_benchmark_year_3_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ],
                'required': [
                    'id',
                    'id_notation_benchmark',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('id_notation_benchmark',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_notation_benchmark':
                        ([str],),
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_notation_benchmark': 'idNotationBenchmark',
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'id': 'query',
                    'id_notation_benchmark': 'query',
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'id_notation_benchmark': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stock_notation_key_figures_benchmark_year_5_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2002,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/keyFigures/benchmark/year/5/get',
                'operation_id': 'get_stock_notation_key_figures_benchmark_year_5_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ],
                'required': [
                    'id',
                    'id_notation_benchmark',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id_notation_benchmark',
                    'attributes',
                    'language',
                ]
            },
            root_map={
                'validations': {
                    ('id_notation_benchmark',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('language',): {
                        'max_length': 2,
                        'min_length': 2,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_notation_benchmark':
                        ([str],),
                    'attributes':
                        ([str],),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_notation_benchmark': 'idNotationBenchmark',
                    'attributes': '_attributes',
                    'language': '_language',
                },
                'location_map': {
                    'id': 'query',
                    'id_notation_benchmark': 'query',
                    'attributes': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                    'id_notation_benchmark': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_stock_dividend_list_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse200,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/dividend/list',
                'operation_id': 'post_stock_dividend_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (InlineObject,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_stock_notation_ranking_intraday_list_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2003,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/ranking/intraday/list',
                'operation_id': 'post_stock_notation_ranking_intraday_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (InlineObject1,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_stock_notation_screener_search_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2004,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/screener/search',
                'operation_id': 'post_stock_notation_screener_search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (InlineObject2,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_stock_notation_screener_value_ranges_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InlineResponse2005,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/stock/notation/screener/valueRanges/get',
                'operation_id': 'post_stock_notation_screener_value_ranges_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (InlineObject3,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")

    def get_stock_dividend_type_list(
        self,
        **kwargs
    ) -> InlineResponse2001:
        """List of dividend types.  # noqa: E501

        List of dividend types.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2001
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.get_stock_dividend_type_list_endpoint.call_with_http_info(**kwargs)

    def get_stock_dividend_type_list_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[InlineResponse2001, int, typing.MutableMapping]:
        """List of dividend types.  # noqa: E501

        List of dividend types.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2001
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.get_stock_dividend_type_list_endpoint.call_with_http_info(**kwargs)

    def get_stock_dividend_type_list_async(
        self,
        **kwargs
    ) -> "ApplyResult[InlineResponse2001]":
        """List of dividend types.  # noqa: E501

        List of dividend types.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2001]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.get_stock_dividend_type_list_endpoint.call_with_http_info(**kwargs)

    def get_stock_dividend_type_list_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2001, int, typing.MutableMapping]]":
        """List of dividend types.  # noqa: E501

        List of dividend types.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2001, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.get_stock_dividend_type_list_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_1_get(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> InlineResponse2002:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_1_get_with_http_info(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> typing.Tuple[InlineResponse2002, int, typing.MutableMapping]:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_1_get_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[InlineResponse2002]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2002]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_1_get_with_http_info_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2002, int, typing.MutableMapping]]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one month.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2002, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_3_get(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> InlineResponse2002:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_3_get_with_http_info(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> typing.Tuple[InlineResponse2002, int, typing.MutableMapping]:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_3_get_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[InlineResponse2002]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2002]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_month_3_get_with_http_info_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2002, int, typing.MutableMapping]]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three months.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2002, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_month_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_week_1_get(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> InlineResponse2002:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_week_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_week_1_get_with_http_info(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> typing.Tuple[InlineResponse2002, int, typing.MutableMapping]:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_week_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_week_1_get_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[InlineResponse2002]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2002]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_week_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_week_1_get_with_http_info_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2002, int, typing.MutableMapping]]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one week.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2002, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_week_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_1_get(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> InlineResponse2002:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_1_get_with_http_info(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> typing.Tuple[InlineResponse2002, int, typing.MutableMapping]:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_1_get_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[InlineResponse2002]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2002]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_1_get_with_http_info_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2002, int, typing.MutableMapping]]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of one year.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2002, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_1_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_3_get(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> InlineResponse2002:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_3_get_with_http_info(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> typing.Tuple[InlineResponse2002, int, typing.MutableMapping]:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_3_get_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[InlineResponse2002]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2002]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_3_get_with_http_info_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2002, int, typing.MutableMapping]]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of three years.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2002, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_3_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_5_get(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> InlineResponse2002:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_5_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_5_get_with_http_info(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> typing.Tuple[InlineResponse2002, int, typing.MutableMapping]:
        """End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2002
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_5_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_5_get_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[InlineResponse2002]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2002]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_5_get_endpoint.call_with_http_info(**kwargs)

    def get_stock_notation_key_figures_benchmark_year_5_get_with_http_info_async(
        self,
        id,
        id_notation_benchmark,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2002, int, typing.MutableMapping]]":
        """End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501

        End-of-day (EOD) benchmark key figures of a stock for the time range of five years.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            id (str): Identifier of the notation.
            id_notation_benchmark ([str]): List of identifiers of benchmark notations.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            language (str): ISO 639-1 code of the language.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2002, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['id'] = \
            id
        kwargs['id_notation_benchmark'] = \
            id_notation_benchmark
        return self.get_stock_notation_key_figures_benchmark_year_5_get_endpoint.call_with_http_info(**kwargs)

    def post_stock_dividend_list(
        self,
        body,
        **kwargs
    ) -> InlineResponse200:
        """List of dividends for a stock.  # noqa: E501

        List of dividends for a stock.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            body (InlineObject):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse200
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['body'] = \
            body
        return self.post_stock_dividend_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_dividend_list_with_http_info(
        self,
        body,
        **kwargs
    ) -> typing.Tuple[InlineResponse200, int, typing.MutableMapping]:
        """List of dividends for a stock.  # noqa: E501

        List of dividends for a stock.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            body (InlineObject):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse200
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['body'] = \
            body
        return self.post_stock_dividend_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_dividend_list_async(
        self,
        body,
        **kwargs
    ) -> "ApplyResult[InlineResponse200]":
        """List of dividends for a stock.  # noqa: E501

        List of dividends for a stock.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            body (InlineObject):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse200]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['body'] = \
            body
        return self.post_stock_dividend_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_dividend_list_with_http_info_async(
        self,
        body,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse200, int, typing.MutableMapping]]":
        """List of dividends for a stock.  # noqa: E501

        List of dividends for a stock.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            body (InlineObject):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse200, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['body'] = \
            body
        return self.post_stock_dividend_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_ranking_intraday_list(
        self,
        **kwargs
    ) -> InlineResponse2003:
        """Ranking of stocks' notations using intraday figures.  # noqa: E501

        Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            body (InlineObject1): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2003
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.post_stock_notation_ranking_intraday_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_ranking_intraday_list_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[InlineResponse2003, int, typing.MutableMapping]:
        """Ranking of stocks' notations using intraday figures.  # noqa: E501

        Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            body (InlineObject1): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2003
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.post_stock_notation_ranking_intraday_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_ranking_intraday_list_async(
        self,
        **kwargs
    ) -> "ApplyResult[InlineResponse2003]":
        """Ranking of stocks' notations using intraday figures.  # noqa: E501

        Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            body (InlineObject1): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2003]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.post_stock_notation_ranking_intraday_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_ranking_intraday_list_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2003, int, typing.MutableMapping]]":
        """Ranking of stocks' notations using intraday figures.  # noqa: E501

        Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            body (InlineObject1): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2003, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.post_stock_notation_ranking_intraday_list_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_search(
        self,
        **kwargs
    ) -> InlineResponse2004:
        """Screener for stocks' notations based on stock-specific parameters.  # noqa: E501

        Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            body (InlineObject2): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2004
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.post_stock_notation_screener_search_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_search_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[InlineResponse2004, int, typing.MutableMapping]:
        """Screener for stocks' notations based on stock-specific parameters.  # noqa: E501

        Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            body (InlineObject2): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2004
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.post_stock_notation_screener_search_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_search_async(
        self,
        **kwargs
    ) -> "ApplyResult[InlineResponse2004]":
        """Screener for stocks' notations based on stock-specific parameters.  # noqa: E501

        Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            body (InlineObject2): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2004]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.post_stock_notation_screener_search_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_search_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2004, int, typing.MutableMapping]]":
        """Screener for stocks' notations based on stock-specific parameters.  # noqa: E501

        Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            body (InlineObject2): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2004, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.post_stock_notation_screener_search_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_value_ranges_get(
        self,
        **kwargs
    ) -> InlineResponse2005:
        """Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.  # noqa: E501

        The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            body (InlineObject3): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2005
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.post_stock_notation_screener_value_ranges_get_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_value_ranges_get_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[InlineResponse2005, int, typing.MutableMapping]:
        """Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.  # noqa: E501

        The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            body (InlineObject3): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InlineResponse2005
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.post_stock_notation_screener_value_ranges_get_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_value_ranges_get_async(
        self,
        **kwargs
    ) -> "ApplyResult[InlineResponse2005]":
        """Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.  # noqa: E501

        The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            body (InlineObject3): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InlineResponse2005]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.post_stock_notation_screener_value_ranges_get_endpoint.call_with_http_info(**kwargs)

    def post_stock_notation_screener_value_ranges_get_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InlineResponse2005, int, typing.MutableMapping]]":
        """Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.  # noqa: E501

        The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            body (InlineObject3): [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InlineResponse2005, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.post_stock_notation_screener_value_ranges_get_endpoint.call_with_http_info(**kwargs)

